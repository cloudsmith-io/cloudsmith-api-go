/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.617.1
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceTeams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceTeams{}

// ServiceTeams struct for ServiceTeams
type ServiceTeams struct {
	// The team role associated with the service
	Role *string `json:"role,omitempty"`
	// The teams associated with the service
	Slug                 string `json:"slug" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	AdditionalProperties map[string]interface{}
}

type _ServiceTeams ServiceTeams

// NewServiceTeams instantiates a new ServiceTeams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTeams(slug string) *ServiceTeams {
	this := ServiceTeams{}
	var role string = "Manager"
	this.Role = &role
	this.Slug = slug
	return &this
}

// NewServiceTeamsWithDefaults instantiates a new ServiceTeams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTeamsWithDefaults() *ServiceTeams {
	this := ServiceTeams{}
	var role string = "Manager"
	this.Role = &role
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ServiceTeams) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTeams) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ServiceTeams) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ServiceTeams) SetRole(v string) {
	o.Role = &v
}

// GetSlug returns the Slug field value
func (o *ServiceTeams) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *ServiceTeams) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *ServiceTeams) SetSlug(v string) {
	o.Slug = v
}

func (o ServiceTeams) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceTeams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	toSerialize["slug"] = o.Slug

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceTeams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"slug",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceTeams := _ServiceTeams{}

	err = json.Unmarshal(data, &varServiceTeams)

	if err != nil {
		return err
	}

	*o = ServiceTeams(varServiceTeams)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "role")
		delete(additionalProperties, "slug")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceTeams struct {
	value *ServiceTeams
	isSet bool
}

func (v NullableServiceTeams) Get() *ServiceTeams {
	return v.value
}

func (v *NullableServiceTeams) Set(val *ServiceTeams) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTeams) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTeams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTeams(val *ServiceTeams) *NullableServiceTeams {
	return &NullableServiceTeams{value: val, isSet: true}
}

func (v NullableServiceTeams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTeams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
