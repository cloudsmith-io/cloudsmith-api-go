/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.616.0
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
)

// checks if the EntitlementUsageMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntitlementUsageMetrics{}

// EntitlementUsageMetrics struct for EntitlementUsageMetrics
type EntitlementUsageMetrics struct {
	Tokens               CommonMetrics `json:"tokens"`
	AdditionalProperties map[string]interface{}
}

type _EntitlementUsageMetrics EntitlementUsageMetrics

// NewEntitlementUsageMetrics instantiates a new EntitlementUsageMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementUsageMetrics(tokens CommonMetrics) *EntitlementUsageMetrics {
	this := EntitlementUsageMetrics{}
	this.Tokens = tokens
	return &this
}

// NewEntitlementUsageMetricsWithDefaults instantiates a new EntitlementUsageMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementUsageMetricsWithDefaults() *EntitlementUsageMetrics {
	this := EntitlementUsageMetrics{}
	return &this
}

// GetTokens returns the Tokens field value
func (o *EntitlementUsageMetrics) GetTokens() CommonMetrics {
	if o == nil {
		var ret CommonMetrics
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *EntitlementUsageMetrics) GetTokensOk() (*CommonMetrics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tokens, true
}

// SetTokens sets field value
func (o *EntitlementUsageMetrics) SetTokens(v CommonMetrics) {
	o.Tokens = v
}

func (o EntitlementUsageMetrics) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntitlementUsageMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tokens"] = o.Tokens

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EntitlementUsageMetrics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntitlementUsageMetrics := _EntitlementUsageMetrics{}

	err = json.Unmarshal(data, &varEntitlementUsageMetrics)

	if err != nil {
		return err
	}

	*o = EntitlementUsageMetrics(varEntitlementUsageMetrics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tokens")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEntitlementUsageMetrics struct {
	value *EntitlementUsageMetrics
	isSet bool
}

func (v NullableEntitlementUsageMetrics) Get() *EntitlementUsageMetrics {
	return v.value
}

func (v *NullableEntitlementUsageMetrics) Set(val *EntitlementUsageMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementUsageMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementUsageMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementUsageMetrics(val *EntitlementUsageMetrics) *NullableEntitlementUsageMetrics {
	return &NullableEntitlementUsageMetrics{value: val, isSet: true}
}

func (v NullableEntitlementUsageMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementUsageMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
