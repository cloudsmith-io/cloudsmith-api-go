/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.568.8
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
)

// checks if the RepositoryGeoIpTestAddressResponseDict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryGeoIpTestAddressResponseDict{}

// RepositoryGeoIpTestAddressResponseDict struct for RepositoryGeoIpTestAddressResponseDict
type RepositoryGeoIpTestAddressResponseDict struct {
	// The result of the IP test
	Allowed bool `json:"allowed"`
	// The country code of the tested IP address
	CountryCode NullableString `json:"country_code"`
	// The IP address that was tested
	IpAddress string `json:"ip_address"`
	// The reason for the result
	Reason               string `json:"reason"`
	AdditionalProperties map[string]interface{}
}

type _RepositoryGeoIpTestAddressResponseDict RepositoryGeoIpTestAddressResponseDict

// NewRepositoryGeoIpTestAddressResponseDict instantiates a new RepositoryGeoIpTestAddressResponseDict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryGeoIpTestAddressResponseDict(allowed bool, countryCode NullableString, ipAddress string, reason string) *RepositoryGeoIpTestAddressResponseDict {
	this := RepositoryGeoIpTestAddressResponseDict{}
	this.Allowed = allowed
	this.CountryCode = countryCode
	this.IpAddress = ipAddress
	this.Reason = reason
	return &this
}

// NewRepositoryGeoIpTestAddressResponseDictWithDefaults instantiates a new RepositoryGeoIpTestAddressResponseDict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryGeoIpTestAddressResponseDictWithDefaults() *RepositoryGeoIpTestAddressResponseDict {
	this := RepositoryGeoIpTestAddressResponseDict{}
	return &this
}

// GetAllowed returns the Allowed field value
func (o *RepositoryGeoIpTestAddressResponseDict) GetAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Allowed
}

// GetAllowedOk returns a tuple with the Allowed field value
// and a boolean to check if the value has been set.
func (o *RepositoryGeoIpTestAddressResponseDict) GetAllowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allowed, true
}

// SetAllowed sets field value
func (o *RepositoryGeoIpTestAddressResponseDict) SetAllowed(v bool) {
	o.Allowed = v
}

// GetCountryCode returns the CountryCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RepositoryGeoIpTestAddressResponseDict) GetCountryCode() string {
	if o == nil || o.CountryCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.CountryCode.Get()
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RepositoryGeoIpTestAddressResponseDict) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryCode.Get(), o.CountryCode.IsSet()
}

// SetCountryCode sets field value
func (o *RepositoryGeoIpTestAddressResponseDict) SetCountryCode(v string) {
	o.CountryCode.Set(&v)
}

// GetIpAddress returns the IpAddress field value
func (o *RepositoryGeoIpTestAddressResponseDict) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *RepositoryGeoIpTestAddressResponseDict) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *RepositoryGeoIpTestAddressResponseDict) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetReason returns the Reason field value
func (o *RepositoryGeoIpTestAddressResponseDict) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *RepositoryGeoIpTestAddressResponseDict) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *RepositoryGeoIpTestAddressResponseDict) SetReason(v string) {
	o.Reason = v
}

func (o RepositoryGeoIpTestAddressResponseDict) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryGeoIpTestAddressResponseDict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allowed"] = o.Allowed
	toSerialize["country_code"] = o.CountryCode.Get()
	toSerialize["ip_address"] = o.IpAddress
	toSerialize["reason"] = o.Reason

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RepositoryGeoIpTestAddressResponseDict) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allowed",
		"country_code",
		"ip_address",
		"reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepositoryGeoIpTestAddressResponseDict := _RepositoryGeoIpTestAddressResponseDict{}

	err = json.Unmarshal(data, &varRepositoryGeoIpTestAddressResponseDict)

	if err != nil {
		return err
	}

	*o = RepositoryGeoIpTestAddressResponseDict(varRepositoryGeoIpTestAddressResponseDict)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowed")
		delete(additionalProperties, "country_code")
		delete(additionalProperties, "ip_address")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepositoryGeoIpTestAddressResponseDict struct {
	value *RepositoryGeoIpTestAddressResponseDict
	isSet bool
}

func (v NullableRepositoryGeoIpTestAddressResponseDict) Get() *RepositoryGeoIpTestAddressResponseDict {
	return v.value
}

func (v *NullableRepositoryGeoIpTestAddressResponseDict) Set(val *RepositoryGeoIpTestAddressResponseDict) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryGeoIpTestAddressResponseDict) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryGeoIpTestAddressResponseDict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryGeoIpTestAddressResponseDict(val *RepositoryGeoIpTestAddressResponseDict) *NullableRepositoryGeoIpTestAddressResponseDict {
	return &NullableRepositoryGeoIpTestAddressResponseDict{value: val, isSet: true}
}

func (v NullableRepositoryGeoIpTestAddressResponseDict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryGeoIpTestAddressResponseDict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
