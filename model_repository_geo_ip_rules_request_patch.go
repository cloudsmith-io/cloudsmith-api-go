/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.247.7
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// RepositoryGeoIPRulesRequestPatch struct for RepositoryGeoIPRulesRequestPatch
type RepositoryGeoIPRulesRequestPatch struct {
	Cidr        *RepositoryGeoIPCidr        `json:"cidr,omitempty"`
	CountryCode *RepositoryGeoIPCountryCode `json:"country_code,omitempty"`
}

// NewRepositoryGeoIPRulesRequestPatch instantiates a new RepositoryGeoIPRulesRequestPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryGeoIPRulesRequestPatch() *RepositoryGeoIPRulesRequestPatch {
	this := RepositoryGeoIPRulesRequestPatch{}
	return &this
}

// NewRepositoryGeoIPRulesRequestPatchWithDefaults instantiates a new RepositoryGeoIPRulesRequestPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryGeoIPRulesRequestPatchWithDefaults() *RepositoryGeoIPRulesRequestPatch {
	this := RepositoryGeoIPRulesRequestPatch{}
	return &this
}

// GetCidr returns the Cidr field value if set, zero value otherwise.
func (o *RepositoryGeoIPRulesRequestPatch) GetCidr() RepositoryGeoIPCidr {
	if o == nil || isNil(o.Cidr) {
		var ret RepositoryGeoIPCidr
		return ret
	}
	return *o.Cidr
}

// GetCidrOk returns a tuple with the Cidr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryGeoIPRulesRequestPatch) GetCidrOk() (*RepositoryGeoIPCidr, bool) {
	if o == nil || isNil(o.Cidr) {
		return nil, false
	}
	return o.Cidr, true
}

// HasCidr returns a boolean if a field has been set.
func (o *RepositoryGeoIPRulesRequestPatch) HasCidr() bool {
	if o != nil && !isNil(o.Cidr) {
		return true
	}

	return false
}

// SetCidr gets a reference to the given RepositoryGeoIPCidr and assigns it to the Cidr field.
func (o *RepositoryGeoIPRulesRequestPatch) SetCidr(v RepositoryGeoIPCidr) {
	o.Cidr = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *RepositoryGeoIPRulesRequestPatch) GetCountryCode() RepositoryGeoIPCountryCode {
	if o == nil || isNil(o.CountryCode) {
		var ret RepositoryGeoIPCountryCode
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryGeoIPRulesRequestPatch) GetCountryCodeOk() (*RepositoryGeoIPCountryCode, bool) {
	if o == nil || isNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *RepositoryGeoIPRulesRequestPatch) HasCountryCode() bool {
	if o != nil && !isNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given RepositoryGeoIPCountryCode and assigns it to the CountryCode field.
func (o *RepositoryGeoIPRulesRequestPatch) SetCountryCode(v RepositoryGeoIPCountryCode) {
	o.CountryCode = &v
}

func (o RepositoryGeoIPRulesRequestPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Cidr) {
		toSerialize["cidr"] = o.Cidr
	}
	if !isNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryGeoIPRulesRequestPatch struct {
	value *RepositoryGeoIPRulesRequestPatch
	isSet bool
}

func (v NullableRepositoryGeoIPRulesRequestPatch) Get() *RepositoryGeoIPRulesRequestPatch {
	return v.value
}

func (v *NullableRepositoryGeoIPRulesRequestPatch) Set(val *RepositoryGeoIPRulesRequestPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryGeoIPRulesRequestPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryGeoIPRulesRequestPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryGeoIPRulesRequestPatch(val *RepositoryGeoIPRulesRequestPatch) *NullableRepositoryGeoIPRulesRequestPatch {
	return &NullableRepositoryGeoIPRulesRequestPatch{value: val, isSet: true}
}

func (v NullableRepositoryGeoIPRulesRequestPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryGeoIPRulesRequestPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
