/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.181.6
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// PackageFileUploadResponse struct for PackageFileUploadResponse
type PackageFileUploadResponse struct {
	// The identifier for the file to use when creating packages
	Identifier *string `json:"identifier,omitempty"`
	// The dictionary of fields that must be sent with POST uploads
	UploadFields map[string]interface{} `json:"upload_fields,omitempty"`
	// The dictionary of headers that must be sent with uploads
	UploadHeaders map[string]interface{} `json:"upload_headers,omitempty"`
	// The querystring to use for the next-step POST or PUT upload
	UploadQuerystring NullableString `json:"upload_querystring,omitempty"`
	// The URL to use for the next-step POST or PUT upload
	UploadUrl *string `json:"upload_url,omitempty"`
}

// NewPackageFileUploadResponse instantiates a new PackageFileUploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageFileUploadResponse() *PackageFileUploadResponse {
	this := PackageFileUploadResponse{}
	return &this
}

// NewPackageFileUploadResponseWithDefaults instantiates a new PackageFileUploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageFileUploadResponseWithDefaults() *PackageFileUploadResponse {
	this := PackageFileUploadResponse{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *PackageFileUploadResponse) GetIdentifier() string {
	if o == nil || isNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFileUploadResponse) GetIdentifierOk() (*string, bool) {
	if o == nil || isNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *PackageFileUploadResponse) HasIdentifier() bool {
	if o != nil && !isNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *PackageFileUploadResponse) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetUploadFields returns the UploadFields field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageFileUploadResponse) GetUploadFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.UploadFields
}

// GetUploadFieldsOk returns a tuple with the UploadFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageFileUploadResponse) GetUploadFieldsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.UploadFields) {
		return map[string]interface{}{}, false
	}
	return o.UploadFields, true
}

// HasUploadFields returns a boolean if a field has been set.
func (o *PackageFileUploadResponse) HasUploadFields() bool {
	if o != nil && isNil(o.UploadFields) {
		return true
	}

	return false
}

// SetUploadFields gets a reference to the given map[string]interface{} and assigns it to the UploadFields field.
func (o *PackageFileUploadResponse) SetUploadFields(v map[string]interface{}) {
	o.UploadFields = v
}

// GetUploadHeaders returns the UploadHeaders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageFileUploadResponse) GetUploadHeaders() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.UploadHeaders
}

// GetUploadHeadersOk returns a tuple with the UploadHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageFileUploadResponse) GetUploadHeadersOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.UploadHeaders) {
		return map[string]interface{}{}, false
	}
	return o.UploadHeaders, true
}

// HasUploadHeaders returns a boolean if a field has been set.
func (o *PackageFileUploadResponse) HasUploadHeaders() bool {
	if o != nil && isNil(o.UploadHeaders) {
		return true
	}

	return false
}

// SetUploadHeaders gets a reference to the given map[string]interface{} and assigns it to the UploadHeaders field.
func (o *PackageFileUploadResponse) SetUploadHeaders(v map[string]interface{}) {
	o.UploadHeaders = v
}

// GetUploadQuerystring returns the UploadQuerystring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageFileUploadResponse) GetUploadQuerystring() string {
	if o == nil || isNil(o.UploadQuerystring.Get()) {
		var ret string
		return ret
	}
	return *o.UploadQuerystring.Get()
}

// GetUploadQuerystringOk returns a tuple with the UploadQuerystring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageFileUploadResponse) GetUploadQuerystringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UploadQuerystring.Get(), o.UploadQuerystring.IsSet()
}

// HasUploadQuerystring returns a boolean if a field has been set.
func (o *PackageFileUploadResponse) HasUploadQuerystring() bool {
	if o != nil && o.UploadQuerystring.IsSet() {
		return true
	}

	return false
}

// SetUploadQuerystring gets a reference to the given NullableString and assigns it to the UploadQuerystring field.
func (o *PackageFileUploadResponse) SetUploadQuerystring(v string) {
	o.UploadQuerystring.Set(&v)
}

// SetUploadQuerystringNil sets the value for UploadQuerystring to be an explicit nil
func (o *PackageFileUploadResponse) SetUploadQuerystringNil() {
	o.UploadQuerystring.Set(nil)
}

// UnsetUploadQuerystring ensures that no value is present for UploadQuerystring, not even an explicit nil
func (o *PackageFileUploadResponse) UnsetUploadQuerystring() {
	o.UploadQuerystring.Unset()
}

// GetUploadUrl returns the UploadUrl field value if set, zero value otherwise.
func (o *PackageFileUploadResponse) GetUploadUrl() string {
	if o == nil || isNil(o.UploadUrl) {
		var ret string
		return ret
	}
	return *o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageFileUploadResponse) GetUploadUrlOk() (*string, bool) {
	if o == nil || isNil(o.UploadUrl) {
		return nil, false
	}
	return o.UploadUrl, true
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *PackageFileUploadResponse) HasUploadUrl() bool {
	if o != nil && !isNil(o.UploadUrl) {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given string and assigns it to the UploadUrl field.
func (o *PackageFileUploadResponse) SetUploadUrl(v string) {
	o.UploadUrl = &v
}

func (o PackageFileUploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if o.UploadFields != nil {
		toSerialize["upload_fields"] = o.UploadFields
	}
	if o.UploadHeaders != nil {
		toSerialize["upload_headers"] = o.UploadHeaders
	}
	if o.UploadQuerystring.IsSet() {
		toSerialize["upload_querystring"] = o.UploadQuerystring.Get()
	}
	if !isNil(o.UploadUrl) {
		toSerialize["upload_url"] = o.UploadUrl
	}
	return json.Marshal(toSerialize)
}

type NullablePackageFileUploadResponse struct {
	value *PackageFileUploadResponse
	isSet bool
}

func (v NullablePackageFileUploadResponse) Get() *PackageFileUploadResponse {
	return v.value
}

func (v *NullablePackageFileUploadResponse) Set(val *PackageFileUploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageFileUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageFileUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageFileUploadResponse(val *PackageFileUploadResponse) *NullablePackageFileUploadResponse {
	return &NullablePackageFileUploadResponse{value: val, isSet: true}
}

func (v NullablePackageFileUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageFileUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
