/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.768.2
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
)

// checks if the DynamicMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamicMapping{}

// DynamicMapping The dynamic mappings of `mapping_claim` values to service accounts. Cannot be provided if `service_accounts` is also set.  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.
type DynamicMapping struct {
	// The OIDC token claim value that must be present in the token for it to successfully authenticate as the mapped `service_account`.  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.
	ClaimValue string `json:"claim_value"`
	// The service account associated with the provider setting and `claim_value`  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.
	ServiceAccount       string `json:"service_account"`
	AdditionalProperties map[string]interface{}
}

type _DynamicMapping DynamicMapping

// NewDynamicMapping instantiates a new DynamicMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamicMapping(claimValue string, serviceAccount string) *DynamicMapping {
	this := DynamicMapping{}
	this.ClaimValue = claimValue
	this.ServiceAccount = serviceAccount
	return &this
}

// NewDynamicMappingWithDefaults instantiates a new DynamicMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamicMappingWithDefaults() *DynamicMapping {
	this := DynamicMapping{}
	return &this
}

// GetClaimValue returns the ClaimValue field value
func (o *DynamicMapping) GetClaimValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClaimValue
}

// GetClaimValueOk returns a tuple with the ClaimValue field value
// and a boolean to check if the value has been set.
func (o *DynamicMapping) GetClaimValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClaimValue, true
}

// SetClaimValue sets field value
func (o *DynamicMapping) SetClaimValue(v string) {
	o.ClaimValue = v
}

// GetServiceAccount returns the ServiceAccount field value
func (o *DynamicMapping) GetServiceAccount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceAccount
}

// GetServiceAccountOk returns a tuple with the ServiceAccount field value
// and a boolean to check if the value has been set.
func (o *DynamicMapping) GetServiceAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceAccount, true
}

// SetServiceAccount sets field value
func (o *DynamicMapping) SetServiceAccount(v string) {
	o.ServiceAccount = v
}

func (o DynamicMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamicMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["claim_value"] = o.ClaimValue
	toSerialize["service_account"] = o.ServiceAccount

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DynamicMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"claim_value",
		"service_account",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDynamicMapping := _DynamicMapping{}

	err = json.Unmarshal(data, &varDynamicMapping)

	if err != nil {
		return err
	}

	*o = DynamicMapping(varDynamicMapping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "claim_value")
		delete(additionalProperties, "service_account")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDynamicMapping struct {
	value *DynamicMapping
	isSet bool
}

func (v NullableDynamicMapping) Get() *DynamicMapping {
	return v.value
}

func (v *NullableDynamicMapping) Set(val *DynamicMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamicMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamicMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamicMapping(val *DynamicMapping) *NullableDynamicMapping {
	return &NullableDynamicMapping{value: val, isSet: true}
}

func (v NullableDynamicMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamicMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
