/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.768.2
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"time"
)

// checks if the PackageTag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageTag{}

// PackageTag struct for PackageTag
type PackageTag struct {
	Architectures  []Architecture `json:"architectures,omitempty"`
	CdnUrl         NullableString `json:"cdn_url,omitempty"`
	ChecksumMd5    *string        `json:"checksum_md5,omitempty"`
	ChecksumSha1   *string        `json:"checksum_sha1,omitempty"`
	ChecksumSha256 *string        `json:"checksum_sha256,omitempty"`
	ChecksumSha512 *string        `json:"checksum_sha512,omitempty"`
	// A checksum of all of the package's dependencies.
	DependenciesChecksumMd5 NullableString `json:"dependencies_checksum_md5,omitempty"`
	DependenciesUrl         *string        `json:"dependencies_url,omitempty"`
	// A textual description of this package.
	Description   NullableString       `json:"description,omitempty"`
	DisplayName   *string              `json:"display_name,omitempty"`
	Distro        NullableDistribution `json:"distro,omitempty"`
	DistroVersion *DistributionVersion `json:"distro_version,omitempty"`
	Downloads     *int64               `json:"downloads,omitempty"`
	// The epoch of the package version (if any).
	Epoch     NullableInt64 `json:"epoch,omitempty"`
	Extension *string       `json:"extension,omitempty"`
	Filename  *string       `json:"filename,omitempty"`
	Files     []PackageFile `json:"files,omitempty"`
	Format    *string       `json:"format,omitempty"`
	FormatUrl *string       `json:"format_url,omitempty"`
	// Amount of storage that will be freed if this package is deleted
	FreeableStorage    *int64         `json:"freeable_storage,omitempty"`
	FullyQualifiedName NullableString `json:"fully_qualified_name,omitempty"`
	// Unique and permanent identifier for the package.
	IdentifierPerm *string `json:"identifier_perm,omitempty"`
	// Return a map of identifier field names and their values.
	Identifiers    *map[string]string `json:"identifiers,omitempty"`
	Indexed        *bool              `json:"indexed,omitempty"`
	IsCancellable  *bool              `json:"is_cancellable,omitempty"`
	IsCopyable     *bool              `json:"is_copyable,omitempty"`
	IsDeleteable   *bool              `json:"is_deleteable,omitempty"`
	IsDownloadable *bool              `json:"is_downloadable,omitempty"`
	// If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.
	IsImmutable         *bool `json:"is_immutable,omitempty"`
	IsMoveable          *bool `json:"is_moveable,omitempty"`
	IsQuarantinable     *bool `json:"is_quarantinable,omitempty"`
	IsQuarantined       *bool `json:"is_quarantined,omitempty"`
	IsResyncable        *bool `json:"is_resyncable,omitempty"`
	IsSecurityScannable *bool `json:"is_security_scannable,omitempty"`
	IsSyncAwaiting      *bool `json:"is_sync_awaiting,omitempty"`
	IsSyncCompleted     *bool `json:"is_sync_completed,omitempty"`
	IsSyncFailed        *bool `json:"is_sync_failed,omitempty"`
	IsSyncInFlight      *bool `json:"is_sync_in_flight,omitempty"`
	IsSyncInProgress    *bool `json:"is_sync_in_progress,omitempty"`
	// The license of this package.
	License NullableString `json:"license,omitempty"`
	// The name of this package.
	Name                NullableString `json:"name,omitempty"`
	Namespace           *string        `json:"namespace,omitempty"`
	NamespaceUrl        *string        `json:"namespace_url,omitempty"`
	NumFiles            *int64         `json:"num_files,omitempty"`
	OriginRepository    *string        `json:"origin_repository,omitempty"`
	OriginRepositoryUrl *string        `json:"origin_repository_url,omitempty"`
	// The type of package contents.
	PackageType *int64 `json:"package_type,omitempty"`
	// Whether or not the package has violated any policy.
	PolicyViolated *bool `json:"policy_violated,omitempty"`
	// The release of the package version (if any).
	Release       NullableString `json:"release,omitempty"`
	Repository    *string        `json:"repository,omitempty"`
	RepositoryUrl *string        `json:"repository_url,omitempty"`
	// The datetime the security scanning was completed.
	SecurityScanCompletedAt NullableTime `json:"security_scan_completed_at,omitempty"`
	// The datetime the security scanning was started.
	SecurityScanStartedAt NullableTime   `json:"security_scan_started_at,omitempty"`
	SecurityScanStatus    NullableString `json:"security_scan_status,omitempty"`
	// The datetime the security scanning status was updated.
	SecurityScanStatusUpdatedAt NullableTime   `json:"security_scan_status_updated_at,omitempty"`
	SelfHtmlUrl                 *string        `json:"self_html_url,omitempty"`
	SelfUrl                     *string        `json:"self_url,omitempty"`
	SignatureUrl                NullableString `json:"signature_url,omitempty"`
	// The calculated size of the package.
	Size *int64 `json:"size,omitempty"`
	// The public unique identifier for the package.
	Slug     *string `json:"slug,omitempty" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	SlugPerm *string `json:"slug_perm,omitempty" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	// The synchronisation (in progress) stage of the package.
	Stage    *int64  `json:"stage,omitempty"`
	StageStr *string `json:"stage_str,omitempty"`
	// The datetime the package stage was updated at.
	StageUpdatedAt *time.Time `json:"stage_updated_at,omitempty"`
	// The synchronisation status of the package.
	Status *int64 `json:"status,omitempty"`
	// A textual description for the synchronous status reason (if any
	StatusReason NullableString `json:"status_reason,omitempty"`
	StatusStr    *string        `json:"status_str,omitempty"`
	// The datetime the package status was updated at.
	StatusUpdatedAt *time.Time `json:"status_updated_at,omitempty"`
	StatusUrl       *string    `json:"status_url,omitempty"`
	Subtype         *string    `json:"subtype,omitempty"`
	// A one-liner synopsis of this package.
	Summary NullableString `json:"summary,omitempty"`
	// The datetime the package sync was finished at.
	SyncFinishedAt NullableTime `json:"sync_finished_at,omitempty"`
	// Synchronisation progress (from 0-100)
	SyncProgress *int64 `json:"sync_progress,omitempty"`
	// All tags on the package, grouped by tag type. This includes immutable tags, but doesn't distinguish them from mutable. To see which tags are immutable specifically, see the tags_immutable field.
	TagsImmutable map[string]interface{} `json:"tags_immutable,omitempty"`
	TypeDisplay   *string                `json:"type_display,omitempty"`
	// The date this package was uploaded.
	UploadedAt  *time.Time `json:"uploaded_at,omitempty"`
	Uploader    *string    `json:"uploader,omitempty"`
	UploaderUrl *string    `json:"uploader_url,omitempty"`
	// The raw version for this package.
	Version                     NullableString `json:"version,omitempty"`
	VersionOrig                 *string        `json:"version_orig,omitempty"`
	VulnerabilityScanResultsUrl *string        `json:"vulnerability_scan_results_url,omitempty"`
	AdditionalProperties        map[string]interface{}
}

type _PackageTag PackageTag

// NewPackageTag instantiates a new PackageTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageTag() *PackageTag {
	this := PackageTag{}
	var isImmutable bool = false
	this.IsImmutable = &isImmutable
	return &this
}

// NewPackageTagWithDefaults instantiates a new PackageTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageTagWithDefaults() *PackageTag {
	this := PackageTag{}
	var isImmutable bool = false
	this.IsImmutable = &isImmutable
	return &this
}

// GetArchitectures returns the Architectures field value if set, zero value otherwise.
func (o *PackageTag) GetArchitectures() []Architecture {
	if o == nil || IsNil(o.Architectures) {
		var ret []Architecture
		return ret
	}
	return o.Architectures
}

// GetArchitecturesOk returns a tuple with the Architectures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetArchitecturesOk() ([]Architecture, bool) {
	if o == nil || IsNil(o.Architectures) {
		return nil, false
	}
	return o.Architectures, true
}

// HasArchitectures returns a boolean if a field has been set.
func (o *PackageTag) HasArchitectures() bool {
	if o != nil && !IsNil(o.Architectures) {
		return true
	}

	return false
}

// SetArchitectures gets a reference to the given []Architecture and assigns it to the Architectures field.
func (o *PackageTag) SetArchitectures(v []Architecture) {
	o.Architectures = v
}

// GetCdnUrl returns the CdnUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetCdnUrl() string {
	if o == nil || IsNil(o.CdnUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CdnUrl.Get()
}

// GetCdnUrlOk returns a tuple with the CdnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetCdnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CdnUrl.Get(), o.CdnUrl.IsSet()
}

// HasCdnUrl returns a boolean if a field has been set.
func (o *PackageTag) HasCdnUrl() bool {
	if o != nil && o.CdnUrl.IsSet() {
		return true
	}

	return false
}

// SetCdnUrl gets a reference to the given NullableString and assigns it to the CdnUrl field.
func (o *PackageTag) SetCdnUrl(v string) {
	o.CdnUrl.Set(&v)
}

// SetCdnUrlNil sets the value for CdnUrl to be an explicit nil
func (o *PackageTag) SetCdnUrlNil() {
	o.CdnUrl.Set(nil)
}

// UnsetCdnUrl ensures that no value is present for CdnUrl, not even an explicit nil
func (o *PackageTag) UnsetCdnUrl() {
	o.CdnUrl.Unset()
}

// GetChecksumMd5 returns the ChecksumMd5 field value if set, zero value otherwise.
func (o *PackageTag) GetChecksumMd5() string {
	if o == nil || IsNil(o.ChecksumMd5) {
		var ret string
		return ret
	}
	return *o.ChecksumMd5
}

// GetChecksumMd5Ok returns a tuple with the ChecksumMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetChecksumMd5Ok() (*string, bool) {
	if o == nil || IsNil(o.ChecksumMd5) {
		return nil, false
	}
	return o.ChecksumMd5, true
}

// HasChecksumMd5 returns a boolean if a field has been set.
func (o *PackageTag) HasChecksumMd5() bool {
	if o != nil && !IsNil(o.ChecksumMd5) {
		return true
	}

	return false
}

// SetChecksumMd5 gets a reference to the given string and assigns it to the ChecksumMd5 field.
func (o *PackageTag) SetChecksumMd5(v string) {
	o.ChecksumMd5 = &v
}

// GetChecksumSha1 returns the ChecksumSha1 field value if set, zero value otherwise.
func (o *PackageTag) GetChecksumSha1() string {
	if o == nil || IsNil(o.ChecksumSha1) {
		var ret string
		return ret
	}
	return *o.ChecksumSha1
}

// GetChecksumSha1Ok returns a tuple with the ChecksumSha1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetChecksumSha1Ok() (*string, bool) {
	if o == nil || IsNil(o.ChecksumSha1) {
		return nil, false
	}
	return o.ChecksumSha1, true
}

// HasChecksumSha1 returns a boolean if a field has been set.
func (o *PackageTag) HasChecksumSha1() bool {
	if o != nil && !IsNil(o.ChecksumSha1) {
		return true
	}

	return false
}

// SetChecksumSha1 gets a reference to the given string and assigns it to the ChecksumSha1 field.
func (o *PackageTag) SetChecksumSha1(v string) {
	o.ChecksumSha1 = &v
}

// GetChecksumSha256 returns the ChecksumSha256 field value if set, zero value otherwise.
func (o *PackageTag) GetChecksumSha256() string {
	if o == nil || IsNil(o.ChecksumSha256) {
		var ret string
		return ret
	}
	return *o.ChecksumSha256
}

// GetChecksumSha256Ok returns a tuple with the ChecksumSha256 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetChecksumSha256Ok() (*string, bool) {
	if o == nil || IsNil(o.ChecksumSha256) {
		return nil, false
	}
	return o.ChecksumSha256, true
}

// HasChecksumSha256 returns a boolean if a field has been set.
func (o *PackageTag) HasChecksumSha256() bool {
	if o != nil && !IsNil(o.ChecksumSha256) {
		return true
	}

	return false
}

// SetChecksumSha256 gets a reference to the given string and assigns it to the ChecksumSha256 field.
func (o *PackageTag) SetChecksumSha256(v string) {
	o.ChecksumSha256 = &v
}

// GetChecksumSha512 returns the ChecksumSha512 field value if set, zero value otherwise.
func (o *PackageTag) GetChecksumSha512() string {
	if o == nil || IsNil(o.ChecksumSha512) {
		var ret string
		return ret
	}
	return *o.ChecksumSha512
}

// GetChecksumSha512Ok returns a tuple with the ChecksumSha512 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetChecksumSha512Ok() (*string, bool) {
	if o == nil || IsNil(o.ChecksumSha512) {
		return nil, false
	}
	return o.ChecksumSha512, true
}

// HasChecksumSha512 returns a boolean if a field has been set.
func (o *PackageTag) HasChecksumSha512() bool {
	if o != nil && !IsNil(o.ChecksumSha512) {
		return true
	}

	return false
}

// SetChecksumSha512 gets a reference to the given string and assigns it to the ChecksumSha512 field.
func (o *PackageTag) SetChecksumSha512(v string) {
	o.ChecksumSha512 = &v
}

// GetDependenciesChecksumMd5 returns the DependenciesChecksumMd5 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetDependenciesChecksumMd5() string {
	if o == nil || IsNil(o.DependenciesChecksumMd5.Get()) {
		var ret string
		return ret
	}
	return *o.DependenciesChecksumMd5.Get()
}

// GetDependenciesChecksumMd5Ok returns a tuple with the DependenciesChecksumMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetDependenciesChecksumMd5Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DependenciesChecksumMd5.Get(), o.DependenciesChecksumMd5.IsSet()
}

// HasDependenciesChecksumMd5 returns a boolean if a field has been set.
func (o *PackageTag) HasDependenciesChecksumMd5() bool {
	if o != nil && o.DependenciesChecksumMd5.IsSet() {
		return true
	}

	return false
}

// SetDependenciesChecksumMd5 gets a reference to the given NullableString and assigns it to the DependenciesChecksumMd5 field.
func (o *PackageTag) SetDependenciesChecksumMd5(v string) {
	o.DependenciesChecksumMd5.Set(&v)
}

// SetDependenciesChecksumMd5Nil sets the value for DependenciesChecksumMd5 to be an explicit nil
func (o *PackageTag) SetDependenciesChecksumMd5Nil() {
	o.DependenciesChecksumMd5.Set(nil)
}

// UnsetDependenciesChecksumMd5 ensures that no value is present for DependenciesChecksumMd5, not even an explicit nil
func (o *PackageTag) UnsetDependenciesChecksumMd5() {
	o.DependenciesChecksumMd5.Unset()
}

// GetDependenciesUrl returns the DependenciesUrl field value if set, zero value otherwise.
func (o *PackageTag) GetDependenciesUrl() string {
	if o == nil || IsNil(o.DependenciesUrl) {
		var ret string
		return ret
	}
	return *o.DependenciesUrl
}

// GetDependenciesUrlOk returns a tuple with the DependenciesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetDependenciesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DependenciesUrl) {
		return nil, false
	}
	return o.DependenciesUrl, true
}

// HasDependenciesUrl returns a boolean if a field has been set.
func (o *PackageTag) HasDependenciesUrl() bool {
	if o != nil && !IsNil(o.DependenciesUrl) {
		return true
	}

	return false
}

// SetDependenciesUrl gets a reference to the given string and assigns it to the DependenciesUrl field.
func (o *PackageTag) SetDependenciesUrl(v string) {
	o.DependenciesUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PackageTag) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PackageTag) SetDescription(v string) {
	o.Description.Set(&v)
}

// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PackageTag) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PackageTag) UnsetDescription() {
	o.Description.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PackageTag) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PackageTag) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PackageTag) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDistro returns the Distro field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetDistro() Distribution {
	if o == nil || IsNil(o.Distro.Get()) {
		var ret Distribution
		return ret
	}
	return *o.Distro.Get()
}

// GetDistroOk returns a tuple with the Distro field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetDistroOk() (*Distribution, bool) {
	if o == nil {
		return nil, false
	}
	return o.Distro.Get(), o.Distro.IsSet()
}

// HasDistro returns a boolean if a field has been set.
func (o *PackageTag) HasDistro() bool {
	if o != nil && o.Distro.IsSet() {
		return true
	}

	return false
}

// SetDistro gets a reference to the given NullableDistribution and assigns it to the Distro field.
func (o *PackageTag) SetDistro(v Distribution) {
	o.Distro.Set(&v)
}

// SetDistroNil sets the value for Distro to be an explicit nil
func (o *PackageTag) SetDistroNil() {
	o.Distro.Set(nil)
}

// UnsetDistro ensures that no value is present for Distro, not even an explicit nil
func (o *PackageTag) UnsetDistro() {
	o.Distro.Unset()
}

// GetDistroVersion returns the DistroVersion field value if set, zero value otherwise.
func (o *PackageTag) GetDistroVersion() DistributionVersion {
	if o == nil || IsNil(o.DistroVersion) {
		var ret DistributionVersion
		return ret
	}
	return *o.DistroVersion
}

// GetDistroVersionOk returns a tuple with the DistroVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetDistroVersionOk() (*DistributionVersion, bool) {
	if o == nil || IsNil(o.DistroVersion) {
		return nil, false
	}
	return o.DistroVersion, true
}

// HasDistroVersion returns a boolean if a field has been set.
func (o *PackageTag) HasDistroVersion() bool {
	if o != nil && !IsNil(o.DistroVersion) {
		return true
	}

	return false
}

// SetDistroVersion gets a reference to the given DistributionVersion and assigns it to the DistroVersion field.
func (o *PackageTag) SetDistroVersion(v DistributionVersion) {
	o.DistroVersion = &v
}

// GetDownloads returns the Downloads field value if set, zero value otherwise.
func (o *PackageTag) GetDownloads() int64 {
	if o == nil || IsNil(o.Downloads) {
		var ret int64
		return ret
	}
	return *o.Downloads
}

// GetDownloadsOk returns a tuple with the Downloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetDownloadsOk() (*int64, bool) {
	if o == nil || IsNil(o.Downloads) {
		return nil, false
	}
	return o.Downloads, true
}

// HasDownloads returns a boolean if a field has been set.
func (o *PackageTag) HasDownloads() bool {
	if o != nil && !IsNil(o.Downloads) {
		return true
	}

	return false
}

// SetDownloads gets a reference to the given int64 and assigns it to the Downloads field.
func (o *PackageTag) SetDownloads(v int64) {
	o.Downloads = &v
}

// GetEpoch returns the Epoch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetEpoch() int64 {
	if o == nil || IsNil(o.Epoch.Get()) {
		var ret int64
		return ret
	}
	return *o.Epoch.Get()
}

// GetEpochOk returns a tuple with the Epoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetEpochOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Epoch.Get(), o.Epoch.IsSet()
}

// HasEpoch returns a boolean if a field has been set.
func (o *PackageTag) HasEpoch() bool {
	if o != nil && o.Epoch.IsSet() {
		return true
	}

	return false
}

// SetEpoch gets a reference to the given NullableInt64 and assigns it to the Epoch field.
func (o *PackageTag) SetEpoch(v int64) {
	o.Epoch.Set(&v)
}

// SetEpochNil sets the value for Epoch to be an explicit nil
func (o *PackageTag) SetEpochNil() {
	o.Epoch.Set(nil)
}

// UnsetEpoch ensures that no value is present for Epoch, not even an explicit nil
func (o *PackageTag) UnsetEpoch() {
	o.Epoch.Unset()
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *PackageTag) GetExtension() string {
	if o == nil || IsNil(o.Extension) {
		var ret string
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *PackageTag) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given string and assigns it to the Extension field.
func (o *PackageTag) SetExtension(v string) {
	o.Extension = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *PackageTag) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *PackageTag) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *PackageTag) SetFilename(v string) {
	o.Filename = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *PackageTag) GetFiles() []PackageFile {
	if o == nil || IsNil(o.Files) {
		var ret []PackageFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetFilesOk() ([]PackageFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *PackageTag) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []PackageFile and assigns it to the Files field.
func (o *PackageTag) SetFiles(v []PackageFile) {
	o.Files = v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *PackageTag) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *PackageTag) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *PackageTag) SetFormat(v string) {
	o.Format = &v
}

// GetFormatUrl returns the FormatUrl field value if set, zero value otherwise.
func (o *PackageTag) GetFormatUrl() string {
	if o == nil || IsNil(o.FormatUrl) {
		var ret string
		return ret
	}
	return *o.FormatUrl
}

// GetFormatUrlOk returns a tuple with the FormatUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetFormatUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FormatUrl) {
		return nil, false
	}
	return o.FormatUrl, true
}

// HasFormatUrl returns a boolean if a field has been set.
func (o *PackageTag) HasFormatUrl() bool {
	if o != nil && !IsNil(o.FormatUrl) {
		return true
	}

	return false
}

// SetFormatUrl gets a reference to the given string and assigns it to the FormatUrl field.
func (o *PackageTag) SetFormatUrl(v string) {
	o.FormatUrl = &v
}

// GetFreeableStorage returns the FreeableStorage field value if set, zero value otherwise.
func (o *PackageTag) GetFreeableStorage() int64 {
	if o == nil || IsNil(o.FreeableStorage) {
		var ret int64
		return ret
	}
	return *o.FreeableStorage
}

// GetFreeableStorageOk returns a tuple with the FreeableStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetFreeableStorageOk() (*int64, bool) {
	if o == nil || IsNil(o.FreeableStorage) {
		return nil, false
	}
	return o.FreeableStorage, true
}

// HasFreeableStorage returns a boolean if a field has been set.
func (o *PackageTag) HasFreeableStorage() bool {
	if o != nil && !IsNil(o.FreeableStorage) {
		return true
	}

	return false
}

// SetFreeableStorage gets a reference to the given int64 and assigns it to the FreeableStorage field.
func (o *PackageTag) SetFreeableStorage(v int64) {
	o.FreeableStorage = &v
}

// GetFullyQualifiedName returns the FullyQualifiedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetFullyQualifiedName() string {
	if o == nil || IsNil(o.FullyQualifiedName.Get()) {
		var ret string
		return ret
	}
	return *o.FullyQualifiedName.Get()
}

// GetFullyQualifiedNameOk returns a tuple with the FullyQualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetFullyQualifiedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullyQualifiedName.Get(), o.FullyQualifiedName.IsSet()
}

// HasFullyQualifiedName returns a boolean if a field has been set.
func (o *PackageTag) HasFullyQualifiedName() bool {
	if o != nil && o.FullyQualifiedName.IsSet() {
		return true
	}

	return false
}

// SetFullyQualifiedName gets a reference to the given NullableString and assigns it to the FullyQualifiedName field.
func (o *PackageTag) SetFullyQualifiedName(v string) {
	o.FullyQualifiedName.Set(&v)
}

// SetFullyQualifiedNameNil sets the value for FullyQualifiedName to be an explicit nil
func (o *PackageTag) SetFullyQualifiedNameNil() {
	o.FullyQualifiedName.Set(nil)
}

// UnsetFullyQualifiedName ensures that no value is present for FullyQualifiedName, not even an explicit nil
func (o *PackageTag) UnsetFullyQualifiedName() {
	o.FullyQualifiedName.Unset()
}

// GetIdentifierPerm returns the IdentifierPerm field value if set, zero value otherwise.
func (o *PackageTag) GetIdentifierPerm() string {
	if o == nil || IsNil(o.IdentifierPerm) {
		var ret string
		return ret
	}
	return *o.IdentifierPerm
}

// GetIdentifierPermOk returns a tuple with the IdentifierPerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIdentifierPermOk() (*string, bool) {
	if o == nil || IsNil(o.IdentifierPerm) {
		return nil, false
	}
	return o.IdentifierPerm, true
}

// HasIdentifierPerm returns a boolean if a field has been set.
func (o *PackageTag) HasIdentifierPerm() bool {
	if o != nil && !IsNil(o.IdentifierPerm) {
		return true
	}

	return false
}

// SetIdentifierPerm gets a reference to the given string and assigns it to the IdentifierPerm field.
func (o *PackageTag) SetIdentifierPerm(v string) {
	o.IdentifierPerm = &v
}

// GetIdentifiers returns the Identifiers field value if set, zero value otherwise.
func (o *PackageTag) GetIdentifiers() map[string]string {
	if o == nil || IsNil(o.Identifiers) {
		var ret map[string]string
		return ret
	}
	return *o.Identifiers
}

// GetIdentifiersOk returns a tuple with the Identifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIdentifiersOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Identifiers) {
		return nil, false
	}
	return o.Identifiers, true
}

// HasIdentifiers returns a boolean if a field has been set.
func (o *PackageTag) HasIdentifiers() bool {
	if o != nil && !IsNil(o.Identifiers) {
		return true
	}

	return false
}

// SetIdentifiers gets a reference to the given map[string]string and assigns it to the Identifiers field.
func (o *PackageTag) SetIdentifiers(v map[string]string) {
	o.Identifiers = &v
}

// GetIndexed returns the Indexed field value if set, zero value otherwise.
func (o *PackageTag) GetIndexed() bool {
	if o == nil || IsNil(o.Indexed) {
		var ret bool
		return ret
	}
	return *o.Indexed
}

// GetIndexedOk returns a tuple with the Indexed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIndexedOk() (*bool, bool) {
	if o == nil || IsNil(o.Indexed) {
		return nil, false
	}
	return o.Indexed, true
}

// HasIndexed returns a boolean if a field has been set.
func (o *PackageTag) HasIndexed() bool {
	if o != nil && !IsNil(o.Indexed) {
		return true
	}

	return false
}

// SetIndexed gets a reference to the given bool and assigns it to the Indexed field.
func (o *PackageTag) SetIndexed(v bool) {
	o.Indexed = &v
}

// GetIsCancellable returns the IsCancellable field value if set, zero value otherwise.
func (o *PackageTag) GetIsCancellable() bool {
	if o == nil || IsNil(o.IsCancellable) {
		var ret bool
		return ret
	}
	return *o.IsCancellable
}

// GetIsCancellableOk returns a tuple with the IsCancellable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsCancellableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCancellable) {
		return nil, false
	}
	return o.IsCancellable, true
}

// HasIsCancellable returns a boolean if a field has been set.
func (o *PackageTag) HasIsCancellable() bool {
	if o != nil && !IsNil(o.IsCancellable) {
		return true
	}

	return false
}

// SetIsCancellable gets a reference to the given bool and assigns it to the IsCancellable field.
func (o *PackageTag) SetIsCancellable(v bool) {
	o.IsCancellable = &v
}

// GetIsCopyable returns the IsCopyable field value if set, zero value otherwise.
func (o *PackageTag) GetIsCopyable() bool {
	if o == nil || IsNil(o.IsCopyable) {
		var ret bool
		return ret
	}
	return *o.IsCopyable
}

// GetIsCopyableOk returns a tuple with the IsCopyable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsCopyableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCopyable) {
		return nil, false
	}
	return o.IsCopyable, true
}

// HasIsCopyable returns a boolean if a field has been set.
func (o *PackageTag) HasIsCopyable() bool {
	if o != nil && !IsNil(o.IsCopyable) {
		return true
	}

	return false
}

// SetIsCopyable gets a reference to the given bool and assigns it to the IsCopyable field.
func (o *PackageTag) SetIsCopyable(v bool) {
	o.IsCopyable = &v
}

// GetIsDeleteable returns the IsDeleteable field value if set, zero value otherwise.
func (o *PackageTag) GetIsDeleteable() bool {
	if o == nil || IsNil(o.IsDeleteable) {
		var ret bool
		return ret
	}
	return *o.IsDeleteable
}

// GetIsDeleteableOk returns a tuple with the IsDeleteable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsDeleteableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleteable) {
		return nil, false
	}
	return o.IsDeleteable, true
}

// HasIsDeleteable returns a boolean if a field has been set.
func (o *PackageTag) HasIsDeleteable() bool {
	if o != nil && !IsNil(o.IsDeleteable) {
		return true
	}

	return false
}

// SetIsDeleteable gets a reference to the given bool and assigns it to the IsDeleteable field.
func (o *PackageTag) SetIsDeleteable(v bool) {
	o.IsDeleteable = &v
}

// GetIsDownloadable returns the IsDownloadable field value if set, zero value otherwise.
func (o *PackageTag) GetIsDownloadable() bool {
	if o == nil || IsNil(o.IsDownloadable) {
		var ret bool
		return ret
	}
	return *o.IsDownloadable
}

// GetIsDownloadableOk returns a tuple with the IsDownloadable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsDownloadableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDownloadable) {
		return nil, false
	}
	return o.IsDownloadable, true
}

// HasIsDownloadable returns a boolean if a field has been set.
func (o *PackageTag) HasIsDownloadable() bool {
	if o != nil && !IsNil(o.IsDownloadable) {
		return true
	}

	return false
}

// SetIsDownloadable gets a reference to the given bool and assigns it to the IsDownloadable field.
func (o *PackageTag) SetIsDownloadable(v bool) {
	o.IsDownloadable = &v
}

// GetIsImmutable returns the IsImmutable field value if set, zero value otherwise.
func (o *PackageTag) GetIsImmutable() bool {
	if o == nil || IsNil(o.IsImmutable) {
		var ret bool
		return ret
	}
	return *o.IsImmutable
}

// GetIsImmutableOk returns a tuple with the IsImmutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsImmutableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsImmutable) {
		return nil, false
	}
	return o.IsImmutable, true
}

// HasIsImmutable returns a boolean if a field has been set.
func (o *PackageTag) HasIsImmutable() bool {
	if o != nil && !IsNil(o.IsImmutable) {
		return true
	}

	return false
}

// SetIsImmutable gets a reference to the given bool and assigns it to the IsImmutable field.
func (o *PackageTag) SetIsImmutable(v bool) {
	o.IsImmutable = &v
}

// GetIsMoveable returns the IsMoveable field value if set, zero value otherwise.
func (o *PackageTag) GetIsMoveable() bool {
	if o == nil || IsNil(o.IsMoveable) {
		var ret bool
		return ret
	}
	return *o.IsMoveable
}

// GetIsMoveableOk returns a tuple with the IsMoveable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsMoveableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMoveable) {
		return nil, false
	}
	return o.IsMoveable, true
}

// HasIsMoveable returns a boolean if a field has been set.
func (o *PackageTag) HasIsMoveable() bool {
	if o != nil && !IsNil(o.IsMoveable) {
		return true
	}

	return false
}

// SetIsMoveable gets a reference to the given bool and assigns it to the IsMoveable field.
func (o *PackageTag) SetIsMoveable(v bool) {
	o.IsMoveable = &v
}

// GetIsQuarantinable returns the IsQuarantinable field value if set, zero value otherwise.
func (o *PackageTag) GetIsQuarantinable() bool {
	if o == nil || IsNil(o.IsQuarantinable) {
		var ret bool
		return ret
	}
	return *o.IsQuarantinable
}

// GetIsQuarantinableOk returns a tuple with the IsQuarantinable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsQuarantinableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQuarantinable) {
		return nil, false
	}
	return o.IsQuarantinable, true
}

// HasIsQuarantinable returns a boolean if a field has been set.
func (o *PackageTag) HasIsQuarantinable() bool {
	if o != nil && !IsNil(o.IsQuarantinable) {
		return true
	}

	return false
}

// SetIsQuarantinable gets a reference to the given bool and assigns it to the IsQuarantinable field.
func (o *PackageTag) SetIsQuarantinable(v bool) {
	o.IsQuarantinable = &v
}

// GetIsQuarantined returns the IsQuarantined field value if set, zero value otherwise.
func (o *PackageTag) GetIsQuarantined() bool {
	if o == nil || IsNil(o.IsQuarantined) {
		var ret bool
		return ret
	}
	return *o.IsQuarantined
}

// GetIsQuarantinedOk returns a tuple with the IsQuarantined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsQuarantinedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsQuarantined) {
		return nil, false
	}
	return o.IsQuarantined, true
}

// HasIsQuarantined returns a boolean if a field has been set.
func (o *PackageTag) HasIsQuarantined() bool {
	if o != nil && !IsNil(o.IsQuarantined) {
		return true
	}

	return false
}

// SetIsQuarantined gets a reference to the given bool and assigns it to the IsQuarantined field.
func (o *PackageTag) SetIsQuarantined(v bool) {
	o.IsQuarantined = &v
}

// GetIsResyncable returns the IsResyncable field value if set, zero value otherwise.
func (o *PackageTag) GetIsResyncable() bool {
	if o == nil || IsNil(o.IsResyncable) {
		var ret bool
		return ret
	}
	return *o.IsResyncable
}

// GetIsResyncableOk returns a tuple with the IsResyncable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsResyncableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsResyncable) {
		return nil, false
	}
	return o.IsResyncable, true
}

// HasIsResyncable returns a boolean if a field has been set.
func (o *PackageTag) HasIsResyncable() bool {
	if o != nil && !IsNil(o.IsResyncable) {
		return true
	}

	return false
}

// SetIsResyncable gets a reference to the given bool and assigns it to the IsResyncable field.
func (o *PackageTag) SetIsResyncable(v bool) {
	o.IsResyncable = &v
}

// GetIsSecurityScannable returns the IsSecurityScannable field value if set, zero value otherwise.
func (o *PackageTag) GetIsSecurityScannable() bool {
	if o == nil || IsNil(o.IsSecurityScannable) {
		var ret bool
		return ret
	}
	return *o.IsSecurityScannable
}

// GetIsSecurityScannableOk returns a tuple with the IsSecurityScannable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsSecurityScannableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSecurityScannable) {
		return nil, false
	}
	return o.IsSecurityScannable, true
}

// HasIsSecurityScannable returns a boolean if a field has been set.
func (o *PackageTag) HasIsSecurityScannable() bool {
	if o != nil && !IsNil(o.IsSecurityScannable) {
		return true
	}

	return false
}

// SetIsSecurityScannable gets a reference to the given bool and assigns it to the IsSecurityScannable field.
func (o *PackageTag) SetIsSecurityScannable(v bool) {
	o.IsSecurityScannable = &v
}

// GetIsSyncAwaiting returns the IsSyncAwaiting field value if set, zero value otherwise.
func (o *PackageTag) GetIsSyncAwaiting() bool {
	if o == nil || IsNil(o.IsSyncAwaiting) {
		var ret bool
		return ret
	}
	return *o.IsSyncAwaiting
}

// GetIsSyncAwaitingOk returns a tuple with the IsSyncAwaiting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsSyncAwaitingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncAwaiting) {
		return nil, false
	}
	return o.IsSyncAwaiting, true
}

// HasIsSyncAwaiting returns a boolean if a field has been set.
func (o *PackageTag) HasIsSyncAwaiting() bool {
	if o != nil && !IsNil(o.IsSyncAwaiting) {
		return true
	}

	return false
}

// SetIsSyncAwaiting gets a reference to the given bool and assigns it to the IsSyncAwaiting field.
func (o *PackageTag) SetIsSyncAwaiting(v bool) {
	o.IsSyncAwaiting = &v
}

// GetIsSyncCompleted returns the IsSyncCompleted field value if set, zero value otherwise.
func (o *PackageTag) GetIsSyncCompleted() bool {
	if o == nil || IsNil(o.IsSyncCompleted) {
		var ret bool
		return ret
	}
	return *o.IsSyncCompleted
}

// GetIsSyncCompletedOk returns a tuple with the IsSyncCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsSyncCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncCompleted) {
		return nil, false
	}
	return o.IsSyncCompleted, true
}

// HasIsSyncCompleted returns a boolean if a field has been set.
func (o *PackageTag) HasIsSyncCompleted() bool {
	if o != nil && !IsNil(o.IsSyncCompleted) {
		return true
	}

	return false
}

// SetIsSyncCompleted gets a reference to the given bool and assigns it to the IsSyncCompleted field.
func (o *PackageTag) SetIsSyncCompleted(v bool) {
	o.IsSyncCompleted = &v
}

// GetIsSyncFailed returns the IsSyncFailed field value if set, zero value otherwise.
func (o *PackageTag) GetIsSyncFailed() bool {
	if o == nil || IsNil(o.IsSyncFailed) {
		var ret bool
		return ret
	}
	return *o.IsSyncFailed
}

// GetIsSyncFailedOk returns a tuple with the IsSyncFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsSyncFailedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncFailed) {
		return nil, false
	}
	return o.IsSyncFailed, true
}

// HasIsSyncFailed returns a boolean if a field has been set.
func (o *PackageTag) HasIsSyncFailed() bool {
	if o != nil && !IsNil(o.IsSyncFailed) {
		return true
	}

	return false
}

// SetIsSyncFailed gets a reference to the given bool and assigns it to the IsSyncFailed field.
func (o *PackageTag) SetIsSyncFailed(v bool) {
	o.IsSyncFailed = &v
}

// GetIsSyncInFlight returns the IsSyncInFlight field value if set, zero value otherwise.
func (o *PackageTag) GetIsSyncInFlight() bool {
	if o == nil || IsNil(o.IsSyncInFlight) {
		var ret bool
		return ret
	}
	return *o.IsSyncInFlight
}

// GetIsSyncInFlightOk returns a tuple with the IsSyncInFlight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsSyncInFlightOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncInFlight) {
		return nil, false
	}
	return o.IsSyncInFlight, true
}

// HasIsSyncInFlight returns a boolean if a field has been set.
func (o *PackageTag) HasIsSyncInFlight() bool {
	if o != nil && !IsNil(o.IsSyncInFlight) {
		return true
	}

	return false
}

// SetIsSyncInFlight gets a reference to the given bool and assigns it to the IsSyncInFlight field.
func (o *PackageTag) SetIsSyncInFlight(v bool) {
	o.IsSyncInFlight = &v
}

// GetIsSyncInProgress returns the IsSyncInProgress field value if set, zero value otherwise.
func (o *PackageTag) GetIsSyncInProgress() bool {
	if o == nil || IsNil(o.IsSyncInProgress) {
		var ret bool
		return ret
	}
	return *o.IsSyncInProgress
}

// GetIsSyncInProgressOk returns a tuple with the IsSyncInProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetIsSyncInProgressOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSyncInProgress) {
		return nil, false
	}
	return o.IsSyncInProgress, true
}

// HasIsSyncInProgress returns a boolean if a field has been set.
func (o *PackageTag) HasIsSyncInProgress() bool {
	if o != nil && !IsNil(o.IsSyncInProgress) {
		return true
	}

	return false
}

// SetIsSyncInProgress gets a reference to the given bool and assigns it to the IsSyncInProgress field.
func (o *PackageTag) SetIsSyncInProgress(v bool) {
	o.IsSyncInProgress = &v
}

// GetLicense returns the License field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetLicense() string {
	if o == nil || IsNil(o.License.Get()) {
		var ret string
		return ret
	}
	return *o.License.Get()
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.License.Get(), o.License.IsSet()
}

// HasLicense returns a boolean if a field has been set.
func (o *PackageTag) HasLicense() bool {
	if o != nil && o.License.IsSet() {
		return true
	}

	return false
}

// SetLicense gets a reference to the given NullableString and assigns it to the License field.
func (o *PackageTag) SetLicense(v string) {
	o.License.Set(&v)
}

// SetLicenseNil sets the value for License to be an explicit nil
func (o *PackageTag) SetLicenseNil() {
	o.License.Set(nil)
}

// UnsetLicense ensures that no value is present for License, not even an explicit nil
func (o *PackageTag) UnsetLicense() {
	o.License.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PackageTag) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PackageTag) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *PackageTag) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PackageTag) UnsetName() {
	o.Name.Unset()
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *PackageTag) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *PackageTag) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *PackageTag) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNamespaceUrl returns the NamespaceUrl field value if set, zero value otherwise.
func (o *PackageTag) GetNamespaceUrl() string {
	if o == nil || IsNil(o.NamespaceUrl) {
		var ret string
		return ret
	}
	return *o.NamespaceUrl
}

// GetNamespaceUrlOk returns a tuple with the NamespaceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetNamespaceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceUrl) {
		return nil, false
	}
	return o.NamespaceUrl, true
}

// HasNamespaceUrl returns a boolean if a field has been set.
func (o *PackageTag) HasNamespaceUrl() bool {
	if o != nil && !IsNil(o.NamespaceUrl) {
		return true
	}

	return false
}

// SetNamespaceUrl gets a reference to the given string and assigns it to the NamespaceUrl field.
func (o *PackageTag) SetNamespaceUrl(v string) {
	o.NamespaceUrl = &v
}

// GetNumFiles returns the NumFiles field value if set, zero value otherwise.
func (o *PackageTag) GetNumFiles() int64 {
	if o == nil || IsNil(o.NumFiles) {
		var ret int64
		return ret
	}
	return *o.NumFiles
}

// GetNumFilesOk returns a tuple with the NumFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetNumFilesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumFiles) {
		return nil, false
	}
	return o.NumFiles, true
}

// HasNumFiles returns a boolean if a field has been set.
func (o *PackageTag) HasNumFiles() bool {
	if o != nil && !IsNil(o.NumFiles) {
		return true
	}

	return false
}

// SetNumFiles gets a reference to the given int64 and assigns it to the NumFiles field.
func (o *PackageTag) SetNumFiles(v int64) {
	o.NumFiles = &v
}

// GetOriginRepository returns the OriginRepository field value if set, zero value otherwise.
func (o *PackageTag) GetOriginRepository() string {
	if o == nil || IsNil(o.OriginRepository) {
		var ret string
		return ret
	}
	return *o.OriginRepository
}

// GetOriginRepositoryOk returns a tuple with the OriginRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetOriginRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.OriginRepository) {
		return nil, false
	}
	return o.OriginRepository, true
}

// HasOriginRepository returns a boolean if a field has been set.
func (o *PackageTag) HasOriginRepository() bool {
	if o != nil && !IsNil(o.OriginRepository) {
		return true
	}

	return false
}

// SetOriginRepository gets a reference to the given string and assigns it to the OriginRepository field.
func (o *PackageTag) SetOriginRepository(v string) {
	o.OriginRepository = &v
}

// GetOriginRepositoryUrl returns the OriginRepositoryUrl field value if set, zero value otherwise.
func (o *PackageTag) GetOriginRepositoryUrl() string {
	if o == nil || IsNil(o.OriginRepositoryUrl) {
		var ret string
		return ret
	}
	return *o.OriginRepositoryUrl
}

// GetOriginRepositoryUrlOk returns a tuple with the OriginRepositoryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetOriginRepositoryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OriginRepositoryUrl) {
		return nil, false
	}
	return o.OriginRepositoryUrl, true
}

// HasOriginRepositoryUrl returns a boolean if a field has been set.
func (o *PackageTag) HasOriginRepositoryUrl() bool {
	if o != nil && !IsNil(o.OriginRepositoryUrl) {
		return true
	}

	return false
}

// SetOriginRepositoryUrl gets a reference to the given string and assigns it to the OriginRepositoryUrl field.
func (o *PackageTag) SetOriginRepositoryUrl(v string) {
	o.OriginRepositoryUrl = &v
}

// GetPackageType returns the PackageType field value if set, zero value otherwise.
func (o *PackageTag) GetPackageType() int64 {
	if o == nil || IsNil(o.PackageType) {
		var ret int64
		return ret
	}
	return *o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetPackageTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.PackageType) {
		return nil, false
	}
	return o.PackageType, true
}

// HasPackageType returns a boolean if a field has been set.
func (o *PackageTag) HasPackageType() bool {
	if o != nil && !IsNil(o.PackageType) {
		return true
	}

	return false
}

// SetPackageType gets a reference to the given int64 and assigns it to the PackageType field.
func (o *PackageTag) SetPackageType(v int64) {
	o.PackageType = &v
}

// GetPolicyViolated returns the PolicyViolated field value if set, zero value otherwise.
func (o *PackageTag) GetPolicyViolated() bool {
	if o == nil || IsNil(o.PolicyViolated) {
		var ret bool
		return ret
	}
	return *o.PolicyViolated
}

// GetPolicyViolatedOk returns a tuple with the PolicyViolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetPolicyViolatedOk() (*bool, bool) {
	if o == nil || IsNil(o.PolicyViolated) {
		return nil, false
	}
	return o.PolicyViolated, true
}

// HasPolicyViolated returns a boolean if a field has been set.
func (o *PackageTag) HasPolicyViolated() bool {
	if o != nil && !IsNil(o.PolicyViolated) {
		return true
	}

	return false
}

// SetPolicyViolated gets a reference to the given bool and assigns it to the PolicyViolated field.
func (o *PackageTag) SetPolicyViolated(v bool) {
	o.PolicyViolated = &v
}

// GetRelease returns the Release field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetRelease() string {
	if o == nil || IsNil(o.Release.Get()) {
		var ret string
		return ret
	}
	return *o.Release.Get()
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetReleaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Release.Get(), o.Release.IsSet()
}

// HasRelease returns a boolean if a field has been set.
func (o *PackageTag) HasRelease() bool {
	if o != nil && o.Release.IsSet() {
		return true
	}

	return false
}

// SetRelease gets a reference to the given NullableString and assigns it to the Release field.
func (o *PackageTag) SetRelease(v string) {
	o.Release.Set(&v)
}

// SetReleaseNil sets the value for Release to be an explicit nil
func (o *PackageTag) SetReleaseNil() {
	o.Release.Set(nil)
}

// UnsetRelease ensures that no value is present for Release, not even an explicit nil
func (o *PackageTag) UnsetRelease() {
	o.Release.Unset()
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *PackageTag) GetRepository() string {
	if o == nil || IsNil(o.Repository) {
		var ret string
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *PackageTag) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given string and assigns it to the Repository field.
func (o *PackageTag) SetRepository(v string) {
	o.Repository = &v
}

// GetRepositoryUrl returns the RepositoryUrl field value if set, zero value otherwise.
func (o *PackageTag) GetRepositoryUrl() string {
	if o == nil || IsNil(o.RepositoryUrl) {
		var ret string
		return ret
	}
	return *o.RepositoryUrl
}

// GetRepositoryUrlOk returns a tuple with the RepositoryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetRepositoryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryUrl) {
		return nil, false
	}
	return o.RepositoryUrl, true
}

// HasRepositoryUrl returns a boolean if a field has been set.
func (o *PackageTag) HasRepositoryUrl() bool {
	if o != nil && !IsNil(o.RepositoryUrl) {
		return true
	}

	return false
}

// SetRepositoryUrl gets a reference to the given string and assigns it to the RepositoryUrl field.
func (o *PackageTag) SetRepositoryUrl(v string) {
	o.RepositoryUrl = &v
}

// GetSecurityScanCompletedAt returns the SecurityScanCompletedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetSecurityScanCompletedAt() time.Time {
	if o == nil || IsNil(o.SecurityScanCompletedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SecurityScanCompletedAt.Get()
}

// GetSecurityScanCompletedAtOk returns a tuple with the SecurityScanCompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetSecurityScanCompletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityScanCompletedAt.Get(), o.SecurityScanCompletedAt.IsSet()
}

// HasSecurityScanCompletedAt returns a boolean if a field has been set.
func (o *PackageTag) HasSecurityScanCompletedAt() bool {
	if o != nil && o.SecurityScanCompletedAt.IsSet() {
		return true
	}

	return false
}

// SetSecurityScanCompletedAt gets a reference to the given NullableTime and assigns it to the SecurityScanCompletedAt field.
func (o *PackageTag) SetSecurityScanCompletedAt(v time.Time) {
	o.SecurityScanCompletedAt.Set(&v)
}

// SetSecurityScanCompletedAtNil sets the value for SecurityScanCompletedAt to be an explicit nil
func (o *PackageTag) SetSecurityScanCompletedAtNil() {
	o.SecurityScanCompletedAt.Set(nil)
}

// UnsetSecurityScanCompletedAt ensures that no value is present for SecurityScanCompletedAt, not even an explicit nil
func (o *PackageTag) UnsetSecurityScanCompletedAt() {
	o.SecurityScanCompletedAt.Unset()
}

// GetSecurityScanStartedAt returns the SecurityScanStartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetSecurityScanStartedAt() time.Time {
	if o == nil || IsNil(o.SecurityScanStartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SecurityScanStartedAt.Get()
}

// GetSecurityScanStartedAtOk returns a tuple with the SecurityScanStartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetSecurityScanStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityScanStartedAt.Get(), o.SecurityScanStartedAt.IsSet()
}

// HasSecurityScanStartedAt returns a boolean if a field has been set.
func (o *PackageTag) HasSecurityScanStartedAt() bool {
	if o != nil && o.SecurityScanStartedAt.IsSet() {
		return true
	}

	return false
}

// SetSecurityScanStartedAt gets a reference to the given NullableTime and assigns it to the SecurityScanStartedAt field.
func (o *PackageTag) SetSecurityScanStartedAt(v time.Time) {
	o.SecurityScanStartedAt.Set(&v)
}

// SetSecurityScanStartedAtNil sets the value for SecurityScanStartedAt to be an explicit nil
func (o *PackageTag) SetSecurityScanStartedAtNil() {
	o.SecurityScanStartedAt.Set(nil)
}

// UnsetSecurityScanStartedAt ensures that no value is present for SecurityScanStartedAt, not even an explicit nil
func (o *PackageTag) UnsetSecurityScanStartedAt() {
	o.SecurityScanStartedAt.Unset()
}

// GetSecurityScanStatus returns the SecurityScanStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetSecurityScanStatus() string {
	if o == nil || IsNil(o.SecurityScanStatus.Get()) {
		var ret string
		return ret
	}
	return *o.SecurityScanStatus.Get()
}

// GetSecurityScanStatusOk returns a tuple with the SecurityScanStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetSecurityScanStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityScanStatus.Get(), o.SecurityScanStatus.IsSet()
}

// HasSecurityScanStatus returns a boolean if a field has been set.
func (o *PackageTag) HasSecurityScanStatus() bool {
	if o != nil && o.SecurityScanStatus.IsSet() {
		return true
	}

	return false
}

// SetSecurityScanStatus gets a reference to the given NullableString and assigns it to the SecurityScanStatus field.
func (o *PackageTag) SetSecurityScanStatus(v string) {
	o.SecurityScanStatus.Set(&v)
}

// SetSecurityScanStatusNil sets the value for SecurityScanStatus to be an explicit nil
func (o *PackageTag) SetSecurityScanStatusNil() {
	o.SecurityScanStatus.Set(nil)
}

// UnsetSecurityScanStatus ensures that no value is present for SecurityScanStatus, not even an explicit nil
func (o *PackageTag) UnsetSecurityScanStatus() {
	o.SecurityScanStatus.Unset()
}

// GetSecurityScanStatusUpdatedAt returns the SecurityScanStatusUpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetSecurityScanStatusUpdatedAt() time.Time {
	if o == nil || IsNil(o.SecurityScanStatusUpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SecurityScanStatusUpdatedAt.Get()
}

// GetSecurityScanStatusUpdatedAtOk returns a tuple with the SecurityScanStatusUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetSecurityScanStatusUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityScanStatusUpdatedAt.Get(), o.SecurityScanStatusUpdatedAt.IsSet()
}

// HasSecurityScanStatusUpdatedAt returns a boolean if a field has been set.
func (o *PackageTag) HasSecurityScanStatusUpdatedAt() bool {
	if o != nil && o.SecurityScanStatusUpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetSecurityScanStatusUpdatedAt gets a reference to the given NullableTime and assigns it to the SecurityScanStatusUpdatedAt field.
func (o *PackageTag) SetSecurityScanStatusUpdatedAt(v time.Time) {
	o.SecurityScanStatusUpdatedAt.Set(&v)
}

// SetSecurityScanStatusUpdatedAtNil sets the value for SecurityScanStatusUpdatedAt to be an explicit nil
func (o *PackageTag) SetSecurityScanStatusUpdatedAtNil() {
	o.SecurityScanStatusUpdatedAt.Set(nil)
}

// UnsetSecurityScanStatusUpdatedAt ensures that no value is present for SecurityScanStatusUpdatedAt, not even an explicit nil
func (o *PackageTag) UnsetSecurityScanStatusUpdatedAt() {
	o.SecurityScanStatusUpdatedAt.Unset()
}

// GetSelfHtmlUrl returns the SelfHtmlUrl field value if set, zero value otherwise.
func (o *PackageTag) GetSelfHtmlUrl() string {
	if o == nil || IsNil(o.SelfHtmlUrl) {
		var ret string
		return ret
	}
	return *o.SelfHtmlUrl
}

// GetSelfHtmlUrlOk returns a tuple with the SelfHtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetSelfHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SelfHtmlUrl) {
		return nil, false
	}
	return o.SelfHtmlUrl, true
}

// HasSelfHtmlUrl returns a boolean if a field has been set.
func (o *PackageTag) HasSelfHtmlUrl() bool {
	if o != nil && !IsNil(o.SelfHtmlUrl) {
		return true
	}

	return false
}

// SetSelfHtmlUrl gets a reference to the given string and assigns it to the SelfHtmlUrl field.
func (o *PackageTag) SetSelfHtmlUrl(v string) {
	o.SelfHtmlUrl = &v
}

// GetSelfUrl returns the SelfUrl field value if set, zero value otherwise.
func (o *PackageTag) GetSelfUrl() string {
	if o == nil || IsNil(o.SelfUrl) {
		var ret string
		return ret
	}
	return *o.SelfUrl
}

// GetSelfUrlOk returns a tuple with the SelfUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetSelfUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SelfUrl) {
		return nil, false
	}
	return o.SelfUrl, true
}

// HasSelfUrl returns a boolean if a field has been set.
func (o *PackageTag) HasSelfUrl() bool {
	if o != nil && !IsNil(o.SelfUrl) {
		return true
	}

	return false
}

// SetSelfUrl gets a reference to the given string and assigns it to the SelfUrl field.
func (o *PackageTag) SetSelfUrl(v string) {
	o.SelfUrl = &v
}

// GetSignatureUrl returns the SignatureUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetSignatureUrl() string {
	if o == nil || IsNil(o.SignatureUrl.Get()) {
		var ret string
		return ret
	}
	return *o.SignatureUrl.Get()
}

// GetSignatureUrlOk returns a tuple with the SignatureUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetSignatureUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignatureUrl.Get(), o.SignatureUrl.IsSet()
}

// HasSignatureUrl returns a boolean if a field has been set.
func (o *PackageTag) HasSignatureUrl() bool {
	if o != nil && o.SignatureUrl.IsSet() {
		return true
	}

	return false
}

// SetSignatureUrl gets a reference to the given NullableString and assigns it to the SignatureUrl field.
func (o *PackageTag) SetSignatureUrl(v string) {
	o.SignatureUrl.Set(&v)
}

// SetSignatureUrlNil sets the value for SignatureUrl to be an explicit nil
func (o *PackageTag) SetSignatureUrlNil() {
	o.SignatureUrl.Set(nil)
}

// UnsetSignatureUrl ensures that no value is present for SignatureUrl, not even an explicit nil
func (o *PackageTag) UnsetSignatureUrl() {
	o.SignatureUrl.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PackageTag) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PackageTag) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *PackageTag) SetSize(v int64) {
	o.Size = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *PackageTag) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *PackageTag) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *PackageTag) SetSlug(v string) {
	o.Slug = &v
}

// GetSlugPerm returns the SlugPerm field value if set, zero value otherwise.
func (o *PackageTag) GetSlugPerm() string {
	if o == nil || IsNil(o.SlugPerm) {
		var ret string
		return ret
	}
	return *o.SlugPerm
}

// GetSlugPermOk returns a tuple with the SlugPerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetSlugPermOk() (*string, bool) {
	if o == nil || IsNil(o.SlugPerm) {
		return nil, false
	}
	return o.SlugPerm, true
}

// HasSlugPerm returns a boolean if a field has been set.
func (o *PackageTag) HasSlugPerm() bool {
	if o != nil && !IsNil(o.SlugPerm) {
		return true
	}

	return false
}

// SetSlugPerm gets a reference to the given string and assigns it to the SlugPerm field.
func (o *PackageTag) SetSlugPerm(v string) {
	o.SlugPerm = &v
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *PackageTag) GetStage() int64 {
	if o == nil || IsNil(o.Stage) {
		var ret int64
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetStageOk() (*int64, bool) {
	if o == nil || IsNil(o.Stage) {
		return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *PackageTag) HasStage() bool {
	if o != nil && !IsNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given int64 and assigns it to the Stage field.
func (o *PackageTag) SetStage(v int64) {
	o.Stage = &v
}

// GetStageStr returns the StageStr field value if set, zero value otherwise.
func (o *PackageTag) GetStageStr() string {
	if o == nil || IsNil(o.StageStr) {
		var ret string
		return ret
	}
	return *o.StageStr
}

// GetStageStrOk returns a tuple with the StageStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetStageStrOk() (*string, bool) {
	if o == nil || IsNil(o.StageStr) {
		return nil, false
	}
	return o.StageStr, true
}

// HasStageStr returns a boolean if a field has been set.
func (o *PackageTag) HasStageStr() bool {
	if o != nil && !IsNil(o.StageStr) {
		return true
	}

	return false
}

// SetStageStr gets a reference to the given string and assigns it to the StageStr field.
func (o *PackageTag) SetStageStr(v string) {
	o.StageStr = &v
}

// GetStageUpdatedAt returns the StageUpdatedAt field value if set, zero value otherwise.
func (o *PackageTag) GetStageUpdatedAt() time.Time {
	if o == nil || IsNil(o.StageUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.StageUpdatedAt
}

// GetStageUpdatedAtOk returns a tuple with the StageUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetStageUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StageUpdatedAt) {
		return nil, false
	}
	return o.StageUpdatedAt, true
}

// HasStageUpdatedAt returns a boolean if a field has been set.
func (o *PackageTag) HasStageUpdatedAt() bool {
	if o != nil && !IsNil(o.StageUpdatedAt) {
		return true
	}

	return false
}

// SetStageUpdatedAt gets a reference to the given time.Time and assigns it to the StageUpdatedAt field.
func (o *PackageTag) SetStageUpdatedAt(v time.Time) {
	o.StageUpdatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PackageTag) GetStatus() int64 {
	if o == nil || IsNil(o.Status) {
		var ret int64
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetStatusOk() (*int64, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PackageTag) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int64 and assigns it to the Status field.
func (o *PackageTag) SetStatus(v int64) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetStatusReason() string {
	if o == nil || IsNil(o.StatusReason.Get()) {
		var ret string
		return ret
	}
	return *o.StatusReason.Get()
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetStatusReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusReason.Get(), o.StatusReason.IsSet()
}

// HasStatusReason returns a boolean if a field has been set.
func (o *PackageTag) HasStatusReason() bool {
	if o != nil && o.StatusReason.IsSet() {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given NullableString and assigns it to the StatusReason field.
func (o *PackageTag) SetStatusReason(v string) {
	o.StatusReason.Set(&v)
}

// SetStatusReasonNil sets the value for StatusReason to be an explicit nil
func (o *PackageTag) SetStatusReasonNil() {
	o.StatusReason.Set(nil)
}

// UnsetStatusReason ensures that no value is present for StatusReason, not even an explicit nil
func (o *PackageTag) UnsetStatusReason() {
	o.StatusReason.Unset()
}

// GetStatusStr returns the StatusStr field value if set, zero value otherwise.
func (o *PackageTag) GetStatusStr() string {
	if o == nil || IsNil(o.StatusStr) {
		var ret string
		return ret
	}
	return *o.StatusStr
}

// GetStatusStrOk returns a tuple with the StatusStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetStatusStrOk() (*string, bool) {
	if o == nil || IsNil(o.StatusStr) {
		return nil, false
	}
	return o.StatusStr, true
}

// HasStatusStr returns a boolean if a field has been set.
func (o *PackageTag) HasStatusStr() bool {
	if o != nil && !IsNil(o.StatusStr) {
		return true
	}

	return false
}

// SetStatusStr gets a reference to the given string and assigns it to the StatusStr field.
func (o *PackageTag) SetStatusStr(v string) {
	o.StatusStr = &v
}

// GetStatusUpdatedAt returns the StatusUpdatedAt field value if set, zero value otherwise.
func (o *PackageTag) GetStatusUpdatedAt() time.Time {
	if o == nil || IsNil(o.StatusUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.StatusUpdatedAt
}

// GetStatusUpdatedAtOk returns a tuple with the StatusUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetStatusUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StatusUpdatedAt) {
		return nil, false
	}
	return o.StatusUpdatedAt, true
}

// HasStatusUpdatedAt returns a boolean if a field has been set.
func (o *PackageTag) HasStatusUpdatedAt() bool {
	if o != nil && !IsNil(o.StatusUpdatedAt) {
		return true
	}

	return false
}

// SetStatusUpdatedAt gets a reference to the given time.Time and assigns it to the StatusUpdatedAt field.
func (o *PackageTag) SetStatusUpdatedAt(v time.Time) {
	o.StatusUpdatedAt = &v
}

// GetStatusUrl returns the StatusUrl field value if set, zero value otherwise.
func (o *PackageTag) GetStatusUrl() string {
	if o == nil || IsNil(o.StatusUrl) {
		var ret string
		return ret
	}
	return *o.StatusUrl
}

// GetStatusUrlOk returns a tuple with the StatusUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetStatusUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StatusUrl) {
		return nil, false
	}
	return o.StatusUrl, true
}

// HasStatusUrl returns a boolean if a field has been set.
func (o *PackageTag) HasStatusUrl() bool {
	if o != nil && !IsNil(o.StatusUrl) {
		return true
	}

	return false
}

// SetStatusUrl gets a reference to the given string and assigns it to the StatusUrl field.
func (o *PackageTag) SetStatusUrl(v string) {
	o.StatusUrl = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *PackageTag) GetSubtype() string {
	if o == nil || IsNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetSubtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Subtype) {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *PackageTag) HasSubtype() bool {
	if o != nil && !IsNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *PackageTag) SetSubtype(v string) {
	o.Subtype = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetSummary() string {
	if o == nil || IsNil(o.Summary.Get()) {
		var ret string
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *PackageTag) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableString and assigns it to the Summary field.
func (o *PackageTag) SetSummary(v string) {
	o.Summary.Set(&v)
}

// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *PackageTag) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *PackageTag) UnsetSummary() {
	o.Summary.Unset()
}

// GetSyncFinishedAt returns the SyncFinishedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetSyncFinishedAt() time.Time {
	if o == nil || IsNil(o.SyncFinishedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SyncFinishedAt.Get()
}

// GetSyncFinishedAtOk returns a tuple with the SyncFinishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetSyncFinishedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SyncFinishedAt.Get(), o.SyncFinishedAt.IsSet()
}

// HasSyncFinishedAt returns a boolean if a field has been set.
func (o *PackageTag) HasSyncFinishedAt() bool {
	if o != nil && o.SyncFinishedAt.IsSet() {
		return true
	}

	return false
}

// SetSyncFinishedAt gets a reference to the given NullableTime and assigns it to the SyncFinishedAt field.
func (o *PackageTag) SetSyncFinishedAt(v time.Time) {
	o.SyncFinishedAt.Set(&v)
}

// SetSyncFinishedAtNil sets the value for SyncFinishedAt to be an explicit nil
func (o *PackageTag) SetSyncFinishedAtNil() {
	o.SyncFinishedAt.Set(nil)
}

// UnsetSyncFinishedAt ensures that no value is present for SyncFinishedAt, not even an explicit nil
func (o *PackageTag) UnsetSyncFinishedAt() {
	o.SyncFinishedAt.Unset()
}

// GetSyncProgress returns the SyncProgress field value if set, zero value otherwise.
func (o *PackageTag) GetSyncProgress() int64 {
	if o == nil || IsNil(o.SyncProgress) {
		var ret int64
		return ret
	}
	return *o.SyncProgress
}

// GetSyncProgressOk returns a tuple with the SyncProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetSyncProgressOk() (*int64, bool) {
	if o == nil || IsNil(o.SyncProgress) {
		return nil, false
	}
	return o.SyncProgress, true
}

// HasSyncProgress returns a boolean if a field has been set.
func (o *PackageTag) HasSyncProgress() bool {
	if o != nil && !IsNil(o.SyncProgress) {
		return true
	}

	return false
}

// SetSyncProgress gets a reference to the given int64 and assigns it to the SyncProgress field.
func (o *PackageTag) SetSyncProgress(v int64) {
	o.SyncProgress = &v
}

// GetTagsImmutable returns the TagsImmutable field value if set, zero value otherwise.
func (o *PackageTag) GetTagsImmutable() map[string]interface{} {
	if o == nil || IsNil(o.TagsImmutable) {
		var ret map[string]interface{}
		return ret
	}
	return o.TagsImmutable
}

// GetTagsImmutableOk returns a tuple with the TagsImmutable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetTagsImmutableOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.TagsImmutable) {
		return map[string]interface{}{}, false
	}
	return o.TagsImmutable, true
}

// HasTagsImmutable returns a boolean if a field has been set.
func (o *PackageTag) HasTagsImmutable() bool {
	if o != nil && !IsNil(o.TagsImmutable) {
		return true
	}

	return false
}

// SetTagsImmutable gets a reference to the given map[string]interface{} and assigns it to the TagsImmutable field.
func (o *PackageTag) SetTagsImmutable(v map[string]interface{}) {
	o.TagsImmutable = v
}

// GetTypeDisplay returns the TypeDisplay field value if set, zero value otherwise.
func (o *PackageTag) GetTypeDisplay() string {
	if o == nil || IsNil(o.TypeDisplay) {
		var ret string
		return ret
	}
	return *o.TypeDisplay
}

// GetTypeDisplayOk returns a tuple with the TypeDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetTypeDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.TypeDisplay) {
		return nil, false
	}
	return o.TypeDisplay, true
}

// HasTypeDisplay returns a boolean if a field has been set.
func (o *PackageTag) HasTypeDisplay() bool {
	if o != nil && !IsNil(o.TypeDisplay) {
		return true
	}

	return false
}

// SetTypeDisplay gets a reference to the given string and assigns it to the TypeDisplay field.
func (o *PackageTag) SetTypeDisplay(v string) {
	o.TypeDisplay = &v
}

// GetUploadedAt returns the UploadedAt field value if set, zero value otherwise.
func (o *PackageTag) GetUploadedAt() time.Time {
	if o == nil || IsNil(o.UploadedAt) {
		var ret time.Time
		return ret
	}
	return *o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetUploadedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UploadedAt) {
		return nil, false
	}
	return o.UploadedAt, true
}

// HasUploadedAt returns a boolean if a field has been set.
func (o *PackageTag) HasUploadedAt() bool {
	if o != nil && !IsNil(o.UploadedAt) {
		return true
	}

	return false
}

// SetUploadedAt gets a reference to the given time.Time and assigns it to the UploadedAt field.
func (o *PackageTag) SetUploadedAt(v time.Time) {
	o.UploadedAt = &v
}

// GetUploader returns the Uploader field value if set, zero value otherwise.
func (o *PackageTag) GetUploader() string {
	if o == nil || IsNil(o.Uploader) {
		var ret string
		return ret
	}
	return *o.Uploader
}

// GetUploaderOk returns a tuple with the Uploader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetUploaderOk() (*string, bool) {
	if o == nil || IsNil(o.Uploader) {
		return nil, false
	}
	return o.Uploader, true
}

// HasUploader returns a boolean if a field has been set.
func (o *PackageTag) HasUploader() bool {
	if o != nil && !IsNil(o.Uploader) {
		return true
	}

	return false
}

// SetUploader gets a reference to the given string and assigns it to the Uploader field.
func (o *PackageTag) SetUploader(v string) {
	o.Uploader = &v
}

// GetUploaderUrl returns the UploaderUrl field value if set, zero value otherwise.
func (o *PackageTag) GetUploaderUrl() string {
	if o == nil || IsNil(o.UploaderUrl) {
		var ret string
		return ret
	}
	return *o.UploaderUrl
}

// GetUploaderUrlOk returns a tuple with the UploaderUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetUploaderUrlOk() (*string, bool) {
	if o == nil || IsNil(o.UploaderUrl) {
		return nil, false
	}
	return o.UploaderUrl, true
}

// HasUploaderUrl returns a boolean if a field has been set.
func (o *PackageTag) HasUploaderUrl() bool {
	if o != nil && !IsNil(o.UploaderUrl) {
		return true
	}

	return false
}

// SetUploaderUrl gets a reference to the given string and assigns it to the UploaderUrl field.
func (o *PackageTag) SetUploaderUrl(v string) {
	o.UploaderUrl = &v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PackageTag) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageTag) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *PackageTag) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *PackageTag) SetVersion(v string) {
	o.Version.Set(&v)
}

// SetVersionNil sets the value for Version to be an explicit nil
func (o *PackageTag) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *PackageTag) UnsetVersion() {
	o.Version.Unset()
}

// GetVersionOrig returns the VersionOrig field value if set, zero value otherwise.
func (o *PackageTag) GetVersionOrig() string {
	if o == nil || IsNil(o.VersionOrig) {
		var ret string
		return ret
	}
	return *o.VersionOrig
}

// GetVersionOrigOk returns a tuple with the VersionOrig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetVersionOrigOk() (*string, bool) {
	if o == nil || IsNil(o.VersionOrig) {
		return nil, false
	}
	return o.VersionOrig, true
}

// HasVersionOrig returns a boolean if a field has been set.
func (o *PackageTag) HasVersionOrig() bool {
	if o != nil && !IsNil(o.VersionOrig) {
		return true
	}

	return false
}

// SetVersionOrig gets a reference to the given string and assigns it to the VersionOrig field.
func (o *PackageTag) SetVersionOrig(v string) {
	o.VersionOrig = &v
}

// GetVulnerabilityScanResultsUrl returns the VulnerabilityScanResultsUrl field value if set, zero value otherwise.
func (o *PackageTag) GetVulnerabilityScanResultsUrl() string {
	if o == nil || IsNil(o.VulnerabilityScanResultsUrl) {
		var ret string
		return ret
	}
	return *o.VulnerabilityScanResultsUrl
}

// GetVulnerabilityScanResultsUrlOk returns a tuple with the VulnerabilityScanResultsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageTag) GetVulnerabilityScanResultsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.VulnerabilityScanResultsUrl) {
		return nil, false
	}
	return o.VulnerabilityScanResultsUrl, true
}

// HasVulnerabilityScanResultsUrl returns a boolean if a field has been set.
func (o *PackageTag) HasVulnerabilityScanResultsUrl() bool {
	if o != nil && !IsNil(o.VulnerabilityScanResultsUrl) {
		return true
	}

	return false
}

// SetVulnerabilityScanResultsUrl gets a reference to the given string and assigns it to the VulnerabilityScanResultsUrl field.
func (o *PackageTag) SetVulnerabilityScanResultsUrl(v string) {
	o.VulnerabilityScanResultsUrl = &v
}

func (o PackageTag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageTag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Architectures) {
		toSerialize["architectures"] = o.Architectures
	}
	if o.CdnUrl.IsSet() {
		toSerialize["cdn_url"] = o.CdnUrl.Get()
	}
	if !IsNil(o.ChecksumMd5) {
		toSerialize["checksum_md5"] = o.ChecksumMd5
	}
	if !IsNil(o.ChecksumSha1) {
		toSerialize["checksum_sha1"] = o.ChecksumSha1
	}
	if !IsNil(o.ChecksumSha256) {
		toSerialize["checksum_sha256"] = o.ChecksumSha256
	}
	if !IsNil(o.ChecksumSha512) {
		toSerialize["checksum_sha512"] = o.ChecksumSha512
	}
	if o.DependenciesChecksumMd5.IsSet() {
		toSerialize["dependencies_checksum_md5"] = o.DependenciesChecksumMd5.Get()
	}
	if !IsNil(o.DependenciesUrl) {
		toSerialize["dependencies_url"] = o.DependenciesUrl
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Distro.IsSet() {
		toSerialize["distro"] = o.Distro.Get()
	}
	if !IsNil(o.DistroVersion) {
		toSerialize["distro_version"] = o.DistroVersion
	}
	if !IsNil(o.Downloads) {
		toSerialize["downloads"] = o.Downloads
	}
	if o.Epoch.IsSet() {
		toSerialize["epoch"] = o.Epoch.Get()
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.FormatUrl) {
		toSerialize["format_url"] = o.FormatUrl
	}
	if !IsNil(o.FreeableStorage) {
		toSerialize["freeable_storage"] = o.FreeableStorage
	}
	if o.FullyQualifiedName.IsSet() {
		toSerialize["fully_qualified_name"] = o.FullyQualifiedName.Get()
	}
	if !IsNil(o.IdentifierPerm) {
		toSerialize["identifier_perm"] = o.IdentifierPerm
	}
	if !IsNil(o.Identifiers) {
		toSerialize["identifiers"] = o.Identifiers
	}
	if !IsNil(o.Indexed) {
		toSerialize["indexed"] = o.Indexed
	}
	if !IsNil(o.IsCancellable) {
		toSerialize["is_cancellable"] = o.IsCancellable
	}
	if !IsNil(o.IsCopyable) {
		toSerialize["is_copyable"] = o.IsCopyable
	}
	if !IsNil(o.IsDeleteable) {
		toSerialize["is_deleteable"] = o.IsDeleteable
	}
	if !IsNil(o.IsDownloadable) {
		toSerialize["is_downloadable"] = o.IsDownloadable
	}
	if !IsNil(o.IsImmutable) {
		toSerialize["is_immutable"] = o.IsImmutable
	}
	if !IsNil(o.IsMoveable) {
		toSerialize["is_moveable"] = o.IsMoveable
	}
	if !IsNil(o.IsQuarantinable) {
		toSerialize["is_quarantinable"] = o.IsQuarantinable
	}
	if !IsNil(o.IsQuarantined) {
		toSerialize["is_quarantined"] = o.IsQuarantined
	}
	if !IsNil(o.IsResyncable) {
		toSerialize["is_resyncable"] = o.IsResyncable
	}
	if !IsNil(o.IsSecurityScannable) {
		toSerialize["is_security_scannable"] = o.IsSecurityScannable
	}
	if !IsNil(o.IsSyncAwaiting) {
		toSerialize["is_sync_awaiting"] = o.IsSyncAwaiting
	}
	if !IsNil(o.IsSyncCompleted) {
		toSerialize["is_sync_completed"] = o.IsSyncCompleted
	}
	if !IsNil(o.IsSyncFailed) {
		toSerialize["is_sync_failed"] = o.IsSyncFailed
	}
	if !IsNil(o.IsSyncInFlight) {
		toSerialize["is_sync_in_flight"] = o.IsSyncInFlight
	}
	if !IsNil(o.IsSyncInProgress) {
		toSerialize["is_sync_in_progress"] = o.IsSyncInProgress
	}
	if o.License.IsSet() {
		toSerialize["license"] = o.License.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.NamespaceUrl) {
		toSerialize["namespace_url"] = o.NamespaceUrl
	}
	if !IsNil(o.NumFiles) {
		toSerialize["num_files"] = o.NumFiles
	}
	if !IsNil(o.OriginRepository) {
		toSerialize["origin_repository"] = o.OriginRepository
	}
	if !IsNil(o.OriginRepositoryUrl) {
		toSerialize["origin_repository_url"] = o.OriginRepositoryUrl
	}
	if !IsNil(o.PackageType) {
		toSerialize["package_type"] = o.PackageType
	}
	if !IsNil(o.PolicyViolated) {
		toSerialize["policy_violated"] = o.PolicyViolated
	}
	if o.Release.IsSet() {
		toSerialize["release"] = o.Release.Get()
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.RepositoryUrl) {
		toSerialize["repository_url"] = o.RepositoryUrl
	}
	if o.SecurityScanCompletedAt.IsSet() {
		toSerialize["security_scan_completed_at"] = o.SecurityScanCompletedAt.Get()
	}
	if o.SecurityScanStartedAt.IsSet() {
		toSerialize["security_scan_started_at"] = o.SecurityScanStartedAt.Get()
	}
	if o.SecurityScanStatus.IsSet() {
		toSerialize["security_scan_status"] = o.SecurityScanStatus.Get()
	}
	if o.SecurityScanStatusUpdatedAt.IsSet() {
		toSerialize["security_scan_status_updated_at"] = o.SecurityScanStatusUpdatedAt.Get()
	}
	if !IsNil(o.SelfHtmlUrl) {
		toSerialize["self_html_url"] = o.SelfHtmlUrl
	}
	if !IsNil(o.SelfUrl) {
		toSerialize["self_url"] = o.SelfUrl
	}
	if o.SignatureUrl.IsSet() {
		toSerialize["signature_url"] = o.SignatureUrl.Get()
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.SlugPerm) {
		toSerialize["slug_perm"] = o.SlugPerm
	}
	if !IsNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	if !IsNil(o.StageStr) {
		toSerialize["stage_str"] = o.StageStr
	}
	if !IsNil(o.StageUpdatedAt) {
		toSerialize["stage_updated_at"] = o.StageUpdatedAt
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.StatusReason.IsSet() {
		toSerialize["status_reason"] = o.StatusReason.Get()
	}
	if !IsNil(o.StatusStr) {
		toSerialize["status_str"] = o.StatusStr
	}
	if !IsNil(o.StatusUpdatedAt) {
		toSerialize["status_updated_at"] = o.StatusUpdatedAt
	}
	if !IsNil(o.StatusUrl) {
		toSerialize["status_url"] = o.StatusUrl
	}
	if !IsNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Summary.IsSet() {
		toSerialize["summary"] = o.Summary.Get()
	}
	if o.SyncFinishedAt.IsSet() {
		toSerialize["sync_finished_at"] = o.SyncFinishedAt.Get()
	}
	if !IsNil(o.SyncProgress) {
		toSerialize["sync_progress"] = o.SyncProgress
	}
	if !IsNil(o.TagsImmutable) {
		toSerialize["tags_immutable"] = o.TagsImmutable
	}
	if !IsNil(o.TypeDisplay) {
		toSerialize["type_display"] = o.TypeDisplay
	}
	if !IsNil(o.UploadedAt) {
		toSerialize["uploaded_at"] = o.UploadedAt
	}
	if !IsNil(o.Uploader) {
		toSerialize["uploader"] = o.Uploader
	}
	if !IsNil(o.UploaderUrl) {
		toSerialize["uploader_url"] = o.UploaderUrl
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if !IsNil(o.VersionOrig) {
		toSerialize["version_orig"] = o.VersionOrig
	}
	if !IsNil(o.VulnerabilityScanResultsUrl) {
		toSerialize["vulnerability_scan_results_url"] = o.VulnerabilityScanResultsUrl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PackageTag) UnmarshalJSON(data []byte) (err error) {
	varPackageTag := _PackageTag{}

	err = json.Unmarshal(data, &varPackageTag)

	if err != nil {
		return err
	}

	*o = PackageTag(varPackageTag)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "architectures")
		delete(additionalProperties, "cdn_url")
		delete(additionalProperties, "checksum_md5")
		delete(additionalProperties, "checksum_sha1")
		delete(additionalProperties, "checksum_sha256")
		delete(additionalProperties, "checksum_sha512")
		delete(additionalProperties, "dependencies_checksum_md5")
		delete(additionalProperties, "dependencies_url")
		delete(additionalProperties, "description")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "distro")
		delete(additionalProperties, "distro_version")
		delete(additionalProperties, "downloads")
		delete(additionalProperties, "epoch")
		delete(additionalProperties, "extension")
		delete(additionalProperties, "filename")
		delete(additionalProperties, "files")
		delete(additionalProperties, "format")
		delete(additionalProperties, "format_url")
		delete(additionalProperties, "freeable_storage")
		delete(additionalProperties, "fully_qualified_name")
		delete(additionalProperties, "identifier_perm")
		delete(additionalProperties, "identifiers")
		delete(additionalProperties, "indexed")
		delete(additionalProperties, "is_cancellable")
		delete(additionalProperties, "is_copyable")
		delete(additionalProperties, "is_deleteable")
		delete(additionalProperties, "is_downloadable")
		delete(additionalProperties, "is_immutable")
		delete(additionalProperties, "is_moveable")
		delete(additionalProperties, "is_quarantinable")
		delete(additionalProperties, "is_quarantined")
		delete(additionalProperties, "is_resyncable")
		delete(additionalProperties, "is_security_scannable")
		delete(additionalProperties, "is_sync_awaiting")
		delete(additionalProperties, "is_sync_completed")
		delete(additionalProperties, "is_sync_failed")
		delete(additionalProperties, "is_sync_in_flight")
		delete(additionalProperties, "is_sync_in_progress")
		delete(additionalProperties, "license")
		delete(additionalProperties, "name")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "namespace_url")
		delete(additionalProperties, "num_files")
		delete(additionalProperties, "origin_repository")
		delete(additionalProperties, "origin_repository_url")
		delete(additionalProperties, "package_type")
		delete(additionalProperties, "policy_violated")
		delete(additionalProperties, "release")
		delete(additionalProperties, "repository")
		delete(additionalProperties, "repository_url")
		delete(additionalProperties, "security_scan_completed_at")
		delete(additionalProperties, "security_scan_started_at")
		delete(additionalProperties, "security_scan_status")
		delete(additionalProperties, "security_scan_status_updated_at")
		delete(additionalProperties, "self_html_url")
		delete(additionalProperties, "self_url")
		delete(additionalProperties, "signature_url")
		delete(additionalProperties, "size")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "slug_perm")
		delete(additionalProperties, "stage")
		delete(additionalProperties, "stage_str")
		delete(additionalProperties, "stage_updated_at")
		delete(additionalProperties, "status")
		delete(additionalProperties, "status_reason")
		delete(additionalProperties, "status_str")
		delete(additionalProperties, "status_updated_at")
		delete(additionalProperties, "status_url")
		delete(additionalProperties, "subtype")
		delete(additionalProperties, "summary")
		delete(additionalProperties, "sync_finished_at")
		delete(additionalProperties, "sync_progress")
		delete(additionalProperties, "tags_immutable")
		delete(additionalProperties, "type_display")
		delete(additionalProperties, "uploaded_at")
		delete(additionalProperties, "uploader")
		delete(additionalProperties, "uploader_url")
		delete(additionalProperties, "version")
		delete(additionalProperties, "version_orig")
		delete(additionalProperties, "vulnerability_scan_results_url")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePackageTag struct {
	value *PackageTag
	isSet bool
}

func (v NullablePackageTag) Get() *PackageTag {
	return v.value
}

func (v *NullablePackageTag) Set(val *PackageTag) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageTag) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageTag(val *PackageTag) *NullablePackageTag {
	return &NullablePackageTag{value: val, isSet: true}
}

func (v NullablePackageTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
