/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.698.0
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
)

// checks if the OrganizationTeamMembers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationTeamMembers{}

// OrganizationTeamMembers struct for OrganizationTeamMembers
type OrganizationTeamMembers struct {
	// The team members
	Members              []OrganizationTeamMembership `json:"members"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationTeamMembers OrganizationTeamMembers

// NewOrganizationTeamMembers instantiates a new OrganizationTeamMembers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationTeamMembers(members []OrganizationTeamMembership) *OrganizationTeamMembers {
	this := OrganizationTeamMembers{}
	this.Members = members
	return &this
}

// NewOrganizationTeamMembersWithDefaults instantiates a new OrganizationTeamMembers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationTeamMembersWithDefaults() *OrganizationTeamMembers {
	this := OrganizationTeamMembers{}
	return &this
}

// GetMembers returns the Members field value
func (o *OrganizationTeamMembers) GetMembers() []OrganizationTeamMembership {
	if o == nil {
		var ret []OrganizationTeamMembership
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *OrganizationTeamMembers) GetMembersOk() ([]OrganizationTeamMembership, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *OrganizationTeamMembers) SetMembers(v []OrganizationTeamMembership) {
	o.Members = v
}

func (o OrganizationTeamMembers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationTeamMembers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["members"] = o.Members

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationTeamMembers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"members",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationTeamMembers := _OrganizationTeamMembers{}

	err = json.Unmarshal(data, &varOrganizationTeamMembers)

	if err != nil {
		return err
	}

	*o = OrganizationTeamMembers(varOrganizationTeamMembers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "members")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationTeamMembers struct {
	value *OrganizationTeamMembers
	isSet bool
}

func (v NullableOrganizationTeamMembers) Get() *OrganizationTeamMembers {
	return v.value
}

func (v *NullableOrganizationTeamMembers) Set(val *OrganizationTeamMembers) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationTeamMembers) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationTeamMembers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationTeamMembers(val *OrganizationTeamMembers) *NullableOrganizationTeamMembers {
	return &NullableOrganizationTeamMembers{value: val, isSet: true}
}

func (v NullableOrganizationTeamMembers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationTeamMembers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
