/*
Cloudsmith API

The API to the Cloudsmith Service

API version: 1.40.0
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// RepositoryWebhook struct for RepositoryWebhook
type RepositoryWebhook struct {
	//
	CreatedAt *string `json:"created_at,omitempty"`
	//
	CreatedBy *string `json:"created_by,omitempty"`
	//
	CreatedByUrl *string `json:"created_by_url,omitempty"`
	//
	DisableReason *string `json:"disable_reason,omitempty"`
	//
	DisableReasonStr *string `json:"disable_reason_str,omitempty"`
	//
	Events []string `json:"events"`
	//
	Identifier *int64 `json:"identifier,omitempty"`
	// If enabled, the webhook will trigger on events and send payloads to the configured target URL.
	IsActive *bool `json:"is_active,omitempty"`
	//
	IsLastResponseBad *bool `json:"is_last_response_bad,omitempty"`
	//
	LastResponseStatus *int64 `json:"last_response_status,omitempty"`
	//
	LastResponseStatusStr *string `json:"last_response_status_str,omitempty"`
	//
	NumSent *int64 `json:"num_sent,omitempty"`
	// The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.
	PackageQuery *string `json:"package_query,omitempty"`
	// The format of the payloads for webhook requests.
	RequestBodyFormat *string `json:"request_body_format,omitempty"`
	//
	RequestBodyFormatStr *string `json:"request_body_format_str,omitempty"`
	// The format of the payloads for webhook requests.
	RequestBodyTemplateFormat *string `json:"request_body_template_format,omitempty"`
	//
	RequestBodyTemplateFormatStr *string `json:"request_body_template_format_str,omitempty"`
	// The value that will be sent for the 'Content Type' header.
	RequestContentType *string `json:"request_content_type,omitempty"`
	// The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.
	SecretHeader *string `json:"secret_header,omitempty"`
	//
	SelfUrl *string `json:"self_url,omitempty"`
	//
	SlugPerm *string `json:"slug_perm,omitempty"`
	// The destination URL that webhook payloads will be POST'ed to.
	TargetUrl string `json:"target_url"`
	//
	Templates []WebhooksOwnerRepoTemplates `json:"templates"`
	//
	UpdatedAt *string `json:"updated_at,omitempty"`
	//
	UpdatedBy *string `json:"updated_by,omitempty"`
	//
	UpdatedByUrl *string `json:"updated_by_url,omitempty"`
	// If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.
	VerifySsl *bool `json:"verify_ssl,omitempty"`
}

// NewRepositoryWebhook instantiates a new RepositoryWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryWebhook(events []string, targetUrl string, templates []WebhooksOwnerRepoTemplates) *RepositoryWebhook {
	this := RepositoryWebhook{}
	this.Events = events
	this.TargetUrl = targetUrl
	this.Templates = templates
	return &this
}

// NewRepositoryWebhookWithDefaults instantiates a new RepositoryWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWebhookWithDefaults() *RepositoryWebhook {
	this := RepositoryWebhook{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RepositoryWebhook) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *RepositoryWebhook) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedByUrl returns the CreatedByUrl field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetCreatedByUrl() string {
	if o == nil || o.CreatedByUrl == nil {
		var ret string
		return ret
	}
	return *o.CreatedByUrl
}

// GetCreatedByUrlOk returns a tuple with the CreatedByUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetCreatedByUrlOk() (*string, bool) {
	if o == nil || o.CreatedByUrl == nil {
		return nil, false
	}
	return o.CreatedByUrl, true
}

// HasCreatedByUrl returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasCreatedByUrl() bool {
	if o != nil && o.CreatedByUrl != nil {
		return true
	}

	return false
}

// SetCreatedByUrl gets a reference to the given string and assigns it to the CreatedByUrl field.
func (o *RepositoryWebhook) SetCreatedByUrl(v string) {
	o.CreatedByUrl = &v
}

// GetDisableReason returns the DisableReason field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetDisableReason() string {
	if o == nil || o.DisableReason == nil {
		var ret string
		return ret
	}
	return *o.DisableReason
}

// GetDisableReasonOk returns a tuple with the DisableReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetDisableReasonOk() (*string, bool) {
	if o == nil || o.DisableReason == nil {
		return nil, false
	}
	return o.DisableReason, true
}

// HasDisableReason returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasDisableReason() bool {
	if o != nil && o.DisableReason != nil {
		return true
	}

	return false
}

// SetDisableReason gets a reference to the given string and assigns it to the DisableReason field.
func (o *RepositoryWebhook) SetDisableReason(v string) {
	o.DisableReason = &v
}

// GetDisableReasonStr returns the DisableReasonStr field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetDisableReasonStr() string {
	if o == nil || o.DisableReasonStr == nil {
		var ret string
		return ret
	}
	return *o.DisableReasonStr
}

// GetDisableReasonStrOk returns a tuple with the DisableReasonStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetDisableReasonStrOk() (*string, bool) {
	if o == nil || o.DisableReasonStr == nil {
		return nil, false
	}
	return o.DisableReasonStr, true
}

// HasDisableReasonStr returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasDisableReasonStr() bool {
	if o != nil && o.DisableReasonStr != nil {
		return true
	}

	return false
}

// SetDisableReasonStr gets a reference to the given string and assigns it to the DisableReasonStr field.
func (o *RepositoryWebhook) SetDisableReasonStr(v string) {
	o.DisableReasonStr = &v
}

// GetEvents returns the Events field value
func (o *RepositoryWebhook) GetEvents() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetEventsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *RepositoryWebhook) SetEvents(v []string) {
	o.Events = v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetIdentifier() int64 {
	if o == nil || o.Identifier == nil {
		var ret int64
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetIdentifierOk() (*int64, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given int64 and assigns it to the Identifier field.
func (o *RepositoryWebhook) SetIdentifier(v int64) {
	o.Identifier = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *RepositoryWebhook) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsLastResponseBad returns the IsLastResponseBad field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetIsLastResponseBad() bool {
	if o == nil || o.IsLastResponseBad == nil {
		var ret bool
		return ret
	}
	return *o.IsLastResponseBad
}

// GetIsLastResponseBadOk returns a tuple with the IsLastResponseBad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetIsLastResponseBadOk() (*bool, bool) {
	if o == nil || o.IsLastResponseBad == nil {
		return nil, false
	}
	return o.IsLastResponseBad, true
}

// HasIsLastResponseBad returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasIsLastResponseBad() bool {
	if o != nil && o.IsLastResponseBad != nil {
		return true
	}

	return false
}

// SetIsLastResponseBad gets a reference to the given bool and assigns it to the IsLastResponseBad field.
func (o *RepositoryWebhook) SetIsLastResponseBad(v bool) {
	o.IsLastResponseBad = &v
}

// GetLastResponseStatus returns the LastResponseStatus field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetLastResponseStatus() int64 {
	if o == nil || o.LastResponseStatus == nil {
		var ret int64
		return ret
	}
	return *o.LastResponseStatus
}

// GetLastResponseStatusOk returns a tuple with the LastResponseStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetLastResponseStatusOk() (*int64, bool) {
	if o == nil || o.LastResponseStatus == nil {
		return nil, false
	}
	return o.LastResponseStatus, true
}

// HasLastResponseStatus returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasLastResponseStatus() bool {
	if o != nil && o.LastResponseStatus != nil {
		return true
	}

	return false
}

// SetLastResponseStatus gets a reference to the given int64 and assigns it to the LastResponseStatus field.
func (o *RepositoryWebhook) SetLastResponseStatus(v int64) {
	o.LastResponseStatus = &v
}

// GetLastResponseStatusStr returns the LastResponseStatusStr field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetLastResponseStatusStr() string {
	if o == nil || o.LastResponseStatusStr == nil {
		var ret string
		return ret
	}
	return *o.LastResponseStatusStr
}

// GetLastResponseStatusStrOk returns a tuple with the LastResponseStatusStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetLastResponseStatusStrOk() (*string, bool) {
	if o == nil || o.LastResponseStatusStr == nil {
		return nil, false
	}
	return o.LastResponseStatusStr, true
}

// HasLastResponseStatusStr returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasLastResponseStatusStr() bool {
	if o != nil && o.LastResponseStatusStr != nil {
		return true
	}

	return false
}

// SetLastResponseStatusStr gets a reference to the given string and assigns it to the LastResponseStatusStr field.
func (o *RepositoryWebhook) SetLastResponseStatusStr(v string) {
	o.LastResponseStatusStr = &v
}

// GetNumSent returns the NumSent field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetNumSent() int64 {
	if o == nil || o.NumSent == nil {
		var ret int64
		return ret
	}
	return *o.NumSent
}

// GetNumSentOk returns a tuple with the NumSent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetNumSentOk() (*int64, bool) {
	if o == nil || o.NumSent == nil {
		return nil, false
	}
	return o.NumSent, true
}

// HasNumSent returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasNumSent() bool {
	if o != nil && o.NumSent != nil {
		return true
	}

	return false
}

// SetNumSent gets a reference to the given int64 and assigns it to the NumSent field.
func (o *RepositoryWebhook) SetNumSent(v int64) {
	o.NumSent = &v
}

// GetPackageQuery returns the PackageQuery field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetPackageQuery() string {
	if o == nil || o.PackageQuery == nil {
		var ret string
		return ret
	}
	return *o.PackageQuery
}

// GetPackageQueryOk returns a tuple with the PackageQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetPackageQueryOk() (*string, bool) {
	if o == nil || o.PackageQuery == nil {
		return nil, false
	}
	return o.PackageQuery, true
}

// HasPackageQuery returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasPackageQuery() bool {
	if o != nil && o.PackageQuery != nil {
		return true
	}

	return false
}

// SetPackageQuery gets a reference to the given string and assigns it to the PackageQuery field.
func (o *RepositoryWebhook) SetPackageQuery(v string) {
	o.PackageQuery = &v
}

// GetRequestBodyFormat returns the RequestBodyFormat field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetRequestBodyFormat() string {
	if o == nil || o.RequestBodyFormat == nil {
		var ret string
		return ret
	}
	return *o.RequestBodyFormat
}

// GetRequestBodyFormatOk returns a tuple with the RequestBodyFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetRequestBodyFormatOk() (*string, bool) {
	if o == nil || o.RequestBodyFormat == nil {
		return nil, false
	}
	return o.RequestBodyFormat, true
}

// HasRequestBodyFormat returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasRequestBodyFormat() bool {
	if o != nil && o.RequestBodyFormat != nil {
		return true
	}

	return false
}

// SetRequestBodyFormat gets a reference to the given string and assigns it to the RequestBodyFormat field.
func (o *RepositoryWebhook) SetRequestBodyFormat(v string) {
	o.RequestBodyFormat = &v
}

// GetRequestBodyFormatStr returns the RequestBodyFormatStr field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetRequestBodyFormatStr() string {
	if o == nil || o.RequestBodyFormatStr == nil {
		var ret string
		return ret
	}
	return *o.RequestBodyFormatStr
}

// GetRequestBodyFormatStrOk returns a tuple with the RequestBodyFormatStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetRequestBodyFormatStrOk() (*string, bool) {
	if o == nil || o.RequestBodyFormatStr == nil {
		return nil, false
	}
	return o.RequestBodyFormatStr, true
}

// HasRequestBodyFormatStr returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasRequestBodyFormatStr() bool {
	if o != nil && o.RequestBodyFormatStr != nil {
		return true
	}

	return false
}

// SetRequestBodyFormatStr gets a reference to the given string and assigns it to the RequestBodyFormatStr field.
func (o *RepositoryWebhook) SetRequestBodyFormatStr(v string) {
	o.RequestBodyFormatStr = &v
}

// GetRequestBodyTemplateFormat returns the RequestBodyTemplateFormat field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetRequestBodyTemplateFormat() string {
	if o == nil || o.RequestBodyTemplateFormat == nil {
		var ret string
		return ret
	}
	return *o.RequestBodyTemplateFormat
}

// GetRequestBodyTemplateFormatOk returns a tuple with the RequestBodyTemplateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetRequestBodyTemplateFormatOk() (*string, bool) {
	if o == nil || o.RequestBodyTemplateFormat == nil {
		return nil, false
	}
	return o.RequestBodyTemplateFormat, true
}

// HasRequestBodyTemplateFormat returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasRequestBodyTemplateFormat() bool {
	if o != nil && o.RequestBodyTemplateFormat != nil {
		return true
	}

	return false
}

// SetRequestBodyTemplateFormat gets a reference to the given string and assigns it to the RequestBodyTemplateFormat field.
func (o *RepositoryWebhook) SetRequestBodyTemplateFormat(v string) {
	o.RequestBodyTemplateFormat = &v
}

// GetRequestBodyTemplateFormatStr returns the RequestBodyTemplateFormatStr field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetRequestBodyTemplateFormatStr() string {
	if o == nil || o.RequestBodyTemplateFormatStr == nil {
		var ret string
		return ret
	}
	return *o.RequestBodyTemplateFormatStr
}

// GetRequestBodyTemplateFormatStrOk returns a tuple with the RequestBodyTemplateFormatStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetRequestBodyTemplateFormatStrOk() (*string, bool) {
	if o == nil || o.RequestBodyTemplateFormatStr == nil {
		return nil, false
	}
	return o.RequestBodyTemplateFormatStr, true
}

// HasRequestBodyTemplateFormatStr returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasRequestBodyTemplateFormatStr() bool {
	if o != nil && o.RequestBodyTemplateFormatStr != nil {
		return true
	}

	return false
}

// SetRequestBodyTemplateFormatStr gets a reference to the given string and assigns it to the RequestBodyTemplateFormatStr field.
func (o *RepositoryWebhook) SetRequestBodyTemplateFormatStr(v string) {
	o.RequestBodyTemplateFormatStr = &v
}

// GetRequestContentType returns the RequestContentType field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetRequestContentType() string {
	if o == nil || o.RequestContentType == nil {
		var ret string
		return ret
	}
	return *o.RequestContentType
}

// GetRequestContentTypeOk returns a tuple with the RequestContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetRequestContentTypeOk() (*string, bool) {
	if o == nil || o.RequestContentType == nil {
		return nil, false
	}
	return o.RequestContentType, true
}

// HasRequestContentType returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasRequestContentType() bool {
	if o != nil && o.RequestContentType != nil {
		return true
	}

	return false
}

// SetRequestContentType gets a reference to the given string and assigns it to the RequestContentType field.
func (o *RepositoryWebhook) SetRequestContentType(v string) {
	o.RequestContentType = &v
}

// GetSecretHeader returns the SecretHeader field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetSecretHeader() string {
	if o == nil || o.SecretHeader == nil {
		var ret string
		return ret
	}
	return *o.SecretHeader
}

// GetSecretHeaderOk returns a tuple with the SecretHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetSecretHeaderOk() (*string, bool) {
	if o == nil || o.SecretHeader == nil {
		return nil, false
	}
	return o.SecretHeader, true
}

// HasSecretHeader returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasSecretHeader() bool {
	if o != nil && o.SecretHeader != nil {
		return true
	}

	return false
}

// SetSecretHeader gets a reference to the given string and assigns it to the SecretHeader field.
func (o *RepositoryWebhook) SetSecretHeader(v string) {
	o.SecretHeader = &v
}

// GetSelfUrl returns the SelfUrl field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetSelfUrl() string {
	if o == nil || o.SelfUrl == nil {
		var ret string
		return ret
	}
	return *o.SelfUrl
}

// GetSelfUrlOk returns a tuple with the SelfUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetSelfUrlOk() (*string, bool) {
	if o == nil || o.SelfUrl == nil {
		return nil, false
	}
	return o.SelfUrl, true
}

// HasSelfUrl returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasSelfUrl() bool {
	if o != nil && o.SelfUrl != nil {
		return true
	}

	return false
}

// SetSelfUrl gets a reference to the given string and assigns it to the SelfUrl field.
func (o *RepositoryWebhook) SetSelfUrl(v string) {
	o.SelfUrl = &v
}

// GetSlugPerm returns the SlugPerm field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetSlugPerm() string {
	if o == nil || o.SlugPerm == nil {
		var ret string
		return ret
	}
	return *o.SlugPerm
}

// GetSlugPermOk returns a tuple with the SlugPerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetSlugPermOk() (*string, bool) {
	if o == nil || o.SlugPerm == nil {
		return nil, false
	}
	return o.SlugPerm, true
}

// HasSlugPerm returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasSlugPerm() bool {
	if o != nil && o.SlugPerm != nil {
		return true
	}

	return false
}

// SetSlugPerm gets a reference to the given string and assigns it to the SlugPerm field.
func (o *RepositoryWebhook) SetSlugPerm(v string) {
	o.SlugPerm = &v
}

// GetTargetUrl returns the TargetUrl field value
func (o *RepositoryWebhook) GetTargetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetUrl
}

// GetTargetUrlOk returns a tuple with the TargetUrl field value
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetTargetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetUrl, true
}

// SetTargetUrl sets field value
func (o *RepositoryWebhook) SetTargetUrl(v string) {
	o.TargetUrl = v
}

// GetTemplates returns the Templates field value
func (o *RepositoryWebhook) GetTemplates() []WebhooksOwnerRepoTemplates {
	if o == nil {
		var ret []WebhooksOwnerRepoTemplates
		return ret
	}

	return o.Templates
}

// GetTemplatesOk returns a tuple with the Templates field value
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetTemplatesOk() ([]WebhooksOwnerRepoTemplates, bool) {
	if o == nil {
		return nil, false
	}
	return o.Templates, true
}

// SetTemplates sets field value
func (o *RepositoryWebhook) SetTemplates(v []WebhooksOwnerRepoTemplates) {
	o.Templates = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RepositoryWebhook) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetUpdatedByOk() (*string, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *RepositoryWebhook) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetUpdatedByUrl returns the UpdatedByUrl field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetUpdatedByUrl() string {
	if o == nil || o.UpdatedByUrl == nil {
		var ret string
		return ret
	}
	return *o.UpdatedByUrl
}

// GetUpdatedByUrlOk returns a tuple with the UpdatedByUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetUpdatedByUrlOk() (*string, bool) {
	if o == nil || o.UpdatedByUrl == nil {
		return nil, false
	}
	return o.UpdatedByUrl, true
}

// HasUpdatedByUrl returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasUpdatedByUrl() bool {
	if o != nil && o.UpdatedByUrl != nil {
		return true
	}

	return false
}

// SetUpdatedByUrl gets a reference to the given string and assigns it to the UpdatedByUrl field.
func (o *RepositoryWebhook) SetUpdatedByUrl(v string) {
	o.UpdatedByUrl = &v
}

// GetVerifySsl returns the VerifySsl field value if set, zero value otherwise.
func (o *RepositoryWebhook) GetVerifySsl() bool {
	if o == nil || o.VerifySsl == nil {
		var ret bool
		return ret
	}
	return *o.VerifySsl
}

// GetVerifySslOk returns a tuple with the VerifySsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryWebhook) GetVerifySslOk() (*bool, bool) {
	if o == nil || o.VerifySsl == nil {
		return nil, false
	}
	return o.VerifySsl, true
}

// HasVerifySsl returns a boolean if a field has been set.
func (o *RepositoryWebhook) HasVerifySsl() bool {
	if o != nil && o.VerifySsl != nil {
		return true
	}

	return false
}

// SetVerifySsl gets a reference to the given bool and assigns it to the VerifySsl field.
func (o *RepositoryWebhook) SetVerifySsl(v bool) {
	o.VerifySsl = &v
}

func (o RepositoryWebhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if o.CreatedByUrl != nil {
		toSerialize["created_by_url"] = o.CreatedByUrl
	}
	if o.DisableReason != nil {
		toSerialize["disable_reason"] = o.DisableReason
	}
	if o.DisableReasonStr != nil {
		toSerialize["disable_reason_str"] = o.DisableReasonStr
	}
	if true {
		toSerialize["events"] = o.Events
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.IsLastResponseBad != nil {
		toSerialize["is_last_response_bad"] = o.IsLastResponseBad
	}
	if o.LastResponseStatus != nil {
		toSerialize["last_response_status"] = o.LastResponseStatus
	}
	if o.LastResponseStatusStr != nil {
		toSerialize["last_response_status_str"] = o.LastResponseStatusStr
	}
	if o.NumSent != nil {
		toSerialize["num_sent"] = o.NumSent
	}
	if o.PackageQuery != nil {
		toSerialize["package_query"] = o.PackageQuery
	}
	if o.RequestBodyFormat != nil {
		toSerialize["request_body_format"] = o.RequestBodyFormat
	}
	if o.RequestBodyFormatStr != nil {
		toSerialize["request_body_format_str"] = o.RequestBodyFormatStr
	}
	if o.RequestBodyTemplateFormat != nil {
		toSerialize["request_body_template_format"] = o.RequestBodyTemplateFormat
	}
	if o.RequestBodyTemplateFormatStr != nil {
		toSerialize["request_body_template_format_str"] = o.RequestBodyTemplateFormatStr
	}
	if o.RequestContentType != nil {
		toSerialize["request_content_type"] = o.RequestContentType
	}
	if o.SecretHeader != nil {
		toSerialize["secret_header"] = o.SecretHeader
	}
	if o.SelfUrl != nil {
		toSerialize["self_url"] = o.SelfUrl
	}
	if o.SlugPerm != nil {
		toSerialize["slug_perm"] = o.SlugPerm
	}
	if true {
		toSerialize["target_url"] = o.TargetUrl
	}
	if true {
		toSerialize["templates"] = o.Templates
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if o.UpdatedByUrl != nil {
		toSerialize["updated_by_url"] = o.UpdatedByUrl
	}
	if o.VerifySsl != nil {
		toSerialize["verify_ssl"] = o.VerifySsl
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryWebhook struct {
	value *RepositoryWebhook
	isSet bool
}

func (v NullableRepositoryWebhook) Get() *RepositoryWebhook {
	return v.value
}

func (v *NullableRepositoryWebhook) Set(val *RepositoryWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryWebhook(val *RepositoryWebhook) *NullableRepositoryWebhook {
	return &NullableRepositoryWebhook{value: val, isSet: true}
}

func (v NullableRepositoryWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
