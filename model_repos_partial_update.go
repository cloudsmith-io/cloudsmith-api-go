/*
Cloudsmith API

The API to the Cloudsmith Service

API version: 1.40.0
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// ReposPartialUpdate struct for ReposPartialUpdate
type ReposPartialUpdate struct {
	// A description of the repository's purpose/contents.
	Description *string `json:"description,omitempty"`
	// If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.
	IndexFiles *bool `json:"index_files,omitempty"`
	// A descriptive name for the repository.
	Name *string `json:"name,omitempty"`
	// The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Public repositories are free to use on all plans and visible to all Cloudsmith users.
	RepositoryTypeStr *string `json:"repository_type_str,omitempty"`
	// The slug identifies the repository in URIs.
	Slug *string `json:"slug,omitempty"`
}

// NewReposPartialUpdate instantiates a new ReposPartialUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReposPartialUpdate() *ReposPartialUpdate {
	this := ReposPartialUpdate{}
	return &this
}

// NewReposPartialUpdateWithDefaults instantiates a new ReposPartialUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReposPartialUpdateWithDefaults() *ReposPartialUpdate {
	this := ReposPartialUpdate{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ReposPartialUpdate) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposPartialUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ReposPartialUpdate) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ReposPartialUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetIndexFiles returns the IndexFiles field value if set, zero value otherwise.
func (o *ReposPartialUpdate) GetIndexFiles() bool {
	if o == nil || o.IndexFiles == nil {
		var ret bool
		return ret
	}
	return *o.IndexFiles
}

// GetIndexFilesOk returns a tuple with the IndexFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposPartialUpdate) GetIndexFilesOk() (*bool, bool) {
	if o == nil || o.IndexFiles == nil {
		return nil, false
	}
	return o.IndexFiles, true
}

// HasIndexFiles returns a boolean if a field has been set.
func (o *ReposPartialUpdate) HasIndexFiles() bool {
	if o != nil && o.IndexFiles != nil {
		return true
	}

	return false
}

// SetIndexFiles gets a reference to the given bool and assigns it to the IndexFiles field.
func (o *ReposPartialUpdate) SetIndexFiles(v bool) {
	o.IndexFiles = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReposPartialUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposPartialUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReposPartialUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReposPartialUpdate) SetName(v string) {
	o.Name = &v
}

// GetRepositoryTypeStr returns the RepositoryTypeStr field value if set, zero value otherwise.
func (o *ReposPartialUpdate) GetRepositoryTypeStr() string {
	if o == nil || o.RepositoryTypeStr == nil {
		var ret string
		return ret
	}
	return *o.RepositoryTypeStr
}

// GetRepositoryTypeStrOk returns a tuple with the RepositoryTypeStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposPartialUpdate) GetRepositoryTypeStrOk() (*string, bool) {
	if o == nil || o.RepositoryTypeStr == nil {
		return nil, false
	}
	return o.RepositoryTypeStr, true
}

// HasRepositoryTypeStr returns a boolean if a field has been set.
func (o *ReposPartialUpdate) HasRepositoryTypeStr() bool {
	if o != nil && o.RepositoryTypeStr != nil {
		return true
	}

	return false
}

// SetRepositoryTypeStr gets a reference to the given string and assigns it to the RepositoryTypeStr field.
func (o *ReposPartialUpdate) SetRepositoryTypeStr(v string) {
	o.RepositoryTypeStr = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *ReposPartialUpdate) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReposPartialUpdate) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *ReposPartialUpdate) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *ReposPartialUpdate) SetSlug(v string) {
	o.Slug = &v
}

func (o ReposPartialUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.IndexFiles != nil {
		toSerialize["index_files"] = o.IndexFiles
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.RepositoryTypeStr != nil {
		toSerialize["repository_type_str"] = o.RepositoryTypeStr
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	return json.Marshal(toSerialize)
}

type NullableReposPartialUpdate struct {
	value *ReposPartialUpdate
	isSet bool
}

func (v NullableReposPartialUpdate) Get() *ReposPartialUpdate {
	return v.value
}

func (v *NullableReposPartialUpdate) Set(val *ReposPartialUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableReposPartialUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableReposPartialUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReposPartialUpdate(val *ReposPartialUpdate) *NullableReposPartialUpdate {
	return &NullableReposPartialUpdate{value: val, isSet: true}
}

func (v NullableReposPartialUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReposPartialUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
