/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.182.1
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// VulnerabilityScanVersion struct for VulnerabilityScanVersion
type VulnerabilityScanVersion struct {
	Major      int64   `json:"major"`
	Minor      int64   `json:"minor"`
	Operator   *string `json:"operator,omitempty"`
	Patch      int64   `json:"patch"`
	RawVersion *string `json:"raw_version,omitempty"`
	Version    *string `json:"version,omitempty"`
}

// NewVulnerabilityScanVersion instantiates a new VulnerabilityScanVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityScanVersion(major int64, minor int64, patch int64) *VulnerabilityScanVersion {
	this := VulnerabilityScanVersion{}
	this.Major = major
	this.Minor = minor
	var operator string = ""
	this.Operator = &operator
	this.Patch = patch
	var rawVersion string = ""
	this.RawVersion = &rawVersion
	var version string = ""
	this.Version = &version
	return &this
}

// NewVulnerabilityScanVersionWithDefaults instantiates a new VulnerabilityScanVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityScanVersionWithDefaults() *VulnerabilityScanVersion {
	this := VulnerabilityScanVersion{}
	var operator string = ""
	this.Operator = &operator
	var rawVersion string = ""
	this.RawVersion = &rawVersion
	var version string = ""
	this.Version = &version
	return &this
}

// GetMajor returns the Major field value
func (o *VulnerabilityScanVersion) GetMajor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Major
}

// GetMajorOk returns a tuple with the Major field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityScanVersion) GetMajorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Major, true
}

// SetMajor sets field value
func (o *VulnerabilityScanVersion) SetMajor(v int64) {
	o.Major = v
}

// GetMinor returns the Minor field value
func (o *VulnerabilityScanVersion) GetMinor() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Minor
}

// GetMinorOk returns a tuple with the Minor field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityScanVersion) GetMinorOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minor, true
}

// SetMinor sets field value
func (o *VulnerabilityScanVersion) SetMinor(v int64) {
	o.Minor = v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *VulnerabilityScanVersion) GetOperator() string {
	if o == nil || isNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityScanVersion) GetOperatorOk() (*string, bool) {
	if o == nil || isNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *VulnerabilityScanVersion) HasOperator() bool {
	if o != nil && !isNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *VulnerabilityScanVersion) SetOperator(v string) {
	o.Operator = &v
}

// GetPatch returns the Patch field value
func (o *VulnerabilityScanVersion) GetPatch() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Patch
}

// GetPatchOk returns a tuple with the Patch field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityScanVersion) GetPatchOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Patch, true
}

// SetPatch sets field value
func (o *VulnerabilityScanVersion) SetPatch(v int64) {
	o.Patch = v
}

// GetRawVersion returns the RawVersion field value if set, zero value otherwise.
func (o *VulnerabilityScanVersion) GetRawVersion() string {
	if o == nil || isNil(o.RawVersion) {
		var ret string
		return ret
	}
	return *o.RawVersion
}

// GetRawVersionOk returns a tuple with the RawVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityScanVersion) GetRawVersionOk() (*string, bool) {
	if o == nil || isNil(o.RawVersion) {
		return nil, false
	}
	return o.RawVersion, true
}

// HasRawVersion returns a boolean if a field has been set.
func (o *VulnerabilityScanVersion) HasRawVersion() bool {
	if o != nil && !isNil(o.RawVersion) {
		return true
	}

	return false
}

// SetRawVersion gets a reference to the given string and assigns it to the RawVersion field.
func (o *VulnerabilityScanVersion) SetRawVersion(v string) {
	o.RawVersion = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VulnerabilityScanVersion) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityScanVersion) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VulnerabilityScanVersion) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VulnerabilityScanVersion) SetVersion(v string) {
	o.Version = &v
}

func (o VulnerabilityScanVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["major"] = o.Major
	}
	if true {
		toSerialize["minor"] = o.Minor
	}
	if !isNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["patch"] = o.Patch
	}
	if !isNil(o.RawVersion) {
		toSerialize["raw_version"] = o.RawVersion
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableVulnerabilityScanVersion struct {
	value *VulnerabilityScanVersion
	isSet bool
}

func (v NullableVulnerabilityScanVersion) Get() *VulnerabilityScanVersion {
	return v.value
}

func (v *NullableVulnerabilityScanVersion) Set(val *VulnerabilityScanVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityScanVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityScanVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityScanVersion(val *VulnerabilityScanVersion) *NullableVulnerabilityScanVersion {
	return &NullableVulnerabilityScanVersion{value: val, isSet: true}
}

func (v NullableVulnerabilityScanVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityScanVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
