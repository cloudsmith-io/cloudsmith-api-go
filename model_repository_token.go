/*
Cloudsmith API

The API to the Cloudsmith Service

API version: 1.121.3
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// RepositoryToken struct for RepositoryToken
type RepositoryToken struct {
	//
	Clients *int64 `json:"clients,omitempty"`
	// The datetime the token was updated at.
	CreatedAt *string `json:"created_at,omitempty"`
	//
	CreatedBy *string `json:"created_by,omitempty"`
	//
	CreatedByUrl *string `json:"created_by_url,omitempty"`
	// If selected this is the default token for this repository.
	Default *bool `json:"default,omitempty"`
	//
	DisableUrl *string `json:"disable_url,omitempty"`
	//
	Downloads *int64 `json:"downloads,omitempty"`
	//
	EnableUrl *string `json:"enable_url,omitempty"`
	//
	EulaAccepted map[string]interface{} `json:"eula_accepted,omitempty"`
	// The datetime the EULA was accepted at.
	EulaAcceptedAt *string `json:"eula_accepted_at,omitempty"`
	//
	EulaAcceptedFrom *string `json:"eula_accepted_from,omitempty"`
	// If checked, a EULA acceptance is required for this token.
	EulaRequired *bool `json:"eula_required,omitempty"`
	//
	HasLimits *bool `json:"has_limits,omitempty"`
	//
	Identifier *int64 `json:"identifier,omitempty"`
	// If enabled, the token will allow downloads based on configured restrictions (if any).
	IsActive *bool `json:"is_active,omitempty"`
	//
	IsLimited *bool `json:"is_limited,omitempty"`
	// The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.
	LimitBandwidth *int64 `json:"limit_bandwidth,omitempty"`
	//
	LimitBandwidthUnit *string `json:"limit_bandwidth_unit,omitempty"`
	// The starting date/time the token is allowed to be used from.
	LimitDateRangeFrom *string `json:"limit_date_range_from,omitempty"`
	// The ending date/time the token is allowed to be used until.
	LimitDateRangeTo *string `json:"limit_date_range_to,omitempty"`
	// The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.
	LimitNumClients *int64 `json:"limit_num_clients,omitempty"`
	// The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.
	LimitNumDownloads *int64 `json:"limit_num_downloads,omitempty"`
	// The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.
	LimitPackageQuery *string `json:"limit_package_query,omitempty"`
	// The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.
	LimitPathQuery *string `json:"limit_path_query,omitempty"`
	//
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	//
	Name string `json:"name"`
	//
	RefreshUrl *string `json:"refresh_url,omitempty"`
	//
	ResetUrl *string `json:"reset_url,omitempty"`
	// The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.
	ScheduledResetAt *string `json:"scheduled_reset_at,omitempty"`
	//
	ScheduledResetPeriod *string `json:"scheduled_reset_period,omitempty"`
	//
	SelfUrl *string `json:"self_url,omitempty"`
	//
	SlugPerm *string `json:"slug_perm,omitempty"`
	//
	Token *string `json:"token,omitempty"`
	// The datetime the token was updated at.
	UpdatedAt *string `json:"updated_at,omitempty"`
	//
	UpdatedBy *string `json:"updated_by,omitempty"`
	//
	UpdatedByUrl *string `json:"updated_by_url,omitempty"`
	//
	Usage *string `json:"usage,omitempty"`
	//
	User *string `json:"user,omitempty"`
	//
	UserUrl *string `json:"user_url,omitempty"`
}

// NewRepositoryToken instantiates a new RepositoryToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryToken(name string) *RepositoryToken {
	this := RepositoryToken{}
	this.Name = name
	return &this
}

// NewRepositoryTokenWithDefaults instantiates a new RepositoryToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryTokenWithDefaults() *RepositoryToken {
	this := RepositoryToken{}
	return &this
}

// GetClients returns the Clients field value if set, zero value otherwise.
func (o *RepositoryToken) GetClients() int64 {
	if o == nil || o.Clients == nil {
		var ret int64
		return ret
	}
	return *o.Clients
}

// GetClientsOk returns a tuple with the Clients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetClientsOk() (*int64, bool) {
	if o == nil || o.Clients == nil {
		return nil, false
	}
	return o.Clients, true
}

// HasClients returns a boolean if a field has been set.
func (o *RepositoryToken) HasClients() bool {
	if o != nil && o.Clients != nil {
		return true
	}

	return false
}

// SetClients gets a reference to the given int64 and assigns it to the Clients field.
func (o *RepositoryToken) SetClients(v int64) {
	o.Clients = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RepositoryToken) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RepositoryToken) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RepositoryToken) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *RepositoryToken) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *RepositoryToken) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *RepositoryToken) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedByUrl returns the CreatedByUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetCreatedByUrl() string {
	if o == nil || o.CreatedByUrl == nil {
		var ret string
		return ret
	}
	return *o.CreatedByUrl
}

// GetCreatedByUrlOk returns a tuple with the CreatedByUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetCreatedByUrlOk() (*string, bool) {
	if o == nil || o.CreatedByUrl == nil {
		return nil, false
	}
	return o.CreatedByUrl, true
}

// HasCreatedByUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasCreatedByUrl() bool {
	if o != nil && o.CreatedByUrl != nil {
		return true
	}

	return false
}

// SetCreatedByUrl gets a reference to the given string and assigns it to the CreatedByUrl field.
func (o *RepositoryToken) SetCreatedByUrl(v string) {
	o.CreatedByUrl = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *RepositoryToken) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *RepositoryToken) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *RepositoryToken) SetDefault(v bool) {
	o.Default = &v
}

// GetDisableUrl returns the DisableUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetDisableUrl() string {
	if o == nil || o.DisableUrl == nil {
		var ret string
		return ret
	}
	return *o.DisableUrl
}

// GetDisableUrlOk returns a tuple with the DisableUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetDisableUrlOk() (*string, bool) {
	if o == nil || o.DisableUrl == nil {
		return nil, false
	}
	return o.DisableUrl, true
}

// HasDisableUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasDisableUrl() bool {
	if o != nil && o.DisableUrl != nil {
		return true
	}

	return false
}

// SetDisableUrl gets a reference to the given string and assigns it to the DisableUrl field.
func (o *RepositoryToken) SetDisableUrl(v string) {
	o.DisableUrl = &v
}

// GetDownloads returns the Downloads field value if set, zero value otherwise.
func (o *RepositoryToken) GetDownloads() int64 {
	if o == nil || o.Downloads == nil {
		var ret int64
		return ret
	}
	return *o.Downloads
}

// GetDownloadsOk returns a tuple with the Downloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetDownloadsOk() (*int64, bool) {
	if o == nil || o.Downloads == nil {
		return nil, false
	}
	return o.Downloads, true
}

// HasDownloads returns a boolean if a field has been set.
func (o *RepositoryToken) HasDownloads() bool {
	if o != nil && o.Downloads != nil {
		return true
	}

	return false
}

// SetDownloads gets a reference to the given int64 and assigns it to the Downloads field.
func (o *RepositoryToken) SetDownloads(v int64) {
	o.Downloads = &v
}

// GetEnableUrl returns the EnableUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetEnableUrl() string {
	if o == nil || o.EnableUrl == nil {
		var ret string
		return ret
	}
	return *o.EnableUrl
}

// GetEnableUrlOk returns a tuple with the EnableUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetEnableUrlOk() (*string, bool) {
	if o == nil || o.EnableUrl == nil {
		return nil, false
	}
	return o.EnableUrl, true
}

// HasEnableUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasEnableUrl() bool {
	if o != nil && o.EnableUrl != nil {
		return true
	}

	return false
}

// SetEnableUrl gets a reference to the given string and assigns it to the EnableUrl field.
func (o *RepositoryToken) SetEnableUrl(v string) {
	o.EnableUrl = &v
}

// GetEulaAccepted returns the EulaAccepted field value if set, zero value otherwise.
func (o *RepositoryToken) GetEulaAccepted() map[string]interface{} {
	if o == nil || o.EulaAccepted == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.EulaAccepted
}

// GetEulaAcceptedOk returns a tuple with the EulaAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetEulaAcceptedOk() (map[string]interface{}, bool) {
	if o == nil || o.EulaAccepted == nil {
		return nil, false
	}
	return o.EulaAccepted, true
}

// HasEulaAccepted returns a boolean if a field has been set.
func (o *RepositoryToken) HasEulaAccepted() bool {
	if o != nil && o.EulaAccepted != nil {
		return true
	}

	return false
}

// SetEulaAccepted gets a reference to the given map[string]interface{} and assigns it to the EulaAccepted field.
func (o *RepositoryToken) SetEulaAccepted(v map[string]interface{}) {
	o.EulaAccepted = v
}

// GetEulaAcceptedAt returns the EulaAcceptedAt field value if set, zero value otherwise.
func (o *RepositoryToken) GetEulaAcceptedAt() string {
	if o == nil || o.EulaAcceptedAt == nil {
		var ret string
		return ret
	}
	return *o.EulaAcceptedAt
}

// GetEulaAcceptedAtOk returns a tuple with the EulaAcceptedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetEulaAcceptedAtOk() (*string, bool) {
	if o == nil || o.EulaAcceptedAt == nil {
		return nil, false
	}
	return o.EulaAcceptedAt, true
}

// HasEulaAcceptedAt returns a boolean if a field has been set.
func (o *RepositoryToken) HasEulaAcceptedAt() bool {
	if o != nil && o.EulaAcceptedAt != nil {
		return true
	}

	return false
}

// SetEulaAcceptedAt gets a reference to the given string and assigns it to the EulaAcceptedAt field.
func (o *RepositoryToken) SetEulaAcceptedAt(v string) {
	o.EulaAcceptedAt = &v
}

// GetEulaAcceptedFrom returns the EulaAcceptedFrom field value if set, zero value otherwise.
func (o *RepositoryToken) GetEulaAcceptedFrom() string {
	if o == nil || o.EulaAcceptedFrom == nil {
		var ret string
		return ret
	}
	return *o.EulaAcceptedFrom
}

// GetEulaAcceptedFromOk returns a tuple with the EulaAcceptedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetEulaAcceptedFromOk() (*string, bool) {
	if o == nil || o.EulaAcceptedFrom == nil {
		return nil, false
	}
	return o.EulaAcceptedFrom, true
}

// HasEulaAcceptedFrom returns a boolean if a field has been set.
func (o *RepositoryToken) HasEulaAcceptedFrom() bool {
	if o != nil && o.EulaAcceptedFrom != nil {
		return true
	}

	return false
}

// SetEulaAcceptedFrom gets a reference to the given string and assigns it to the EulaAcceptedFrom field.
func (o *RepositoryToken) SetEulaAcceptedFrom(v string) {
	o.EulaAcceptedFrom = &v
}

// GetEulaRequired returns the EulaRequired field value if set, zero value otherwise.
func (o *RepositoryToken) GetEulaRequired() bool {
	if o == nil || o.EulaRequired == nil {
		var ret bool
		return ret
	}
	return *o.EulaRequired
}

// GetEulaRequiredOk returns a tuple with the EulaRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetEulaRequiredOk() (*bool, bool) {
	if o == nil || o.EulaRequired == nil {
		return nil, false
	}
	return o.EulaRequired, true
}

// HasEulaRequired returns a boolean if a field has been set.
func (o *RepositoryToken) HasEulaRequired() bool {
	if o != nil && o.EulaRequired != nil {
		return true
	}

	return false
}

// SetEulaRequired gets a reference to the given bool and assigns it to the EulaRequired field.
func (o *RepositoryToken) SetEulaRequired(v bool) {
	o.EulaRequired = &v
}

// GetHasLimits returns the HasLimits field value if set, zero value otherwise.
func (o *RepositoryToken) GetHasLimits() bool {
	if o == nil || o.HasLimits == nil {
		var ret bool
		return ret
	}
	return *o.HasLimits
}

// GetHasLimitsOk returns a tuple with the HasLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetHasLimitsOk() (*bool, bool) {
	if o == nil || o.HasLimits == nil {
		return nil, false
	}
	return o.HasLimits, true
}

// HasHasLimits returns a boolean if a field has been set.
func (o *RepositoryToken) HasHasLimits() bool {
	if o != nil && o.HasLimits != nil {
		return true
	}

	return false
}

// SetHasLimits gets a reference to the given bool and assigns it to the HasLimits field.
func (o *RepositoryToken) SetHasLimits(v bool) {
	o.HasLimits = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *RepositoryToken) GetIdentifier() int64 {
	if o == nil || o.Identifier == nil {
		var ret int64
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetIdentifierOk() (*int64, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *RepositoryToken) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given int64 and assigns it to the Identifier field.
func (o *RepositoryToken) SetIdentifier(v int64) {
	o.Identifier = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *RepositoryToken) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *RepositoryToken) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *RepositoryToken) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsLimited returns the IsLimited field value if set, zero value otherwise.
func (o *RepositoryToken) GetIsLimited() bool {
	if o == nil || o.IsLimited == nil {
		var ret bool
		return ret
	}
	return *o.IsLimited
}

// GetIsLimitedOk returns a tuple with the IsLimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetIsLimitedOk() (*bool, bool) {
	if o == nil || o.IsLimited == nil {
		return nil, false
	}
	return o.IsLimited, true
}

// HasIsLimited returns a boolean if a field has been set.
func (o *RepositoryToken) HasIsLimited() bool {
	if o != nil && o.IsLimited != nil {
		return true
	}

	return false
}

// SetIsLimited gets a reference to the given bool and assigns it to the IsLimited field.
func (o *RepositoryToken) SetIsLimited(v bool) {
	o.IsLimited = &v
}

// GetLimitBandwidth returns the LimitBandwidth field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitBandwidth() int64 {
	if o == nil || o.LimitBandwidth == nil {
		var ret int64
		return ret
	}
	return *o.LimitBandwidth
}

// GetLimitBandwidthOk returns a tuple with the LimitBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitBandwidthOk() (*int64, bool) {
	if o == nil || o.LimitBandwidth == nil {
		return nil, false
	}
	return o.LimitBandwidth, true
}

// HasLimitBandwidth returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitBandwidth() bool {
	if o != nil && o.LimitBandwidth != nil {
		return true
	}

	return false
}

// SetLimitBandwidth gets a reference to the given int64 and assigns it to the LimitBandwidth field.
func (o *RepositoryToken) SetLimitBandwidth(v int64) {
	o.LimitBandwidth = &v
}

// GetLimitBandwidthUnit returns the LimitBandwidthUnit field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitBandwidthUnit() string {
	if o == nil || o.LimitBandwidthUnit == nil {
		var ret string
		return ret
	}
	return *o.LimitBandwidthUnit
}

// GetLimitBandwidthUnitOk returns a tuple with the LimitBandwidthUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitBandwidthUnitOk() (*string, bool) {
	if o == nil || o.LimitBandwidthUnit == nil {
		return nil, false
	}
	return o.LimitBandwidthUnit, true
}

// HasLimitBandwidthUnit returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitBandwidthUnit() bool {
	if o != nil && o.LimitBandwidthUnit != nil {
		return true
	}

	return false
}

// SetLimitBandwidthUnit gets a reference to the given string and assigns it to the LimitBandwidthUnit field.
func (o *RepositoryToken) SetLimitBandwidthUnit(v string) {
	o.LimitBandwidthUnit = &v
}

// GetLimitDateRangeFrom returns the LimitDateRangeFrom field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitDateRangeFrom() string {
	if o == nil || o.LimitDateRangeFrom == nil {
		var ret string
		return ret
	}
	return *o.LimitDateRangeFrom
}

// GetLimitDateRangeFromOk returns a tuple with the LimitDateRangeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitDateRangeFromOk() (*string, bool) {
	if o == nil || o.LimitDateRangeFrom == nil {
		return nil, false
	}
	return o.LimitDateRangeFrom, true
}

// HasLimitDateRangeFrom returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitDateRangeFrom() bool {
	if o != nil && o.LimitDateRangeFrom != nil {
		return true
	}

	return false
}

// SetLimitDateRangeFrom gets a reference to the given string and assigns it to the LimitDateRangeFrom field.
func (o *RepositoryToken) SetLimitDateRangeFrom(v string) {
	o.LimitDateRangeFrom = &v
}

// GetLimitDateRangeTo returns the LimitDateRangeTo field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitDateRangeTo() string {
	if o == nil || o.LimitDateRangeTo == nil {
		var ret string
		return ret
	}
	return *o.LimitDateRangeTo
}

// GetLimitDateRangeToOk returns a tuple with the LimitDateRangeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitDateRangeToOk() (*string, bool) {
	if o == nil || o.LimitDateRangeTo == nil {
		return nil, false
	}
	return o.LimitDateRangeTo, true
}

// HasLimitDateRangeTo returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitDateRangeTo() bool {
	if o != nil && o.LimitDateRangeTo != nil {
		return true
	}

	return false
}

// SetLimitDateRangeTo gets a reference to the given string and assigns it to the LimitDateRangeTo field.
func (o *RepositoryToken) SetLimitDateRangeTo(v string) {
	o.LimitDateRangeTo = &v
}

// GetLimitNumClients returns the LimitNumClients field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitNumClients() int64 {
	if o == nil || o.LimitNumClients == nil {
		var ret int64
		return ret
	}
	return *o.LimitNumClients
}

// GetLimitNumClientsOk returns a tuple with the LimitNumClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitNumClientsOk() (*int64, bool) {
	if o == nil || o.LimitNumClients == nil {
		return nil, false
	}
	return o.LimitNumClients, true
}

// HasLimitNumClients returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitNumClients() bool {
	if o != nil && o.LimitNumClients != nil {
		return true
	}

	return false
}

// SetLimitNumClients gets a reference to the given int64 and assigns it to the LimitNumClients field.
func (o *RepositoryToken) SetLimitNumClients(v int64) {
	o.LimitNumClients = &v
}

// GetLimitNumDownloads returns the LimitNumDownloads field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitNumDownloads() int64 {
	if o == nil || o.LimitNumDownloads == nil {
		var ret int64
		return ret
	}
	return *o.LimitNumDownloads
}

// GetLimitNumDownloadsOk returns a tuple with the LimitNumDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitNumDownloadsOk() (*int64, bool) {
	if o == nil || o.LimitNumDownloads == nil {
		return nil, false
	}
	return o.LimitNumDownloads, true
}

// HasLimitNumDownloads returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitNumDownloads() bool {
	if o != nil && o.LimitNumDownloads != nil {
		return true
	}

	return false
}

// SetLimitNumDownloads gets a reference to the given int64 and assigns it to the LimitNumDownloads field.
func (o *RepositoryToken) SetLimitNumDownloads(v int64) {
	o.LimitNumDownloads = &v
}

// GetLimitPackageQuery returns the LimitPackageQuery field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitPackageQuery() string {
	if o == nil || o.LimitPackageQuery == nil {
		var ret string
		return ret
	}
	return *o.LimitPackageQuery
}

// GetLimitPackageQueryOk returns a tuple with the LimitPackageQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitPackageQueryOk() (*string, bool) {
	if o == nil || o.LimitPackageQuery == nil {
		return nil, false
	}
	return o.LimitPackageQuery, true
}

// HasLimitPackageQuery returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitPackageQuery() bool {
	if o != nil && o.LimitPackageQuery != nil {
		return true
	}

	return false
}

// SetLimitPackageQuery gets a reference to the given string and assigns it to the LimitPackageQuery field.
func (o *RepositoryToken) SetLimitPackageQuery(v string) {
	o.LimitPackageQuery = &v
}

// GetLimitPathQuery returns the LimitPathQuery field value if set, zero value otherwise.
func (o *RepositoryToken) GetLimitPathQuery() string {
	if o == nil || o.LimitPathQuery == nil {
		var ret string
		return ret
	}
	return *o.LimitPathQuery
}

// GetLimitPathQueryOk returns a tuple with the LimitPathQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetLimitPathQueryOk() (*string, bool) {
	if o == nil || o.LimitPathQuery == nil {
		return nil, false
	}
	return o.LimitPathQuery, true
}

// HasLimitPathQuery returns a boolean if a field has been set.
func (o *RepositoryToken) HasLimitPathQuery() bool {
	if o != nil && o.LimitPathQuery != nil {
		return true
	}

	return false
}

// SetLimitPathQuery gets a reference to the given string and assigns it to the LimitPathQuery field.
func (o *RepositoryToken) SetLimitPathQuery(v string) {
	o.LimitPathQuery = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RepositoryToken) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RepositoryToken) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *RepositoryToken) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetName returns the Name field value
func (o *RepositoryToken) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RepositoryToken) SetName(v string) {
	o.Name = v
}

// GetRefreshUrl returns the RefreshUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetRefreshUrl() string {
	if o == nil || o.RefreshUrl == nil {
		var ret string
		return ret
	}
	return *o.RefreshUrl
}

// GetRefreshUrlOk returns a tuple with the RefreshUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetRefreshUrlOk() (*string, bool) {
	if o == nil || o.RefreshUrl == nil {
		return nil, false
	}
	return o.RefreshUrl, true
}

// HasRefreshUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasRefreshUrl() bool {
	if o != nil && o.RefreshUrl != nil {
		return true
	}

	return false
}

// SetRefreshUrl gets a reference to the given string and assigns it to the RefreshUrl field.
func (o *RepositoryToken) SetRefreshUrl(v string) {
	o.RefreshUrl = &v
}

// GetResetUrl returns the ResetUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetResetUrl() string {
	if o == nil || o.ResetUrl == nil {
		var ret string
		return ret
	}
	return *o.ResetUrl
}

// GetResetUrlOk returns a tuple with the ResetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetResetUrlOk() (*string, bool) {
	if o == nil || o.ResetUrl == nil {
		return nil, false
	}
	return o.ResetUrl, true
}

// HasResetUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasResetUrl() bool {
	if o != nil && o.ResetUrl != nil {
		return true
	}

	return false
}

// SetResetUrl gets a reference to the given string and assigns it to the ResetUrl field.
func (o *RepositoryToken) SetResetUrl(v string) {
	o.ResetUrl = &v
}

// GetScheduledResetAt returns the ScheduledResetAt field value if set, zero value otherwise.
func (o *RepositoryToken) GetScheduledResetAt() string {
	if o == nil || o.ScheduledResetAt == nil {
		var ret string
		return ret
	}
	return *o.ScheduledResetAt
}

// GetScheduledResetAtOk returns a tuple with the ScheduledResetAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetScheduledResetAtOk() (*string, bool) {
	if o == nil || o.ScheduledResetAt == nil {
		return nil, false
	}
	return o.ScheduledResetAt, true
}

// HasScheduledResetAt returns a boolean if a field has been set.
func (o *RepositoryToken) HasScheduledResetAt() bool {
	if o != nil && o.ScheduledResetAt != nil {
		return true
	}

	return false
}

// SetScheduledResetAt gets a reference to the given string and assigns it to the ScheduledResetAt field.
func (o *RepositoryToken) SetScheduledResetAt(v string) {
	o.ScheduledResetAt = &v
}

// GetScheduledResetPeriod returns the ScheduledResetPeriod field value if set, zero value otherwise.
func (o *RepositoryToken) GetScheduledResetPeriod() string {
	if o == nil || o.ScheduledResetPeriod == nil {
		var ret string
		return ret
	}
	return *o.ScheduledResetPeriod
}

// GetScheduledResetPeriodOk returns a tuple with the ScheduledResetPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetScheduledResetPeriodOk() (*string, bool) {
	if o == nil || o.ScheduledResetPeriod == nil {
		return nil, false
	}
	return o.ScheduledResetPeriod, true
}

// HasScheduledResetPeriod returns a boolean if a field has been set.
func (o *RepositoryToken) HasScheduledResetPeriod() bool {
	if o != nil && o.ScheduledResetPeriod != nil {
		return true
	}

	return false
}

// SetScheduledResetPeriod gets a reference to the given string and assigns it to the ScheduledResetPeriod field.
func (o *RepositoryToken) SetScheduledResetPeriod(v string) {
	o.ScheduledResetPeriod = &v
}

// GetSelfUrl returns the SelfUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetSelfUrl() string {
	if o == nil || o.SelfUrl == nil {
		var ret string
		return ret
	}
	return *o.SelfUrl
}

// GetSelfUrlOk returns a tuple with the SelfUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetSelfUrlOk() (*string, bool) {
	if o == nil || o.SelfUrl == nil {
		return nil, false
	}
	return o.SelfUrl, true
}

// HasSelfUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasSelfUrl() bool {
	if o != nil && o.SelfUrl != nil {
		return true
	}

	return false
}

// SetSelfUrl gets a reference to the given string and assigns it to the SelfUrl field.
func (o *RepositoryToken) SetSelfUrl(v string) {
	o.SelfUrl = &v
}

// GetSlugPerm returns the SlugPerm field value if set, zero value otherwise.
func (o *RepositoryToken) GetSlugPerm() string {
	if o == nil || o.SlugPerm == nil {
		var ret string
		return ret
	}
	return *o.SlugPerm
}

// GetSlugPermOk returns a tuple with the SlugPerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetSlugPermOk() (*string, bool) {
	if o == nil || o.SlugPerm == nil {
		return nil, false
	}
	return o.SlugPerm, true
}

// HasSlugPerm returns a boolean if a field has been set.
func (o *RepositoryToken) HasSlugPerm() bool {
	if o != nil && o.SlugPerm != nil {
		return true
	}

	return false
}

// SetSlugPerm gets a reference to the given string and assigns it to the SlugPerm field.
func (o *RepositoryToken) SetSlugPerm(v string) {
	o.SlugPerm = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *RepositoryToken) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *RepositoryToken) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *RepositoryToken) SetToken(v string) {
	o.Token = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RepositoryToken) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RepositoryToken) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RepositoryToken) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *RepositoryToken) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetUpdatedByOk() (*string, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *RepositoryToken) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *RepositoryToken) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetUpdatedByUrl returns the UpdatedByUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetUpdatedByUrl() string {
	if o == nil || o.UpdatedByUrl == nil {
		var ret string
		return ret
	}
	return *o.UpdatedByUrl
}

// GetUpdatedByUrlOk returns a tuple with the UpdatedByUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetUpdatedByUrlOk() (*string, bool) {
	if o == nil || o.UpdatedByUrl == nil {
		return nil, false
	}
	return o.UpdatedByUrl, true
}

// HasUpdatedByUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasUpdatedByUrl() bool {
	if o != nil && o.UpdatedByUrl != nil {
		return true
	}

	return false
}

// SetUpdatedByUrl gets a reference to the given string and assigns it to the UpdatedByUrl field.
func (o *RepositoryToken) SetUpdatedByUrl(v string) {
	o.UpdatedByUrl = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *RepositoryToken) GetUsage() string {
	if o == nil || o.Usage == nil {
		var ret string
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetUsageOk() (*string, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *RepositoryToken) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given string and assigns it to the Usage field.
func (o *RepositoryToken) SetUsage(v string) {
	o.Usage = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RepositoryToken) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RepositoryToken) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RepositoryToken) SetUser(v string) {
	o.User = &v
}

// GetUserUrl returns the UserUrl field value if set, zero value otherwise.
func (o *RepositoryToken) GetUserUrl() string {
	if o == nil || o.UserUrl == nil {
		var ret string
		return ret
	}
	return *o.UserUrl
}

// GetUserUrlOk returns a tuple with the UserUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryToken) GetUserUrlOk() (*string, bool) {
	if o == nil || o.UserUrl == nil {
		return nil, false
	}
	return o.UserUrl, true
}

// HasUserUrl returns a boolean if a field has been set.
func (o *RepositoryToken) HasUserUrl() bool {
	if o != nil && o.UserUrl != nil {
		return true
	}

	return false
}

// SetUserUrl gets a reference to the given string and assigns it to the UserUrl field.
func (o *RepositoryToken) SetUserUrl(v string) {
	o.UserUrl = &v
}

func (o RepositoryToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Clients != nil {
		toSerialize["clients"] = o.Clients
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if o.CreatedByUrl != nil {
		toSerialize["created_by_url"] = o.CreatedByUrl
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	if o.DisableUrl != nil {
		toSerialize["disable_url"] = o.DisableUrl
	}
	if o.Downloads != nil {
		toSerialize["downloads"] = o.Downloads
	}
	if o.EnableUrl != nil {
		toSerialize["enable_url"] = o.EnableUrl
	}
	if o.EulaAccepted != nil {
		toSerialize["eula_accepted"] = o.EulaAccepted
	}
	if o.EulaAcceptedAt != nil {
		toSerialize["eula_accepted_at"] = o.EulaAcceptedAt
	}
	if o.EulaAcceptedFrom != nil {
		toSerialize["eula_accepted_from"] = o.EulaAcceptedFrom
	}
	if o.EulaRequired != nil {
		toSerialize["eula_required"] = o.EulaRequired
	}
	if o.HasLimits != nil {
		toSerialize["has_limits"] = o.HasLimits
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.IsLimited != nil {
		toSerialize["is_limited"] = o.IsLimited
	}
	if o.LimitBandwidth != nil {
		toSerialize["limit_bandwidth"] = o.LimitBandwidth
	}
	if o.LimitBandwidthUnit != nil {
		toSerialize["limit_bandwidth_unit"] = o.LimitBandwidthUnit
	}
	if o.LimitDateRangeFrom != nil {
		toSerialize["limit_date_range_from"] = o.LimitDateRangeFrom
	}
	if o.LimitDateRangeTo != nil {
		toSerialize["limit_date_range_to"] = o.LimitDateRangeTo
	}
	if o.LimitNumClients != nil {
		toSerialize["limit_num_clients"] = o.LimitNumClients
	}
	if o.LimitNumDownloads != nil {
		toSerialize["limit_num_downloads"] = o.LimitNumDownloads
	}
	if o.LimitPackageQuery != nil {
		toSerialize["limit_package_query"] = o.LimitPackageQuery
	}
	if o.LimitPathQuery != nil {
		toSerialize["limit_path_query"] = o.LimitPathQuery
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.RefreshUrl != nil {
		toSerialize["refresh_url"] = o.RefreshUrl
	}
	if o.ResetUrl != nil {
		toSerialize["reset_url"] = o.ResetUrl
	}
	if o.ScheduledResetAt != nil {
		toSerialize["scheduled_reset_at"] = o.ScheduledResetAt
	}
	if o.ScheduledResetPeriod != nil {
		toSerialize["scheduled_reset_period"] = o.ScheduledResetPeriod
	}
	if o.SelfUrl != nil {
		toSerialize["self_url"] = o.SelfUrl
	}
	if o.SlugPerm != nil {
		toSerialize["slug_perm"] = o.SlugPerm
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if o.UpdatedByUrl != nil {
		toSerialize["updated_by_url"] = o.UpdatedByUrl
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.UserUrl != nil {
		toSerialize["user_url"] = o.UserUrl
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryToken struct {
	value *RepositoryToken
	isSet bool
}

func (v NullableRepositoryToken) Get() *RepositoryToken {
	return v.value
}

func (v *NullableRepositoryToken) Set(val *RepositoryToken) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryToken) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryToken(val *RepositoryToken) *NullableRepositoryToken {
	return &NullableRepositoryToken{value: val, isSet: true}
}

func (v NullableRepositoryToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
