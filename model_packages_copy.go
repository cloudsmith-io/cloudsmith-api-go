/*
Cloudsmith API

The API to the Cloudsmith Service

API version: 1.121.3
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// PackagesCopy struct for PackagesCopy
type PackagesCopy struct {
	// None
	Destination string `json:"destination"`
	// If true, the package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.
	Republish *bool `json:"republish,omitempty"`
}

// NewPackagesCopy instantiates a new PackagesCopy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackagesCopy(destination string) *PackagesCopy {
	this := PackagesCopy{}
	this.Destination = destination
	return &this
}

// NewPackagesCopyWithDefaults instantiates a new PackagesCopy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackagesCopyWithDefaults() *PackagesCopy {
	this := PackagesCopy{}
	return &this
}

// GetDestination returns the Destination field value
func (o *PackagesCopy) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *PackagesCopy) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *PackagesCopy) SetDestination(v string) {
	o.Destination = v
}

// GetRepublish returns the Republish field value if set, zero value otherwise.
func (o *PackagesCopy) GetRepublish() bool {
	if o == nil || o.Republish == nil {
		var ret bool
		return ret
	}
	return *o.Republish
}

// GetRepublishOk returns a tuple with the Republish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackagesCopy) GetRepublishOk() (*bool, bool) {
	if o == nil || o.Republish == nil {
		return nil, false
	}
	return o.Republish, true
}

// HasRepublish returns a boolean if a field has been set.
func (o *PackagesCopy) HasRepublish() bool {
	if o != nil && o.Republish != nil {
		return true
	}

	return false
}

// SetRepublish gets a reference to the given bool and assigns it to the Republish field.
func (o *PackagesCopy) SetRepublish(v bool) {
	o.Republish = &v
}

func (o PackagesCopy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destination"] = o.Destination
	}
	if o.Republish != nil {
		toSerialize["republish"] = o.Republish
	}
	return json.Marshal(toSerialize)
}

type NullablePackagesCopy struct {
	value *PackagesCopy
	isSet bool
}

func (v NullablePackagesCopy) Get() *PackagesCopy {
	return v.value
}

func (v *NullablePackagesCopy) Set(val *PackagesCopy) {
	v.value = val
	v.isSet = true
}

func (v NullablePackagesCopy) IsSet() bool {
	return v.isSet
}

func (v *NullablePackagesCopy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackagesCopy(val *PackagesCopy) *NullablePackagesCopy {
	return &NullablePackagesCopy{value: val, isSet: true}
}

func (v NullablePackagesCopy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackagesCopy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
