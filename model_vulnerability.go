/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.703.0
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
)

// checks if the Vulnerability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vulnerability{}

// Vulnerability struct for Vulnerability
type Vulnerability struct {
	AffectedVersion      VulnerabilityScanVersion `json:"affected_version"`
	Description          string                   `json:"description"`
	FixedVersion         VulnerabilityScanVersion `json:"fixed_version"`
	PackageName          string                   `json:"package_name"`
	References           []string                 `json:"references"`
	Severity             *string                  `json:"severity,omitempty"`
	SeveritySource       string                   `json:"severity_source"`
	Title                string                   `json:"title"`
	VulnerabilityId      string                   `json:"vulnerability_id"`
	AdditionalProperties map[string]interface{}
}

type _Vulnerability Vulnerability

// NewVulnerability instantiates a new Vulnerability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerability(affectedVersion VulnerabilityScanVersion, description string, fixedVersion VulnerabilityScanVersion, packageName string, references []string, severitySource string, title string, vulnerabilityId string) *Vulnerability {
	this := Vulnerability{}
	this.AffectedVersion = affectedVersion
	this.Description = description
	this.FixedVersion = fixedVersion
	this.PackageName = packageName
	this.References = references
	var severity string = "Unknown"
	this.Severity = &severity
	this.SeveritySource = severitySource
	this.Title = title
	this.VulnerabilityId = vulnerabilityId
	return &this
}

// NewVulnerabilityWithDefaults instantiates a new Vulnerability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityWithDefaults() *Vulnerability {
	this := Vulnerability{}
	var severity string = "Unknown"
	this.Severity = &severity
	return &this
}

// GetAffectedVersion returns the AffectedVersion field value
func (o *Vulnerability) GetAffectedVersion() VulnerabilityScanVersion {
	if o == nil {
		var ret VulnerabilityScanVersion
		return ret
	}

	return o.AffectedVersion
}

// GetAffectedVersionOk returns a tuple with the AffectedVersion field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetAffectedVersionOk() (*VulnerabilityScanVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AffectedVersion, true
}

// SetAffectedVersion sets field value
func (o *Vulnerability) SetAffectedVersion(v VulnerabilityScanVersion) {
	o.AffectedVersion = v
}

// GetDescription returns the Description field value
func (o *Vulnerability) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Vulnerability) SetDescription(v string) {
	o.Description = v
}

// GetFixedVersion returns the FixedVersion field value
func (o *Vulnerability) GetFixedVersion() VulnerabilityScanVersion {
	if o == nil {
		var ret VulnerabilityScanVersion
		return ret
	}

	return o.FixedVersion
}

// GetFixedVersionOk returns a tuple with the FixedVersion field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetFixedVersionOk() (*VulnerabilityScanVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FixedVersion, true
}

// SetFixedVersion sets field value
func (o *Vulnerability) SetFixedVersion(v VulnerabilityScanVersion) {
	o.FixedVersion = v
}

// GetPackageName returns the PackageName field value
func (o *Vulnerability) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *Vulnerability) SetPackageName(v string) {
	o.PackageName = v
}

// GetReferences returns the References field value
func (o *Vulnerability) GetReferences() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.References
}

// GetReferencesOk returns a tuple with the References field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetReferencesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.References, true
}

// SetReferences sets field value
func (o *Vulnerability) SetReferences(v []string) {
	o.References = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Vulnerability) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Vulnerability) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *Vulnerability) SetSeverity(v string) {
	o.Severity = &v
}

// GetSeveritySource returns the SeveritySource field value
func (o *Vulnerability) GetSeveritySource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeveritySource
}

// GetSeveritySourceOk returns a tuple with the SeveritySource field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetSeveritySourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeveritySource, true
}

// SetSeveritySource sets field value
func (o *Vulnerability) SetSeveritySource(v string) {
	o.SeveritySource = v
}

// GetTitle returns the Title field value
func (o *Vulnerability) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Vulnerability) SetTitle(v string) {
	o.Title = v
}

// GetVulnerabilityId returns the VulnerabilityId field value
func (o *Vulnerability) GetVulnerabilityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VulnerabilityId
}

// GetVulnerabilityIdOk returns a tuple with the VulnerabilityId field value
// and a boolean to check if the value has been set.
func (o *Vulnerability) GetVulnerabilityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VulnerabilityId, true
}

// SetVulnerabilityId sets field value
func (o *Vulnerability) SetVulnerabilityId(v string) {
	o.VulnerabilityId = v
}

func (o Vulnerability) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vulnerability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["affected_version"] = o.AffectedVersion
	toSerialize["description"] = o.Description
	toSerialize["fixed_version"] = o.FixedVersion
	toSerialize["package_name"] = o.PackageName
	toSerialize["references"] = o.References
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	toSerialize["severity_source"] = o.SeveritySource
	toSerialize["title"] = o.Title
	toSerialize["vulnerability_id"] = o.VulnerabilityId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Vulnerability) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"affected_version",
		"description",
		"fixed_version",
		"package_name",
		"references",
		"severity_source",
		"title",
		"vulnerability_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVulnerability := _Vulnerability{}

	err = json.Unmarshal(data, &varVulnerability)

	if err != nil {
		return err
	}

	*o = Vulnerability(varVulnerability)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "affected_version")
		delete(additionalProperties, "description")
		delete(additionalProperties, "fixed_version")
		delete(additionalProperties, "package_name")
		delete(additionalProperties, "references")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "severity_source")
		delete(additionalProperties, "title")
		delete(additionalProperties, "vulnerability_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVulnerability struct {
	value *Vulnerability
	isSet bool
}

func (v NullableVulnerability) Get() *Vulnerability {
	return v.value
}

func (v *NullableVulnerability) Set(val *Vulnerability) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerability) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerability(val *Vulnerability) *NullableVulnerability {
	return &NullableVulnerability{value: val, isSet: true}
}

func (v NullableVulnerability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
