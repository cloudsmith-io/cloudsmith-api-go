/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.247.7
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// HistoryFieldsetRaw struct for HistoryFieldsetRaw
type HistoryFieldsetRaw struct {
	Downloaded  UsageRaw        `json:"downloaded"`
	StorageUsed StorageUsageRaw `json:"storage_used"`
	Uploaded    UsageRaw        `json:"uploaded"`
}

// NewHistoryFieldsetRaw instantiates a new HistoryFieldsetRaw object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryFieldsetRaw(downloaded UsageRaw, storageUsed StorageUsageRaw, uploaded UsageRaw) *HistoryFieldsetRaw {
	this := HistoryFieldsetRaw{}
	this.Downloaded = downloaded
	this.StorageUsed = storageUsed
	this.Uploaded = uploaded
	return &this
}

// NewHistoryFieldsetRawWithDefaults instantiates a new HistoryFieldsetRaw object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryFieldsetRawWithDefaults() *HistoryFieldsetRaw {
	this := HistoryFieldsetRaw{}
	return &this
}

// GetDownloaded returns the Downloaded field value
func (o *HistoryFieldsetRaw) GetDownloaded() UsageRaw {
	if o == nil {
		var ret UsageRaw
		return ret
	}

	return o.Downloaded
}

// GetDownloadedOk returns a tuple with the Downloaded field value
// and a boolean to check if the value has been set.
func (o *HistoryFieldsetRaw) GetDownloadedOk() (*UsageRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Downloaded, true
}

// SetDownloaded sets field value
func (o *HistoryFieldsetRaw) SetDownloaded(v UsageRaw) {
	o.Downloaded = v
}

// GetStorageUsed returns the StorageUsed field value
func (o *HistoryFieldsetRaw) GetStorageUsed() StorageUsageRaw {
	if o == nil {
		var ret StorageUsageRaw
		return ret
	}

	return o.StorageUsed
}

// GetStorageUsedOk returns a tuple with the StorageUsed field value
// and a boolean to check if the value has been set.
func (o *HistoryFieldsetRaw) GetStorageUsedOk() (*StorageUsageRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageUsed, true
}

// SetStorageUsed sets field value
func (o *HistoryFieldsetRaw) SetStorageUsed(v StorageUsageRaw) {
	o.StorageUsed = v
}

// GetUploaded returns the Uploaded field value
func (o *HistoryFieldsetRaw) GetUploaded() UsageRaw {
	if o == nil {
		var ret UsageRaw
		return ret
	}

	return o.Uploaded
}

// GetUploadedOk returns a tuple with the Uploaded field value
// and a boolean to check if the value has been set.
func (o *HistoryFieldsetRaw) GetUploadedOk() (*UsageRaw, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uploaded, true
}

// SetUploaded sets field value
func (o *HistoryFieldsetRaw) SetUploaded(v UsageRaw) {
	o.Uploaded = v
}

func (o HistoryFieldsetRaw) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["downloaded"] = o.Downloaded
	}
	if true {
		toSerialize["storage_used"] = o.StorageUsed
	}
	if true {
		toSerialize["uploaded"] = o.Uploaded
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryFieldsetRaw struct {
	value *HistoryFieldsetRaw
	isSet bool
}

func (v NullableHistoryFieldsetRaw) Get() *HistoryFieldsetRaw {
	return v.value
}

func (v *NullableHistoryFieldsetRaw) Set(val *HistoryFieldsetRaw) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryFieldsetRaw) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryFieldsetRaw) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryFieldsetRaw(val *HistoryFieldsetRaw) *NullableHistoryFieldsetRaw {
	return &NullableHistoryFieldsetRaw{value: val, isSet: true}
}

func (v NullableHistoryFieldsetRaw) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryFieldsetRaw) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
