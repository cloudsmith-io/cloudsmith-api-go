/*
Cloudsmith API

The API to the Cloudsmith Service

API version: 1.42.1
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// Repository struct for Repository
type Repository struct {
	// Base URL from which packages and other artifacts are downloaded.
	CdnUrl *string `json:"cdn_url,omitempty"`
	//
	CreatedAt *string `json:"created_at,omitempty"`
	//
	DeletedAt *string `json:"deleted_at,omitempty"`
	// A description of the repository's purpose/contents.
	Description *string `json:"description,omitempty"`
	//
	GpgKeys []ReposGpgKeys `json:"gpg_keys,omitempty"`
	// If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.
	IndexFiles *bool `json:"index_files,omitempty"`
	//
	IsOpenSource *bool `json:"is_open_source,omitempty"`
	//
	IsPrivate *bool `json:"is_private,omitempty"`
	//
	IsPublic *bool `json:"is_public,omitempty"`
	// A descriptive name for the repository.
	Name string `json:"name"`
	// Namespace to which this repository belongs.
	Namespace *string `json:"namespace,omitempty"`
	// API endpoint where data about this namespace can be retrieved.
	NamespaceUrl *string `json:"namespace_url,omitempty"`
	// The number of downloads for packages in the repository.
	NumDownloads *int64 `json:"num_downloads,omitempty"`
	// The number of packages in the repository.
	PackageCount *int64 `json:"package_count,omitempty"`
	// The number of groups in the repository.
	PackageGroupCount *int64 `json:"package_group_count,omitempty"`
	// The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.
	RepositoryType *string `json:"repository_type,omitempty"`
	// The repository type changes how it is accessed and billed. Private repositories can only be used on paid plans, but are visible only to you or authorised delegates. Public repositories are free to use on all plans and visible to all Cloudsmith users.
	RepositoryTypeStr *string `json:"repository_type_str,omitempty"`
	// Website URL for this repository.
	SelfHtmlUrl *string `json:"self_html_url,omitempty"`
	// API endpoint where data about this repository can be retrieved.
	SelfUrl *string `json:"self_url,omitempty"`
	// The calculated size of the repository.
	Size *int64 `json:"size,omitempty"`
	// The calculated size of the repository (human readable).
	SizeStr *string `json:"size_str,omitempty"`
	// The slug identifies the repository in URIs.
	Slug *string `json:"slug,omitempty"`
	// The slug_perm immutably identifies the repository. It will never change once a repository has been created.
	SlugPerm *string `json:"slug_perm,omitempty"`
	// The Cloudsmith region in which package files are stored.
	StorageRegion *string `json:"storage_region,omitempty"`
}

// NewRepository instantiates a new Repository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepository(name string) *Repository {
	this := Repository{}
	this.Name = name
	return &this
}

// NewRepositoryWithDefaults instantiates a new Repository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWithDefaults() *Repository {
	this := Repository{}
	return &this
}

// GetCdnUrl returns the CdnUrl field value if set, zero value otherwise.
func (o *Repository) GetCdnUrl() string {
	if o == nil || o.CdnUrl == nil {
		var ret string
		return ret
	}
	return *o.CdnUrl
}

// GetCdnUrlOk returns a tuple with the CdnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCdnUrlOk() (*string, bool) {
	if o == nil || o.CdnUrl == nil {
		return nil, false
	}
	return o.CdnUrl, true
}

// HasCdnUrl returns a boolean if a field has been set.
func (o *Repository) HasCdnUrl() bool {
	if o != nil && o.CdnUrl != nil {
		return true
	}

	return false
}

// SetCdnUrl gets a reference to the given string and assigns it to the CdnUrl field.
func (o *Repository) SetCdnUrl(v string) {
	o.CdnUrl = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Repository) GetCreatedAt() string {
	if o == nil || o.CreatedAt == nil {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCreatedAtOk() (*string, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Repository) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *Repository) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Repository) GetDeletedAt() string {
	if o == nil || o.DeletedAt == nil {
		var ret string
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDeletedAtOk() (*string, bool) {
	if o == nil || o.DeletedAt == nil {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Repository) HasDeletedAt() bool {
	if o != nil && o.DeletedAt != nil {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given string and assigns it to the DeletedAt field.
func (o *Repository) SetDeletedAt(v string) {
	o.DeletedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Repository) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Repository) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Repository) SetDescription(v string) {
	o.Description = &v
}

// GetGpgKeys returns the GpgKeys field value if set, zero value otherwise.
func (o *Repository) GetGpgKeys() []ReposGpgKeys {
	if o == nil || o.GpgKeys == nil {
		var ret []ReposGpgKeys
		return ret
	}
	return o.GpgKeys
}

// GetGpgKeysOk returns a tuple with the GpgKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetGpgKeysOk() ([]ReposGpgKeys, bool) {
	if o == nil || o.GpgKeys == nil {
		return nil, false
	}
	return o.GpgKeys, true
}

// HasGpgKeys returns a boolean if a field has been set.
func (o *Repository) HasGpgKeys() bool {
	if o != nil && o.GpgKeys != nil {
		return true
	}

	return false
}

// SetGpgKeys gets a reference to the given []ReposGpgKeys and assigns it to the GpgKeys field.
func (o *Repository) SetGpgKeys(v []ReposGpgKeys) {
	o.GpgKeys = v
}

// GetIndexFiles returns the IndexFiles field value if set, zero value otherwise.
func (o *Repository) GetIndexFiles() bool {
	if o == nil || o.IndexFiles == nil {
		var ret bool
		return ret
	}
	return *o.IndexFiles
}

// GetIndexFilesOk returns a tuple with the IndexFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIndexFilesOk() (*bool, bool) {
	if o == nil || o.IndexFiles == nil {
		return nil, false
	}
	return o.IndexFiles, true
}

// HasIndexFiles returns a boolean if a field has been set.
func (o *Repository) HasIndexFiles() bool {
	if o != nil && o.IndexFiles != nil {
		return true
	}

	return false
}

// SetIndexFiles gets a reference to the given bool and assigns it to the IndexFiles field.
func (o *Repository) SetIndexFiles(v bool) {
	o.IndexFiles = &v
}

// GetIsOpenSource returns the IsOpenSource field value if set, zero value otherwise.
func (o *Repository) GetIsOpenSource() bool {
	if o == nil || o.IsOpenSource == nil {
		var ret bool
		return ret
	}
	return *o.IsOpenSource
}

// GetIsOpenSourceOk returns a tuple with the IsOpenSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsOpenSourceOk() (*bool, bool) {
	if o == nil || o.IsOpenSource == nil {
		return nil, false
	}
	return o.IsOpenSource, true
}

// HasIsOpenSource returns a boolean if a field has been set.
func (o *Repository) HasIsOpenSource() bool {
	if o != nil && o.IsOpenSource != nil {
		return true
	}

	return false
}

// SetIsOpenSource gets a reference to the given bool and assigns it to the IsOpenSource field.
func (o *Repository) SetIsOpenSource(v bool) {
	o.IsOpenSource = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *Repository) GetIsPrivate() bool {
	if o == nil || o.IsPrivate == nil {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsPrivateOk() (*bool, bool) {
	if o == nil || o.IsPrivate == nil {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *Repository) HasIsPrivate() bool {
	if o != nil && o.IsPrivate != nil {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *Repository) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *Repository) GetIsPublic() bool {
	if o == nil || o.IsPublic == nil {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsPublicOk() (*bool, bool) {
	if o == nil || o.IsPublic == nil {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *Repository) HasIsPublic() bool {
	if o != nil && o.IsPublic != nil {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *Repository) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetName returns the Name field value
func (o *Repository) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Repository) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Repository) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Repository) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Repository) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *Repository) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNamespaceUrl returns the NamespaceUrl field value if set, zero value otherwise.
func (o *Repository) GetNamespaceUrl() string {
	if o == nil || o.NamespaceUrl == nil {
		var ret string
		return ret
	}
	return *o.NamespaceUrl
}

// GetNamespaceUrlOk returns a tuple with the NamespaceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNamespaceUrlOk() (*string, bool) {
	if o == nil || o.NamespaceUrl == nil {
		return nil, false
	}
	return o.NamespaceUrl, true
}

// HasNamespaceUrl returns a boolean if a field has been set.
func (o *Repository) HasNamespaceUrl() bool {
	if o != nil && o.NamespaceUrl != nil {
		return true
	}

	return false
}

// SetNamespaceUrl gets a reference to the given string and assigns it to the NamespaceUrl field.
func (o *Repository) SetNamespaceUrl(v string) {
	o.NamespaceUrl = &v
}

// GetNumDownloads returns the NumDownloads field value if set, zero value otherwise.
func (o *Repository) GetNumDownloads() int64 {
	if o == nil || o.NumDownloads == nil {
		var ret int64
		return ret
	}
	return *o.NumDownloads
}

// GetNumDownloadsOk returns a tuple with the NumDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNumDownloadsOk() (*int64, bool) {
	if o == nil || o.NumDownloads == nil {
		return nil, false
	}
	return o.NumDownloads, true
}

// HasNumDownloads returns a boolean if a field has been set.
func (o *Repository) HasNumDownloads() bool {
	if o != nil && o.NumDownloads != nil {
		return true
	}

	return false
}

// SetNumDownloads gets a reference to the given int64 and assigns it to the NumDownloads field.
func (o *Repository) SetNumDownloads(v int64) {
	o.NumDownloads = &v
}

// GetPackageCount returns the PackageCount field value if set, zero value otherwise.
func (o *Repository) GetPackageCount() int64 {
	if o == nil || o.PackageCount == nil {
		var ret int64
		return ret
	}
	return *o.PackageCount
}

// GetPackageCountOk returns a tuple with the PackageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPackageCountOk() (*int64, bool) {
	if o == nil || o.PackageCount == nil {
		return nil, false
	}
	return o.PackageCount, true
}

// HasPackageCount returns a boolean if a field has been set.
func (o *Repository) HasPackageCount() bool {
	if o != nil && o.PackageCount != nil {
		return true
	}

	return false
}

// SetPackageCount gets a reference to the given int64 and assigns it to the PackageCount field.
func (o *Repository) SetPackageCount(v int64) {
	o.PackageCount = &v
}

// GetPackageGroupCount returns the PackageGroupCount field value if set, zero value otherwise.
func (o *Repository) GetPackageGroupCount() int64 {
	if o == nil || o.PackageGroupCount == nil {
		var ret int64
		return ret
	}
	return *o.PackageGroupCount
}

// GetPackageGroupCountOk returns a tuple with the PackageGroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPackageGroupCountOk() (*int64, bool) {
	if o == nil || o.PackageGroupCount == nil {
		return nil, false
	}
	return o.PackageGroupCount, true
}

// HasPackageGroupCount returns a boolean if a field has been set.
func (o *Repository) HasPackageGroupCount() bool {
	if o != nil && o.PackageGroupCount != nil {
		return true
	}

	return false
}

// SetPackageGroupCount gets a reference to the given int64 and assigns it to the PackageGroupCount field.
func (o *Repository) SetPackageGroupCount(v int64) {
	o.PackageGroupCount = &v
}

// GetRepositoryType returns the RepositoryType field value if set, zero value otherwise.
func (o *Repository) GetRepositoryType() string {
	if o == nil || o.RepositoryType == nil {
		var ret string
		return ret
	}
	return *o.RepositoryType
}

// GetRepositoryTypeOk returns a tuple with the RepositoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRepositoryTypeOk() (*string, bool) {
	if o == nil || o.RepositoryType == nil {
		return nil, false
	}
	return o.RepositoryType, true
}

// HasRepositoryType returns a boolean if a field has been set.
func (o *Repository) HasRepositoryType() bool {
	if o != nil && o.RepositoryType != nil {
		return true
	}

	return false
}

// SetRepositoryType gets a reference to the given string and assigns it to the RepositoryType field.
func (o *Repository) SetRepositoryType(v string) {
	o.RepositoryType = &v
}

// GetRepositoryTypeStr returns the RepositoryTypeStr field value if set, zero value otherwise.
func (o *Repository) GetRepositoryTypeStr() string {
	if o == nil || o.RepositoryTypeStr == nil {
		var ret string
		return ret
	}
	return *o.RepositoryTypeStr
}

// GetRepositoryTypeStrOk returns a tuple with the RepositoryTypeStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRepositoryTypeStrOk() (*string, bool) {
	if o == nil || o.RepositoryTypeStr == nil {
		return nil, false
	}
	return o.RepositoryTypeStr, true
}

// HasRepositoryTypeStr returns a boolean if a field has been set.
func (o *Repository) HasRepositoryTypeStr() bool {
	if o != nil && o.RepositoryTypeStr != nil {
		return true
	}

	return false
}

// SetRepositoryTypeStr gets a reference to the given string and assigns it to the RepositoryTypeStr field.
func (o *Repository) SetRepositoryTypeStr(v string) {
	o.RepositoryTypeStr = &v
}

// GetSelfHtmlUrl returns the SelfHtmlUrl field value if set, zero value otherwise.
func (o *Repository) GetSelfHtmlUrl() string {
	if o == nil || o.SelfHtmlUrl == nil {
		var ret string
		return ret
	}
	return *o.SelfHtmlUrl
}

// GetSelfHtmlUrlOk returns a tuple with the SelfHtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSelfHtmlUrlOk() (*string, bool) {
	if o == nil || o.SelfHtmlUrl == nil {
		return nil, false
	}
	return o.SelfHtmlUrl, true
}

// HasSelfHtmlUrl returns a boolean if a field has been set.
func (o *Repository) HasSelfHtmlUrl() bool {
	if o != nil && o.SelfHtmlUrl != nil {
		return true
	}

	return false
}

// SetSelfHtmlUrl gets a reference to the given string and assigns it to the SelfHtmlUrl field.
func (o *Repository) SetSelfHtmlUrl(v string) {
	o.SelfHtmlUrl = &v
}

// GetSelfUrl returns the SelfUrl field value if set, zero value otherwise.
func (o *Repository) GetSelfUrl() string {
	if o == nil || o.SelfUrl == nil {
		var ret string
		return ret
	}
	return *o.SelfUrl
}

// GetSelfUrlOk returns a tuple with the SelfUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSelfUrlOk() (*string, bool) {
	if o == nil || o.SelfUrl == nil {
		return nil, false
	}
	return o.SelfUrl, true
}

// HasSelfUrl returns a boolean if a field has been set.
func (o *Repository) HasSelfUrl() bool {
	if o != nil && o.SelfUrl != nil {
		return true
	}

	return false
}

// SetSelfUrl gets a reference to the given string and assigns it to the SelfUrl field.
func (o *Repository) SetSelfUrl(v string) {
	o.SelfUrl = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Repository) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Repository) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Repository) SetSize(v int64) {
	o.Size = &v
}

// GetSizeStr returns the SizeStr field value if set, zero value otherwise.
func (o *Repository) GetSizeStr() string {
	if o == nil || o.SizeStr == nil {
		var ret string
		return ret
	}
	return *o.SizeStr
}

// GetSizeStrOk returns a tuple with the SizeStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSizeStrOk() (*string, bool) {
	if o == nil || o.SizeStr == nil {
		return nil, false
	}
	return o.SizeStr, true
}

// HasSizeStr returns a boolean if a field has been set.
func (o *Repository) HasSizeStr() bool {
	if o != nil && o.SizeStr != nil {
		return true
	}

	return false
}

// SetSizeStr gets a reference to the given string and assigns it to the SizeStr field.
func (o *Repository) SetSizeStr(v string) {
	o.SizeStr = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *Repository) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *Repository) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *Repository) SetSlug(v string) {
	o.Slug = &v
}

// GetSlugPerm returns the SlugPerm field value if set, zero value otherwise.
func (o *Repository) GetSlugPerm() string {
	if o == nil || o.SlugPerm == nil {
		var ret string
		return ret
	}
	return *o.SlugPerm
}

// GetSlugPermOk returns a tuple with the SlugPerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSlugPermOk() (*string, bool) {
	if o == nil || o.SlugPerm == nil {
		return nil, false
	}
	return o.SlugPerm, true
}

// HasSlugPerm returns a boolean if a field has been set.
func (o *Repository) HasSlugPerm() bool {
	if o != nil && o.SlugPerm != nil {
		return true
	}

	return false
}

// SetSlugPerm gets a reference to the given string and assigns it to the SlugPerm field.
func (o *Repository) SetSlugPerm(v string) {
	o.SlugPerm = &v
}

// GetStorageRegion returns the StorageRegion field value if set, zero value otherwise.
func (o *Repository) GetStorageRegion() string {
	if o == nil || o.StorageRegion == nil {
		var ret string
		return ret
	}
	return *o.StorageRegion
}

// GetStorageRegionOk returns a tuple with the StorageRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetStorageRegionOk() (*string, bool) {
	if o == nil || o.StorageRegion == nil {
		return nil, false
	}
	return o.StorageRegion, true
}

// HasStorageRegion returns a boolean if a field has been set.
func (o *Repository) HasStorageRegion() bool {
	if o != nil && o.StorageRegion != nil {
		return true
	}

	return false
}

// SetStorageRegion gets a reference to the given string and assigns it to the StorageRegion field.
func (o *Repository) SetStorageRegion(v string) {
	o.StorageRegion = &v
}

func (o Repository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CdnUrl != nil {
		toSerialize["cdn_url"] = o.CdnUrl
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.DeletedAt != nil {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.GpgKeys != nil {
		toSerialize["gpg_keys"] = o.GpgKeys
	}
	if o.IndexFiles != nil {
		toSerialize["index_files"] = o.IndexFiles
	}
	if o.IsOpenSource != nil {
		toSerialize["is_open_source"] = o.IsOpenSource
	}
	if o.IsPrivate != nil {
		toSerialize["is_private"] = o.IsPrivate
	}
	if o.IsPublic != nil {
		toSerialize["is_public"] = o.IsPublic
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.NamespaceUrl != nil {
		toSerialize["namespace_url"] = o.NamespaceUrl
	}
	if o.NumDownloads != nil {
		toSerialize["num_downloads"] = o.NumDownloads
	}
	if o.PackageCount != nil {
		toSerialize["package_count"] = o.PackageCount
	}
	if o.PackageGroupCount != nil {
		toSerialize["package_group_count"] = o.PackageGroupCount
	}
	if o.RepositoryType != nil {
		toSerialize["repository_type"] = o.RepositoryType
	}
	if o.RepositoryTypeStr != nil {
		toSerialize["repository_type_str"] = o.RepositoryTypeStr
	}
	if o.SelfHtmlUrl != nil {
		toSerialize["self_html_url"] = o.SelfHtmlUrl
	}
	if o.SelfUrl != nil {
		toSerialize["self_url"] = o.SelfUrl
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.SizeStr != nil {
		toSerialize["size_str"] = o.SizeStr
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.SlugPerm != nil {
		toSerialize["slug_perm"] = o.SlugPerm
	}
	if o.StorageRegion != nil {
		toSerialize["storage_region"] = o.StorageRegion
	}
	return json.Marshal(toSerialize)
}

type NullableRepository struct {
	value *Repository
	isSet bool
}

func (v NullableRepository) Get() *Repository {
	return v.value
}

func (v *NullableRepository) Set(val *Repository) {
	v.value = val
	v.isSet = true
}

func (v NullableRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepository(val *Repository) *NullableRepository {
	return &NullableRepository{value: val, isSet: true}
}

func (v NullableRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
