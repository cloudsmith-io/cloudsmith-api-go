/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.616.0
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Repository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Repository{}

// Repository struct for Repository
type Repository struct {
	// Base URL from which packages and other artifacts are downloaded.
	CdnUrl NullableString `json:"cdn_url,omitempty"`
	// The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.
	ContentKind *string `json:"content_kind,omitempty"`
	// If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.
	ContextualAuthRealm *bool `json:"contextual_auth_realm,omitempty"`
	// If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.
	CopyOwn *bool `json:"copy_own,omitempty"`
	// This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.
	CopyPackages *string    `json:"copy_packages,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	// This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.
	DefaultPrivilege *string `json:"default_privilege,omitempty"`
	// If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.
	DeleteOwn *bool `json:"delete_own,omitempty"`
	// This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.
	DeletePackages *string `json:"delete_packages,omitempty"`
	// The datetime the repository was manually deleted at.
	DeletedAt NullableTime `json:"deleted_at,omitempty"`
	// A description of the repository's purpose/contents.
	Description *string `json:"description,omitempty"`
	// The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.
	Distributes []string `json:"distributes,omitempty"`
	// If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.
	DockerRefreshTokensEnabled *bool                `json:"docker_refresh_tokens_enabled,omitempty"`
	EcdsaKeys                  []RepositoryEcdsaKey `json:"ecdsa_keys,omitempty"`
	// If checked, downloads will explicitly require acceptance of an EULA.
	EnforceEula *bool              `json:"enforce_eula,omitempty"`
	GpgKeys     []RepositoryGpgKey `json:"gpg_keys,omitempty"`
	// If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.
	IndexFiles   *bool `json:"index_files,omitempty"`
	IsOpenSource *bool `json:"is_open_source,omitempty"`
	IsPrivate    *bool `json:"is_private,omitempty"`
	IsPublic     *bool `json:"is_public,omitempty"`
	// This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.
	ManageEntitlementsPrivilege *string `json:"manage_entitlements_privilege,omitempty"`
	// If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.
	MoveOwn *bool `json:"move_own,omitempty"`
	// This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.
	MovePackages *string `json:"move_packages,omitempty"`
	// A descriptive name for the repository.
	Name string `json:"name" validate:"regexp=^\\\\w[\\\\w \\\\-'\\\\.\\/()]+$"`
	// Namespace to which this repository belongs.
	Namespace *string `json:"namespace,omitempty" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	// API endpoint where data about this namespace can be retrieved.
	NamespaceUrl *string `json:"namespace_url,omitempty"`
	// The number of downloads for packages in the repository.
	NumDownloads *int64 `json:"num_downloads,omitempty"`
	// Number of packages with policy violations in a repository.
	NumPolicyViolatedPackages *int64 `json:"num_policy_violated_packages,omitempty"`
	// Number of quarantined packages in a repository.
	NumQuarantinedPackages *int64 `json:"num_quarantined_packages,omitempty"`
	// The SPDX identifier of the open source license.
	OpenSourceLicense NullableString `json:"open_source_license,omitempty"`
	// The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.
	OpenSourceProjectUrl NullableString `json:"open_source_project_url,omitempty"`
	// The number of packages in the repository.
	PackageCount *int64 `json:"package_count,omitempty"`
	// The number of groups in the repository.
	PackageGroupCount *int64 `json:"package_group_count,omitempty"`
	// If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.
	ProxyNpmjs *bool `json:"proxy_npmjs,omitempty"`
	// If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.
	ProxyPypi *bool `json:"proxy_pypi,omitempty"`
	// If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.
	RawPackageIndexEnabled *bool `json:"raw_package_index_enabled,omitempty"`
	// If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.
	RawPackageIndexSignaturesEnabled *bool `json:"raw_package_index_signatures_enabled,omitempty"`
	// This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.
	ReplacePackages *string `json:"replace_packages,omitempty"`
	// If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.
	ReplacePackagesByDefault *bool `json:"replace_packages_by_default,omitempty"`
	// The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.
	RepositoryType *int64 `json:"repository_type,omitempty"`
	// The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.
	RepositoryTypeStr *string `json:"repository_type_str,omitempty"`
	// If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.
	ResyncOwn *bool `json:"resync_own,omitempty"`
	// This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.
	ResyncPackages *string `json:"resync_packages,omitempty"`
	// If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.
	ScanOwn *bool `json:"scan_own,omitempty"`
	// This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.
	ScanPackages *string `json:"scan_packages,omitempty"`
	// Website URL for this repository.
	SelfHtmlUrl *string `json:"self_html_url,omitempty"`
	// API endpoint where data about this repository can be retrieved.
	SelfUrl *string `json:"self_url,omitempty"`
	// If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.
	ShowSetupAll *bool `json:"show_setup_all,omitempty"`
	// The calculated size of the repository.
	Size *int64 `json:"size,omitempty"`
	// The calculated size of the repository (human readable).
	SizeStr *string `json:"size_str,omitempty"`
	// The slug identifies the repository in URIs.
	Slug *string `json:"slug,omitempty"`
	// The slug_perm immutably identifies the repository. It will never change once a repository has been created.
	SlugPerm *string `json:"slug_perm,omitempty" validate:"regexp=^[-a-zA-Z0-9_]+$"`
	// The Cloudsmith region in which package files are stored.
	StorageRegion *string `json:"storage_region,omitempty"`
	// If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.
	StrictNpmValidation *bool `json:"strict_npm_validation,omitempty"`
	// If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools
	TagPreReleasesAsLatest *bool `json:"tag_pre_releases_as_latest,omitempty"`
	// If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-<identifier>'; or 'source=none' if no token was used. You can use this to help with pinning.
	UseDebianLabels *bool `json:"use_debian_labels,omitempty"`
	// If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.
	UseDefaultCargoUpstream *bool `json:"use_default_cargo_upstream,omitempty"`
	// This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).
	UseEntitlementsPrivilege *string `json:"use_entitlements_privilege,omitempty"`
	// If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).
	UseNoarchPackages *bool `json:"use_noarch_packages,omitempty"`
	// If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.
	UseSourcePackages *bool `json:"use_source_packages,omitempty"`
	// If checked, vulnerability scanning will be enabled for all supported packages within this repository.
	UseVulnerabilityScanning *bool `json:"use_vulnerability_scanning,omitempty"`
	// If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.
	UserEntitlementsEnabled *bool `json:"user_entitlements_enabled,omitempty"`
	// This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.
	ViewStatistics       *string `json:"view_statistics,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Repository Repository

// NewRepository instantiates a new Repository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepository(name string) *Repository {
	this := Repository{}
	var contentKind string = "Standard"
	this.ContentKind = &contentKind
	var copyPackages string = "Read"
	this.CopyPackages = &copyPackages
	var defaultPrivilege string = "None"
	this.DefaultPrivilege = &defaultPrivilege
	var deletePackages string = "Admin"
	this.DeletePackages = &deletePackages
	var manageEntitlementsPrivilege string = "Admin"
	this.ManageEntitlementsPrivilege = &manageEntitlementsPrivilege
	var movePackages string = "Admin"
	this.MovePackages = &movePackages
	this.Name = name
	var replacePackages string = "Write"
	this.ReplacePackages = &replacePackages
	var repositoryTypeStr string = "Public"
	this.RepositoryTypeStr = &repositoryTypeStr
	var resyncPackages string = "Admin"
	this.ResyncPackages = &resyncPackages
	var scanPackages string = "Read"
	this.ScanPackages = &scanPackages
	var useEntitlementsPrivilege string = "Read"
	this.UseEntitlementsPrivilege = &useEntitlementsPrivilege
	var viewStatistics string = "Read"
	this.ViewStatistics = &viewStatistics
	return &this
}

// NewRepositoryWithDefaults instantiates a new Repository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWithDefaults() *Repository {
	this := Repository{}
	var contentKind string = "Standard"
	this.ContentKind = &contentKind
	var copyPackages string = "Read"
	this.CopyPackages = &copyPackages
	var defaultPrivilege string = "None"
	this.DefaultPrivilege = &defaultPrivilege
	var deletePackages string = "Admin"
	this.DeletePackages = &deletePackages
	var manageEntitlementsPrivilege string = "Admin"
	this.ManageEntitlementsPrivilege = &manageEntitlementsPrivilege
	var movePackages string = "Admin"
	this.MovePackages = &movePackages
	var replacePackages string = "Write"
	this.ReplacePackages = &replacePackages
	var repositoryTypeStr string = "Public"
	this.RepositoryTypeStr = &repositoryTypeStr
	var resyncPackages string = "Admin"
	this.ResyncPackages = &resyncPackages
	var scanPackages string = "Read"
	this.ScanPackages = &scanPackages
	var useEntitlementsPrivilege string = "Read"
	this.UseEntitlementsPrivilege = &useEntitlementsPrivilege
	var viewStatistics string = "Read"
	this.ViewStatistics = &viewStatistics
	return &this
}

// GetCdnUrl returns the CdnUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Repository) GetCdnUrl() string {
	if o == nil || IsNil(o.CdnUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CdnUrl.Get()
}

// GetCdnUrlOk returns a tuple with the CdnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Repository) GetCdnUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CdnUrl.Get(), o.CdnUrl.IsSet()
}

// HasCdnUrl returns a boolean if a field has been set.
func (o *Repository) HasCdnUrl() bool {
	if o != nil && o.CdnUrl.IsSet() {
		return true
	}

	return false
}

// SetCdnUrl gets a reference to the given NullableString and assigns it to the CdnUrl field.
func (o *Repository) SetCdnUrl(v string) {
	o.CdnUrl.Set(&v)
}

// SetCdnUrlNil sets the value for CdnUrl to be an explicit nil
func (o *Repository) SetCdnUrlNil() {
	o.CdnUrl.Set(nil)
}

// UnsetCdnUrl ensures that no value is present for CdnUrl, not even an explicit nil
func (o *Repository) UnsetCdnUrl() {
	o.CdnUrl.Unset()
}

// GetContentKind returns the ContentKind field value if set, zero value otherwise.
func (o *Repository) GetContentKind() string {
	if o == nil || IsNil(o.ContentKind) {
		var ret string
		return ret
	}
	return *o.ContentKind
}

// GetContentKindOk returns a tuple with the ContentKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetContentKindOk() (*string, bool) {
	if o == nil || IsNil(o.ContentKind) {
		return nil, false
	}
	return o.ContentKind, true
}

// HasContentKind returns a boolean if a field has been set.
func (o *Repository) HasContentKind() bool {
	if o != nil && !IsNil(o.ContentKind) {
		return true
	}

	return false
}

// SetContentKind gets a reference to the given string and assigns it to the ContentKind field.
func (o *Repository) SetContentKind(v string) {
	o.ContentKind = &v
}

// GetContextualAuthRealm returns the ContextualAuthRealm field value if set, zero value otherwise.
func (o *Repository) GetContextualAuthRealm() bool {
	if o == nil || IsNil(o.ContextualAuthRealm) {
		var ret bool
		return ret
	}
	return *o.ContextualAuthRealm
}

// GetContextualAuthRealmOk returns a tuple with the ContextualAuthRealm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetContextualAuthRealmOk() (*bool, bool) {
	if o == nil || IsNil(o.ContextualAuthRealm) {
		return nil, false
	}
	return o.ContextualAuthRealm, true
}

// HasContextualAuthRealm returns a boolean if a field has been set.
func (o *Repository) HasContextualAuthRealm() bool {
	if o != nil && !IsNil(o.ContextualAuthRealm) {
		return true
	}

	return false
}

// SetContextualAuthRealm gets a reference to the given bool and assigns it to the ContextualAuthRealm field.
func (o *Repository) SetContextualAuthRealm(v bool) {
	o.ContextualAuthRealm = &v
}

// GetCopyOwn returns the CopyOwn field value if set, zero value otherwise.
func (o *Repository) GetCopyOwn() bool {
	if o == nil || IsNil(o.CopyOwn) {
		var ret bool
		return ret
	}
	return *o.CopyOwn
}

// GetCopyOwnOk returns a tuple with the CopyOwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCopyOwnOk() (*bool, bool) {
	if o == nil || IsNil(o.CopyOwn) {
		return nil, false
	}
	return o.CopyOwn, true
}

// HasCopyOwn returns a boolean if a field has been set.
func (o *Repository) HasCopyOwn() bool {
	if o != nil && !IsNil(o.CopyOwn) {
		return true
	}

	return false
}

// SetCopyOwn gets a reference to the given bool and assigns it to the CopyOwn field.
func (o *Repository) SetCopyOwn(v bool) {
	o.CopyOwn = &v
}

// GetCopyPackages returns the CopyPackages field value if set, zero value otherwise.
func (o *Repository) GetCopyPackages() string {
	if o == nil || IsNil(o.CopyPackages) {
		var ret string
		return ret
	}
	return *o.CopyPackages
}

// GetCopyPackagesOk returns a tuple with the CopyPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCopyPackagesOk() (*string, bool) {
	if o == nil || IsNil(o.CopyPackages) {
		return nil, false
	}
	return o.CopyPackages, true
}

// HasCopyPackages returns a boolean if a field has been set.
func (o *Repository) HasCopyPackages() bool {
	if o != nil && !IsNil(o.CopyPackages) {
		return true
	}

	return false
}

// SetCopyPackages gets a reference to the given string and assigns it to the CopyPackages field.
func (o *Repository) SetCopyPackages(v string) {
	o.CopyPackages = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Repository) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Repository) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Repository) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDefaultPrivilege returns the DefaultPrivilege field value if set, zero value otherwise.
func (o *Repository) GetDefaultPrivilege() string {
	if o == nil || IsNil(o.DefaultPrivilege) {
		var ret string
		return ret
	}
	return *o.DefaultPrivilege
}

// GetDefaultPrivilegeOk returns a tuple with the DefaultPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDefaultPrivilegeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultPrivilege) {
		return nil, false
	}
	return o.DefaultPrivilege, true
}

// HasDefaultPrivilege returns a boolean if a field has been set.
func (o *Repository) HasDefaultPrivilege() bool {
	if o != nil && !IsNil(o.DefaultPrivilege) {
		return true
	}

	return false
}

// SetDefaultPrivilege gets a reference to the given string and assigns it to the DefaultPrivilege field.
func (o *Repository) SetDefaultPrivilege(v string) {
	o.DefaultPrivilege = &v
}

// GetDeleteOwn returns the DeleteOwn field value if set, zero value otherwise.
func (o *Repository) GetDeleteOwn() bool {
	if o == nil || IsNil(o.DeleteOwn) {
		var ret bool
		return ret
	}
	return *o.DeleteOwn
}

// GetDeleteOwnOk returns a tuple with the DeleteOwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDeleteOwnOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteOwn) {
		return nil, false
	}
	return o.DeleteOwn, true
}

// HasDeleteOwn returns a boolean if a field has been set.
func (o *Repository) HasDeleteOwn() bool {
	if o != nil && !IsNil(o.DeleteOwn) {
		return true
	}

	return false
}

// SetDeleteOwn gets a reference to the given bool and assigns it to the DeleteOwn field.
func (o *Repository) SetDeleteOwn(v bool) {
	o.DeleteOwn = &v
}

// GetDeletePackages returns the DeletePackages field value if set, zero value otherwise.
func (o *Repository) GetDeletePackages() string {
	if o == nil || IsNil(o.DeletePackages) {
		var ret string
		return ret
	}
	return *o.DeletePackages
}

// GetDeletePackagesOk returns a tuple with the DeletePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDeletePackagesOk() (*string, bool) {
	if o == nil || IsNil(o.DeletePackages) {
		return nil, false
	}
	return o.DeletePackages, true
}

// HasDeletePackages returns a boolean if a field has been set.
func (o *Repository) HasDeletePackages() bool {
	if o != nil && !IsNil(o.DeletePackages) {
		return true
	}

	return false
}

// SetDeletePackages gets a reference to the given string and assigns it to the DeletePackages field.
func (o *Repository) SetDeletePackages(v string) {
	o.DeletePackages = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Repository) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt.Get()
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Repository) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletedAt.Get(), o.DeletedAt.IsSet()
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Repository) HasDeletedAt() bool {
	if o != nil && o.DeletedAt.IsSet() {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given NullableTime and assigns it to the DeletedAt field.
func (o *Repository) SetDeletedAt(v time.Time) {
	o.DeletedAt.Set(&v)
}

// SetDeletedAtNil sets the value for DeletedAt to be an explicit nil
func (o *Repository) SetDeletedAtNil() {
	o.DeletedAt.Set(nil)
}

// UnsetDeletedAt ensures that no value is present for DeletedAt, not even an explicit nil
func (o *Repository) UnsetDeletedAt() {
	o.DeletedAt.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Repository) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Repository) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Repository) SetDescription(v string) {
	o.Description = &v
}

// GetDistributes returns the Distributes field value if set, zero value otherwise.
func (o *Repository) GetDistributes() []string {
	if o == nil || IsNil(o.Distributes) {
		var ret []string
		return ret
	}
	return o.Distributes
}

// GetDistributesOk returns a tuple with the Distributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDistributesOk() ([]string, bool) {
	if o == nil || IsNil(o.Distributes) {
		return nil, false
	}
	return o.Distributes, true
}

// HasDistributes returns a boolean if a field has been set.
func (o *Repository) HasDistributes() bool {
	if o != nil && !IsNil(o.Distributes) {
		return true
	}

	return false
}

// SetDistributes gets a reference to the given []string and assigns it to the Distributes field.
func (o *Repository) SetDistributes(v []string) {
	o.Distributes = v
}

// GetDockerRefreshTokensEnabled returns the DockerRefreshTokensEnabled field value if set, zero value otherwise.
func (o *Repository) GetDockerRefreshTokensEnabled() bool {
	if o == nil || IsNil(o.DockerRefreshTokensEnabled) {
		var ret bool
		return ret
	}
	return *o.DockerRefreshTokensEnabled
}

// GetDockerRefreshTokensEnabledOk returns a tuple with the DockerRefreshTokensEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDockerRefreshTokensEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DockerRefreshTokensEnabled) {
		return nil, false
	}
	return o.DockerRefreshTokensEnabled, true
}

// HasDockerRefreshTokensEnabled returns a boolean if a field has been set.
func (o *Repository) HasDockerRefreshTokensEnabled() bool {
	if o != nil && !IsNil(o.DockerRefreshTokensEnabled) {
		return true
	}

	return false
}

// SetDockerRefreshTokensEnabled gets a reference to the given bool and assigns it to the DockerRefreshTokensEnabled field.
func (o *Repository) SetDockerRefreshTokensEnabled(v bool) {
	o.DockerRefreshTokensEnabled = &v
}

// GetEcdsaKeys returns the EcdsaKeys field value if set, zero value otherwise.
func (o *Repository) GetEcdsaKeys() []RepositoryEcdsaKey {
	if o == nil || IsNil(o.EcdsaKeys) {
		var ret []RepositoryEcdsaKey
		return ret
	}
	return o.EcdsaKeys
}

// GetEcdsaKeysOk returns a tuple with the EcdsaKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetEcdsaKeysOk() ([]RepositoryEcdsaKey, bool) {
	if o == nil || IsNil(o.EcdsaKeys) {
		return nil, false
	}
	return o.EcdsaKeys, true
}

// HasEcdsaKeys returns a boolean if a field has been set.
func (o *Repository) HasEcdsaKeys() bool {
	if o != nil && !IsNil(o.EcdsaKeys) {
		return true
	}

	return false
}

// SetEcdsaKeys gets a reference to the given []RepositoryEcdsaKey and assigns it to the EcdsaKeys field.
func (o *Repository) SetEcdsaKeys(v []RepositoryEcdsaKey) {
	o.EcdsaKeys = v
}

// GetEnforceEula returns the EnforceEula field value if set, zero value otherwise.
func (o *Repository) GetEnforceEula() bool {
	if o == nil || IsNil(o.EnforceEula) {
		var ret bool
		return ret
	}
	return *o.EnforceEula
}

// GetEnforceEulaOk returns a tuple with the EnforceEula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetEnforceEulaOk() (*bool, bool) {
	if o == nil || IsNil(o.EnforceEula) {
		return nil, false
	}
	return o.EnforceEula, true
}

// HasEnforceEula returns a boolean if a field has been set.
func (o *Repository) HasEnforceEula() bool {
	if o != nil && !IsNil(o.EnforceEula) {
		return true
	}

	return false
}

// SetEnforceEula gets a reference to the given bool and assigns it to the EnforceEula field.
func (o *Repository) SetEnforceEula(v bool) {
	o.EnforceEula = &v
}

// GetGpgKeys returns the GpgKeys field value if set, zero value otherwise.
func (o *Repository) GetGpgKeys() []RepositoryGpgKey {
	if o == nil || IsNil(o.GpgKeys) {
		var ret []RepositoryGpgKey
		return ret
	}
	return o.GpgKeys
}

// GetGpgKeysOk returns a tuple with the GpgKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetGpgKeysOk() ([]RepositoryGpgKey, bool) {
	if o == nil || IsNil(o.GpgKeys) {
		return nil, false
	}
	return o.GpgKeys, true
}

// HasGpgKeys returns a boolean if a field has been set.
func (o *Repository) HasGpgKeys() bool {
	if o != nil && !IsNil(o.GpgKeys) {
		return true
	}

	return false
}

// SetGpgKeys gets a reference to the given []RepositoryGpgKey and assigns it to the GpgKeys field.
func (o *Repository) SetGpgKeys(v []RepositoryGpgKey) {
	o.GpgKeys = v
}

// GetIndexFiles returns the IndexFiles field value if set, zero value otherwise.
func (o *Repository) GetIndexFiles() bool {
	if o == nil || IsNil(o.IndexFiles) {
		var ret bool
		return ret
	}
	return *o.IndexFiles
}

// GetIndexFilesOk returns a tuple with the IndexFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIndexFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.IndexFiles) {
		return nil, false
	}
	return o.IndexFiles, true
}

// HasIndexFiles returns a boolean if a field has been set.
func (o *Repository) HasIndexFiles() bool {
	if o != nil && !IsNil(o.IndexFiles) {
		return true
	}

	return false
}

// SetIndexFiles gets a reference to the given bool and assigns it to the IndexFiles field.
func (o *Repository) SetIndexFiles(v bool) {
	o.IndexFiles = &v
}

// GetIsOpenSource returns the IsOpenSource field value if set, zero value otherwise.
func (o *Repository) GetIsOpenSource() bool {
	if o == nil || IsNil(o.IsOpenSource) {
		var ret bool
		return ret
	}
	return *o.IsOpenSource
}

// GetIsOpenSourceOk returns a tuple with the IsOpenSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsOpenSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOpenSource) {
		return nil, false
	}
	return o.IsOpenSource, true
}

// HasIsOpenSource returns a boolean if a field has been set.
func (o *Repository) HasIsOpenSource() bool {
	if o != nil && !IsNil(o.IsOpenSource) {
		return true
	}

	return false
}

// SetIsOpenSource gets a reference to the given bool and assigns it to the IsOpenSource field.
func (o *Repository) SetIsOpenSource(v bool) {
	o.IsOpenSource = &v
}

// GetIsPrivate returns the IsPrivate field value if set, zero value otherwise.
func (o *Repository) GetIsPrivate() bool {
	if o == nil || IsNil(o.IsPrivate) {
		var ret bool
		return ret
	}
	return *o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPrivate) {
		return nil, false
	}
	return o.IsPrivate, true
}

// HasIsPrivate returns a boolean if a field has been set.
func (o *Repository) HasIsPrivate() bool {
	if o != nil && !IsNil(o.IsPrivate) {
		return true
	}

	return false
}

// SetIsPrivate gets a reference to the given bool and assigns it to the IsPrivate field.
func (o *Repository) SetIsPrivate(v bool) {
	o.IsPrivate = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *Repository) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *Repository) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *Repository) SetIsPublic(v bool) {
	o.IsPublic = &v
}

// GetManageEntitlementsPrivilege returns the ManageEntitlementsPrivilege field value if set, zero value otherwise.
func (o *Repository) GetManageEntitlementsPrivilege() string {
	if o == nil || IsNil(o.ManageEntitlementsPrivilege) {
		var ret string
		return ret
	}
	return *o.ManageEntitlementsPrivilege
}

// GetManageEntitlementsPrivilegeOk returns a tuple with the ManageEntitlementsPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetManageEntitlementsPrivilegeOk() (*string, bool) {
	if o == nil || IsNil(o.ManageEntitlementsPrivilege) {
		return nil, false
	}
	return o.ManageEntitlementsPrivilege, true
}

// HasManageEntitlementsPrivilege returns a boolean if a field has been set.
func (o *Repository) HasManageEntitlementsPrivilege() bool {
	if o != nil && !IsNil(o.ManageEntitlementsPrivilege) {
		return true
	}

	return false
}

// SetManageEntitlementsPrivilege gets a reference to the given string and assigns it to the ManageEntitlementsPrivilege field.
func (o *Repository) SetManageEntitlementsPrivilege(v string) {
	o.ManageEntitlementsPrivilege = &v
}

// GetMoveOwn returns the MoveOwn field value if set, zero value otherwise.
func (o *Repository) GetMoveOwn() bool {
	if o == nil || IsNil(o.MoveOwn) {
		var ret bool
		return ret
	}
	return *o.MoveOwn
}

// GetMoveOwnOk returns a tuple with the MoveOwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetMoveOwnOk() (*bool, bool) {
	if o == nil || IsNil(o.MoveOwn) {
		return nil, false
	}
	return o.MoveOwn, true
}

// HasMoveOwn returns a boolean if a field has been set.
func (o *Repository) HasMoveOwn() bool {
	if o != nil && !IsNil(o.MoveOwn) {
		return true
	}

	return false
}

// SetMoveOwn gets a reference to the given bool and assigns it to the MoveOwn field.
func (o *Repository) SetMoveOwn(v bool) {
	o.MoveOwn = &v
}

// GetMovePackages returns the MovePackages field value if set, zero value otherwise.
func (o *Repository) GetMovePackages() string {
	if o == nil || IsNil(o.MovePackages) {
		var ret string
		return ret
	}
	return *o.MovePackages
}

// GetMovePackagesOk returns a tuple with the MovePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetMovePackagesOk() (*string, bool) {
	if o == nil || IsNil(o.MovePackages) {
		return nil, false
	}
	return o.MovePackages, true
}

// HasMovePackages returns a boolean if a field has been set.
func (o *Repository) HasMovePackages() bool {
	if o != nil && !IsNil(o.MovePackages) {
		return true
	}

	return false
}

// SetMovePackages gets a reference to the given string and assigns it to the MovePackages field.
func (o *Repository) SetMovePackages(v string) {
	o.MovePackages = &v
}

// GetName returns the Name field value
func (o *Repository) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Repository) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Repository) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *Repository) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *Repository) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *Repository) SetNamespace(v string) {
	o.Namespace = &v
}

// GetNamespaceUrl returns the NamespaceUrl field value if set, zero value otherwise.
func (o *Repository) GetNamespaceUrl() string {
	if o == nil || IsNil(o.NamespaceUrl) {
		var ret string
		return ret
	}
	return *o.NamespaceUrl
}

// GetNamespaceUrlOk returns a tuple with the NamespaceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNamespaceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceUrl) {
		return nil, false
	}
	return o.NamespaceUrl, true
}

// HasNamespaceUrl returns a boolean if a field has been set.
func (o *Repository) HasNamespaceUrl() bool {
	if o != nil && !IsNil(o.NamespaceUrl) {
		return true
	}

	return false
}

// SetNamespaceUrl gets a reference to the given string and assigns it to the NamespaceUrl field.
func (o *Repository) SetNamespaceUrl(v string) {
	o.NamespaceUrl = &v
}

// GetNumDownloads returns the NumDownloads field value if set, zero value otherwise.
func (o *Repository) GetNumDownloads() int64 {
	if o == nil || IsNil(o.NumDownloads) {
		var ret int64
		return ret
	}
	return *o.NumDownloads
}

// GetNumDownloadsOk returns a tuple with the NumDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNumDownloadsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumDownloads) {
		return nil, false
	}
	return o.NumDownloads, true
}

// HasNumDownloads returns a boolean if a field has been set.
func (o *Repository) HasNumDownloads() bool {
	if o != nil && !IsNil(o.NumDownloads) {
		return true
	}

	return false
}

// SetNumDownloads gets a reference to the given int64 and assigns it to the NumDownloads field.
func (o *Repository) SetNumDownloads(v int64) {
	o.NumDownloads = &v
}

// GetNumPolicyViolatedPackages returns the NumPolicyViolatedPackages field value if set, zero value otherwise.
func (o *Repository) GetNumPolicyViolatedPackages() int64 {
	if o == nil || IsNil(o.NumPolicyViolatedPackages) {
		var ret int64
		return ret
	}
	return *o.NumPolicyViolatedPackages
}

// GetNumPolicyViolatedPackagesOk returns a tuple with the NumPolicyViolatedPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNumPolicyViolatedPackagesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumPolicyViolatedPackages) {
		return nil, false
	}
	return o.NumPolicyViolatedPackages, true
}

// HasNumPolicyViolatedPackages returns a boolean if a field has been set.
func (o *Repository) HasNumPolicyViolatedPackages() bool {
	if o != nil && !IsNil(o.NumPolicyViolatedPackages) {
		return true
	}

	return false
}

// SetNumPolicyViolatedPackages gets a reference to the given int64 and assigns it to the NumPolicyViolatedPackages field.
func (o *Repository) SetNumPolicyViolatedPackages(v int64) {
	o.NumPolicyViolatedPackages = &v
}

// GetNumQuarantinedPackages returns the NumQuarantinedPackages field value if set, zero value otherwise.
func (o *Repository) GetNumQuarantinedPackages() int64 {
	if o == nil || IsNil(o.NumQuarantinedPackages) {
		var ret int64
		return ret
	}
	return *o.NumQuarantinedPackages
}

// GetNumQuarantinedPackagesOk returns a tuple with the NumQuarantinedPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNumQuarantinedPackagesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumQuarantinedPackages) {
		return nil, false
	}
	return o.NumQuarantinedPackages, true
}

// HasNumQuarantinedPackages returns a boolean if a field has been set.
func (o *Repository) HasNumQuarantinedPackages() bool {
	if o != nil && !IsNil(o.NumQuarantinedPackages) {
		return true
	}

	return false
}

// SetNumQuarantinedPackages gets a reference to the given int64 and assigns it to the NumQuarantinedPackages field.
func (o *Repository) SetNumQuarantinedPackages(v int64) {
	o.NumQuarantinedPackages = &v
}

// GetOpenSourceLicense returns the OpenSourceLicense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Repository) GetOpenSourceLicense() string {
	if o == nil || IsNil(o.OpenSourceLicense.Get()) {
		var ret string
		return ret
	}
	return *o.OpenSourceLicense.Get()
}

// GetOpenSourceLicenseOk returns a tuple with the OpenSourceLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Repository) GetOpenSourceLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenSourceLicense.Get(), o.OpenSourceLicense.IsSet()
}

// HasOpenSourceLicense returns a boolean if a field has been set.
func (o *Repository) HasOpenSourceLicense() bool {
	if o != nil && o.OpenSourceLicense.IsSet() {
		return true
	}

	return false
}

// SetOpenSourceLicense gets a reference to the given NullableString and assigns it to the OpenSourceLicense field.
func (o *Repository) SetOpenSourceLicense(v string) {
	o.OpenSourceLicense.Set(&v)
}

// SetOpenSourceLicenseNil sets the value for OpenSourceLicense to be an explicit nil
func (o *Repository) SetOpenSourceLicenseNil() {
	o.OpenSourceLicense.Set(nil)
}

// UnsetOpenSourceLicense ensures that no value is present for OpenSourceLicense, not even an explicit nil
func (o *Repository) UnsetOpenSourceLicense() {
	o.OpenSourceLicense.Unset()
}

// GetOpenSourceProjectUrl returns the OpenSourceProjectUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Repository) GetOpenSourceProjectUrl() string {
	if o == nil || IsNil(o.OpenSourceProjectUrl.Get()) {
		var ret string
		return ret
	}
	return *o.OpenSourceProjectUrl.Get()
}

// GetOpenSourceProjectUrlOk returns a tuple with the OpenSourceProjectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Repository) GetOpenSourceProjectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenSourceProjectUrl.Get(), o.OpenSourceProjectUrl.IsSet()
}

// HasOpenSourceProjectUrl returns a boolean if a field has been set.
func (o *Repository) HasOpenSourceProjectUrl() bool {
	if o != nil && o.OpenSourceProjectUrl.IsSet() {
		return true
	}

	return false
}

// SetOpenSourceProjectUrl gets a reference to the given NullableString and assigns it to the OpenSourceProjectUrl field.
func (o *Repository) SetOpenSourceProjectUrl(v string) {
	o.OpenSourceProjectUrl.Set(&v)
}

// SetOpenSourceProjectUrlNil sets the value for OpenSourceProjectUrl to be an explicit nil
func (o *Repository) SetOpenSourceProjectUrlNil() {
	o.OpenSourceProjectUrl.Set(nil)
}

// UnsetOpenSourceProjectUrl ensures that no value is present for OpenSourceProjectUrl, not even an explicit nil
func (o *Repository) UnsetOpenSourceProjectUrl() {
	o.OpenSourceProjectUrl.Unset()
}

// GetPackageCount returns the PackageCount field value if set, zero value otherwise.
func (o *Repository) GetPackageCount() int64 {
	if o == nil || IsNil(o.PackageCount) {
		var ret int64
		return ret
	}
	return *o.PackageCount
}

// GetPackageCountOk returns a tuple with the PackageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPackageCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PackageCount) {
		return nil, false
	}
	return o.PackageCount, true
}

// HasPackageCount returns a boolean if a field has been set.
func (o *Repository) HasPackageCount() bool {
	if o != nil && !IsNil(o.PackageCount) {
		return true
	}

	return false
}

// SetPackageCount gets a reference to the given int64 and assigns it to the PackageCount field.
func (o *Repository) SetPackageCount(v int64) {
	o.PackageCount = &v
}

// GetPackageGroupCount returns the PackageGroupCount field value if set, zero value otherwise.
func (o *Repository) GetPackageGroupCount() int64 {
	if o == nil || IsNil(o.PackageGroupCount) {
		var ret int64
		return ret
	}
	return *o.PackageGroupCount
}

// GetPackageGroupCountOk returns a tuple with the PackageGroupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPackageGroupCountOk() (*int64, bool) {
	if o == nil || IsNil(o.PackageGroupCount) {
		return nil, false
	}
	return o.PackageGroupCount, true
}

// HasPackageGroupCount returns a boolean if a field has been set.
func (o *Repository) HasPackageGroupCount() bool {
	if o != nil && !IsNil(o.PackageGroupCount) {
		return true
	}

	return false
}

// SetPackageGroupCount gets a reference to the given int64 and assigns it to the PackageGroupCount field.
func (o *Repository) SetPackageGroupCount(v int64) {
	o.PackageGroupCount = &v
}

// GetProxyNpmjs returns the ProxyNpmjs field value if set, zero value otherwise.
func (o *Repository) GetProxyNpmjs() bool {
	if o == nil || IsNil(o.ProxyNpmjs) {
		var ret bool
		return ret
	}
	return *o.ProxyNpmjs
}

// GetProxyNpmjsOk returns a tuple with the ProxyNpmjs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetProxyNpmjsOk() (*bool, bool) {
	if o == nil || IsNil(o.ProxyNpmjs) {
		return nil, false
	}
	return o.ProxyNpmjs, true
}

// HasProxyNpmjs returns a boolean if a field has been set.
func (o *Repository) HasProxyNpmjs() bool {
	if o != nil && !IsNil(o.ProxyNpmjs) {
		return true
	}

	return false
}

// SetProxyNpmjs gets a reference to the given bool and assigns it to the ProxyNpmjs field.
func (o *Repository) SetProxyNpmjs(v bool) {
	o.ProxyNpmjs = &v
}

// GetProxyPypi returns the ProxyPypi field value if set, zero value otherwise.
func (o *Repository) GetProxyPypi() bool {
	if o == nil || IsNil(o.ProxyPypi) {
		var ret bool
		return ret
	}
	return *o.ProxyPypi
}

// GetProxyPypiOk returns a tuple with the ProxyPypi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetProxyPypiOk() (*bool, bool) {
	if o == nil || IsNil(o.ProxyPypi) {
		return nil, false
	}
	return o.ProxyPypi, true
}

// HasProxyPypi returns a boolean if a field has been set.
func (o *Repository) HasProxyPypi() bool {
	if o != nil && !IsNil(o.ProxyPypi) {
		return true
	}

	return false
}

// SetProxyPypi gets a reference to the given bool and assigns it to the ProxyPypi field.
func (o *Repository) SetProxyPypi(v bool) {
	o.ProxyPypi = &v
}

// GetRawPackageIndexEnabled returns the RawPackageIndexEnabled field value if set, zero value otherwise.
func (o *Repository) GetRawPackageIndexEnabled() bool {
	if o == nil || IsNil(o.RawPackageIndexEnabled) {
		var ret bool
		return ret
	}
	return *o.RawPackageIndexEnabled
}

// GetRawPackageIndexEnabledOk returns a tuple with the RawPackageIndexEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRawPackageIndexEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RawPackageIndexEnabled) {
		return nil, false
	}
	return o.RawPackageIndexEnabled, true
}

// HasRawPackageIndexEnabled returns a boolean if a field has been set.
func (o *Repository) HasRawPackageIndexEnabled() bool {
	if o != nil && !IsNil(o.RawPackageIndexEnabled) {
		return true
	}

	return false
}

// SetRawPackageIndexEnabled gets a reference to the given bool and assigns it to the RawPackageIndexEnabled field.
func (o *Repository) SetRawPackageIndexEnabled(v bool) {
	o.RawPackageIndexEnabled = &v
}

// GetRawPackageIndexSignaturesEnabled returns the RawPackageIndexSignaturesEnabled field value if set, zero value otherwise.
func (o *Repository) GetRawPackageIndexSignaturesEnabled() bool {
	if o == nil || IsNil(o.RawPackageIndexSignaturesEnabled) {
		var ret bool
		return ret
	}
	return *o.RawPackageIndexSignaturesEnabled
}

// GetRawPackageIndexSignaturesEnabledOk returns a tuple with the RawPackageIndexSignaturesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRawPackageIndexSignaturesEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.RawPackageIndexSignaturesEnabled) {
		return nil, false
	}
	return o.RawPackageIndexSignaturesEnabled, true
}

// HasRawPackageIndexSignaturesEnabled returns a boolean if a field has been set.
func (o *Repository) HasRawPackageIndexSignaturesEnabled() bool {
	if o != nil && !IsNil(o.RawPackageIndexSignaturesEnabled) {
		return true
	}

	return false
}

// SetRawPackageIndexSignaturesEnabled gets a reference to the given bool and assigns it to the RawPackageIndexSignaturesEnabled field.
func (o *Repository) SetRawPackageIndexSignaturesEnabled(v bool) {
	o.RawPackageIndexSignaturesEnabled = &v
}

// GetReplacePackages returns the ReplacePackages field value if set, zero value otherwise.
func (o *Repository) GetReplacePackages() string {
	if o == nil || IsNil(o.ReplacePackages) {
		var ret string
		return ret
	}
	return *o.ReplacePackages
}

// GetReplacePackagesOk returns a tuple with the ReplacePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetReplacePackagesOk() (*string, bool) {
	if o == nil || IsNil(o.ReplacePackages) {
		return nil, false
	}
	return o.ReplacePackages, true
}

// HasReplacePackages returns a boolean if a field has been set.
func (o *Repository) HasReplacePackages() bool {
	if o != nil && !IsNil(o.ReplacePackages) {
		return true
	}

	return false
}

// SetReplacePackages gets a reference to the given string and assigns it to the ReplacePackages field.
func (o *Repository) SetReplacePackages(v string) {
	o.ReplacePackages = &v
}

// GetReplacePackagesByDefault returns the ReplacePackagesByDefault field value if set, zero value otherwise.
func (o *Repository) GetReplacePackagesByDefault() bool {
	if o == nil || IsNil(o.ReplacePackagesByDefault) {
		var ret bool
		return ret
	}
	return *o.ReplacePackagesByDefault
}

// GetReplacePackagesByDefaultOk returns a tuple with the ReplacePackagesByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetReplacePackagesByDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.ReplacePackagesByDefault) {
		return nil, false
	}
	return o.ReplacePackagesByDefault, true
}

// HasReplacePackagesByDefault returns a boolean if a field has been set.
func (o *Repository) HasReplacePackagesByDefault() bool {
	if o != nil && !IsNil(o.ReplacePackagesByDefault) {
		return true
	}

	return false
}

// SetReplacePackagesByDefault gets a reference to the given bool and assigns it to the ReplacePackagesByDefault field.
func (o *Repository) SetReplacePackagesByDefault(v bool) {
	o.ReplacePackagesByDefault = &v
}

// GetRepositoryType returns the RepositoryType field value if set, zero value otherwise.
func (o *Repository) GetRepositoryType() int64 {
	if o == nil || IsNil(o.RepositoryType) {
		var ret int64
		return ret
	}
	return *o.RepositoryType
}

// GetRepositoryTypeOk returns a tuple with the RepositoryType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRepositoryTypeOk() (*int64, bool) {
	if o == nil || IsNil(o.RepositoryType) {
		return nil, false
	}
	return o.RepositoryType, true
}

// HasRepositoryType returns a boolean if a field has been set.
func (o *Repository) HasRepositoryType() bool {
	if o != nil && !IsNil(o.RepositoryType) {
		return true
	}

	return false
}

// SetRepositoryType gets a reference to the given int64 and assigns it to the RepositoryType field.
func (o *Repository) SetRepositoryType(v int64) {
	o.RepositoryType = &v
}

// GetRepositoryTypeStr returns the RepositoryTypeStr field value if set, zero value otherwise.
func (o *Repository) GetRepositoryTypeStr() string {
	if o == nil || IsNil(o.RepositoryTypeStr) {
		var ret string
		return ret
	}
	return *o.RepositoryTypeStr
}

// GetRepositoryTypeStrOk returns a tuple with the RepositoryTypeStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRepositoryTypeStrOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryTypeStr) {
		return nil, false
	}
	return o.RepositoryTypeStr, true
}

// HasRepositoryTypeStr returns a boolean if a field has been set.
func (o *Repository) HasRepositoryTypeStr() bool {
	if o != nil && !IsNil(o.RepositoryTypeStr) {
		return true
	}

	return false
}

// SetRepositoryTypeStr gets a reference to the given string and assigns it to the RepositoryTypeStr field.
func (o *Repository) SetRepositoryTypeStr(v string) {
	o.RepositoryTypeStr = &v
}

// GetResyncOwn returns the ResyncOwn field value if set, zero value otherwise.
func (o *Repository) GetResyncOwn() bool {
	if o == nil || IsNil(o.ResyncOwn) {
		var ret bool
		return ret
	}
	return *o.ResyncOwn
}

// GetResyncOwnOk returns a tuple with the ResyncOwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetResyncOwnOk() (*bool, bool) {
	if o == nil || IsNil(o.ResyncOwn) {
		return nil, false
	}
	return o.ResyncOwn, true
}

// HasResyncOwn returns a boolean if a field has been set.
func (o *Repository) HasResyncOwn() bool {
	if o != nil && !IsNil(o.ResyncOwn) {
		return true
	}

	return false
}

// SetResyncOwn gets a reference to the given bool and assigns it to the ResyncOwn field.
func (o *Repository) SetResyncOwn(v bool) {
	o.ResyncOwn = &v
}

// GetResyncPackages returns the ResyncPackages field value if set, zero value otherwise.
func (o *Repository) GetResyncPackages() string {
	if o == nil || IsNil(o.ResyncPackages) {
		var ret string
		return ret
	}
	return *o.ResyncPackages
}

// GetResyncPackagesOk returns a tuple with the ResyncPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetResyncPackagesOk() (*string, bool) {
	if o == nil || IsNil(o.ResyncPackages) {
		return nil, false
	}
	return o.ResyncPackages, true
}

// HasResyncPackages returns a boolean if a field has been set.
func (o *Repository) HasResyncPackages() bool {
	if o != nil && !IsNil(o.ResyncPackages) {
		return true
	}

	return false
}

// SetResyncPackages gets a reference to the given string and assigns it to the ResyncPackages field.
func (o *Repository) SetResyncPackages(v string) {
	o.ResyncPackages = &v
}

// GetScanOwn returns the ScanOwn field value if set, zero value otherwise.
func (o *Repository) GetScanOwn() bool {
	if o == nil || IsNil(o.ScanOwn) {
		var ret bool
		return ret
	}
	return *o.ScanOwn
}

// GetScanOwnOk returns a tuple with the ScanOwn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetScanOwnOk() (*bool, bool) {
	if o == nil || IsNil(o.ScanOwn) {
		return nil, false
	}
	return o.ScanOwn, true
}

// HasScanOwn returns a boolean if a field has been set.
func (o *Repository) HasScanOwn() bool {
	if o != nil && !IsNil(o.ScanOwn) {
		return true
	}

	return false
}

// SetScanOwn gets a reference to the given bool and assigns it to the ScanOwn field.
func (o *Repository) SetScanOwn(v bool) {
	o.ScanOwn = &v
}

// GetScanPackages returns the ScanPackages field value if set, zero value otherwise.
func (o *Repository) GetScanPackages() string {
	if o == nil || IsNil(o.ScanPackages) {
		var ret string
		return ret
	}
	return *o.ScanPackages
}

// GetScanPackagesOk returns a tuple with the ScanPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetScanPackagesOk() (*string, bool) {
	if o == nil || IsNil(o.ScanPackages) {
		return nil, false
	}
	return o.ScanPackages, true
}

// HasScanPackages returns a boolean if a field has been set.
func (o *Repository) HasScanPackages() bool {
	if o != nil && !IsNil(o.ScanPackages) {
		return true
	}

	return false
}

// SetScanPackages gets a reference to the given string and assigns it to the ScanPackages field.
func (o *Repository) SetScanPackages(v string) {
	o.ScanPackages = &v
}

// GetSelfHtmlUrl returns the SelfHtmlUrl field value if set, zero value otherwise.
func (o *Repository) GetSelfHtmlUrl() string {
	if o == nil || IsNil(o.SelfHtmlUrl) {
		var ret string
		return ret
	}
	return *o.SelfHtmlUrl
}

// GetSelfHtmlUrlOk returns a tuple with the SelfHtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSelfHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SelfHtmlUrl) {
		return nil, false
	}
	return o.SelfHtmlUrl, true
}

// HasSelfHtmlUrl returns a boolean if a field has been set.
func (o *Repository) HasSelfHtmlUrl() bool {
	if o != nil && !IsNil(o.SelfHtmlUrl) {
		return true
	}

	return false
}

// SetSelfHtmlUrl gets a reference to the given string and assigns it to the SelfHtmlUrl field.
func (o *Repository) SetSelfHtmlUrl(v string) {
	o.SelfHtmlUrl = &v
}

// GetSelfUrl returns the SelfUrl field value if set, zero value otherwise.
func (o *Repository) GetSelfUrl() string {
	if o == nil || IsNil(o.SelfUrl) {
		var ret string
		return ret
	}
	return *o.SelfUrl
}

// GetSelfUrlOk returns a tuple with the SelfUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSelfUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SelfUrl) {
		return nil, false
	}
	return o.SelfUrl, true
}

// HasSelfUrl returns a boolean if a field has been set.
func (o *Repository) HasSelfUrl() bool {
	if o != nil && !IsNil(o.SelfUrl) {
		return true
	}

	return false
}

// SetSelfUrl gets a reference to the given string and assigns it to the SelfUrl field.
func (o *Repository) SetSelfUrl(v string) {
	o.SelfUrl = &v
}

// GetShowSetupAll returns the ShowSetupAll field value if set, zero value otherwise.
func (o *Repository) GetShowSetupAll() bool {
	if o == nil || IsNil(o.ShowSetupAll) {
		var ret bool
		return ret
	}
	return *o.ShowSetupAll
}

// GetShowSetupAllOk returns a tuple with the ShowSetupAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetShowSetupAllOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowSetupAll) {
		return nil, false
	}
	return o.ShowSetupAll, true
}

// HasShowSetupAll returns a boolean if a field has been set.
func (o *Repository) HasShowSetupAll() bool {
	if o != nil && !IsNil(o.ShowSetupAll) {
		return true
	}

	return false
}

// SetShowSetupAll gets a reference to the given bool and assigns it to the ShowSetupAll field.
func (o *Repository) SetShowSetupAll(v bool) {
	o.ShowSetupAll = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Repository) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Repository) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *Repository) SetSize(v int64) {
	o.Size = &v
}

// GetSizeStr returns the SizeStr field value if set, zero value otherwise.
func (o *Repository) GetSizeStr() string {
	if o == nil || IsNil(o.SizeStr) {
		var ret string
		return ret
	}
	return *o.SizeStr
}

// GetSizeStrOk returns a tuple with the SizeStr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSizeStrOk() (*string, bool) {
	if o == nil || IsNil(o.SizeStr) {
		return nil, false
	}
	return o.SizeStr, true
}

// HasSizeStr returns a boolean if a field has been set.
func (o *Repository) HasSizeStr() bool {
	if o != nil && !IsNil(o.SizeStr) {
		return true
	}

	return false
}

// SetSizeStr gets a reference to the given string and assigns it to the SizeStr field.
func (o *Repository) SetSizeStr(v string) {
	o.SizeStr = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *Repository) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *Repository) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *Repository) SetSlug(v string) {
	o.Slug = &v
}

// GetSlugPerm returns the SlugPerm field value if set, zero value otherwise.
func (o *Repository) GetSlugPerm() string {
	if o == nil || IsNil(o.SlugPerm) {
		var ret string
		return ret
	}
	return *o.SlugPerm
}

// GetSlugPermOk returns a tuple with the SlugPerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSlugPermOk() (*string, bool) {
	if o == nil || IsNil(o.SlugPerm) {
		return nil, false
	}
	return o.SlugPerm, true
}

// HasSlugPerm returns a boolean if a field has been set.
func (o *Repository) HasSlugPerm() bool {
	if o != nil && !IsNil(o.SlugPerm) {
		return true
	}

	return false
}

// SetSlugPerm gets a reference to the given string and assigns it to the SlugPerm field.
func (o *Repository) SetSlugPerm(v string) {
	o.SlugPerm = &v
}

// GetStorageRegion returns the StorageRegion field value if set, zero value otherwise.
func (o *Repository) GetStorageRegion() string {
	if o == nil || IsNil(o.StorageRegion) {
		var ret string
		return ret
	}
	return *o.StorageRegion
}

// GetStorageRegionOk returns a tuple with the StorageRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetStorageRegionOk() (*string, bool) {
	if o == nil || IsNil(o.StorageRegion) {
		return nil, false
	}
	return o.StorageRegion, true
}

// HasStorageRegion returns a boolean if a field has been set.
func (o *Repository) HasStorageRegion() bool {
	if o != nil && !IsNil(o.StorageRegion) {
		return true
	}

	return false
}

// SetStorageRegion gets a reference to the given string and assigns it to the StorageRegion field.
func (o *Repository) SetStorageRegion(v string) {
	o.StorageRegion = &v
}

// GetStrictNpmValidation returns the StrictNpmValidation field value if set, zero value otherwise.
func (o *Repository) GetStrictNpmValidation() bool {
	if o == nil || IsNil(o.StrictNpmValidation) {
		var ret bool
		return ret
	}
	return *o.StrictNpmValidation
}

// GetStrictNpmValidationOk returns a tuple with the StrictNpmValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetStrictNpmValidationOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictNpmValidation) {
		return nil, false
	}
	return o.StrictNpmValidation, true
}

// HasStrictNpmValidation returns a boolean if a field has been set.
func (o *Repository) HasStrictNpmValidation() bool {
	if o != nil && !IsNil(o.StrictNpmValidation) {
		return true
	}

	return false
}

// SetStrictNpmValidation gets a reference to the given bool and assigns it to the StrictNpmValidation field.
func (o *Repository) SetStrictNpmValidation(v bool) {
	o.StrictNpmValidation = &v
}

// GetTagPreReleasesAsLatest returns the TagPreReleasesAsLatest field value if set, zero value otherwise.
func (o *Repository) GetTagPreReleasesAsLatest() bool {
	if o == nil || IsNil(o.TagPreReleasesAsLatest) {
		var ret bool
		return ret
	}
	return *o.TagPreReleasesAsLatest
}

// GetTagPreReleasesAsLatestOk returns a tuple with the TagPreReleasesAsLatest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetTagPreReleasesAsLatestOk() (*bool, bool) {
	if o == nil || IsNil(o.TagPreReleasesAsLatest) {
		return nil, false
	}
	return o.TagPreReleasesAsLatest, true
}

// HasTagPreReleasesAsLatest returns a boolean if a field has been set.
func (o *Repository) HasTagPreReleasesAsLatest() bool {
	if o != nil && !IsNil(o.TagPreReleasesAsLatest) {
		return true
	}

	return false
}

// SetTagPreReleasesAsLatest gets a reference to the given bool and assigns it to the TagPreReleasesAsLatest field.
func (o *Repository) SetTagPreReleasesAsLatest(v bool) {
	o.TagPreReleasesAsLatest = &v
}

// GetUseDebianLabels returns the UseDebianLabels field value if set, zero value otherwise.
func (o *Repository) GetUseDebianLabels() bool {
	if o == nil || IsNil(o.UseDebianLabels) {
		var ret bool
		return ret
	}
	return *o.UseDebianLabels
}

// GetUseDebianLabelsOk returns a tuple with the UseDebianLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUseDebianLabelsOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDebianLabels) {
		return nil, false
	}
	return o.UseDebianLabels, true
}

// HasUseDebianLabels returns a boolean if a field has been set.
func (o *Repository) HasUseDebianLabels() bool {
	if o != nil && !IsNil(o.UseDebianLabels) {
		return true
	}

	return false
}

// SetUseDebianLabels gets a reference to the given bool and assigns it to the UseDebianLabels field.
func (o *Repository) SetUseDebianLabels(v bool) {
	o.UseDebianLabels = &v
}

// GetUseDefaultCargoUpstream returns the UseDefaultCargoUpstream field value if set, zero value otherwise.
func (o *Repository) GetUseDefaultCargoUpstream() bool {
	if o == nil || IsNil(o.UseDefaultCargoUpstream) {
		var ret bool
		return ret
	}
	return *o.UseDefaultCargoUpstream
}

// GetUseDefaultCargoUpstreamOk returns a tuple with the UseDefaultCargoUpstream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUseDefaultCargoUpstreamOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefaultCargoUpstream) {
		return nil, false
	}
	return o.UseDefaultCargoUpstream, true
}

// HasUseDefaultCargoUpstream returns a boolean if a field has been set.
func (o *Repository) HasUseDefaultCargoUpstream() bool {
	if o != nil && !IsNil(o.UseDefaultCargoUpstream) {
		return true
	}

	return false
}

// SetUseDefaultCargoUpstream gets a reference to the given bool and assigns it to the UseDefaultCargoUpstream field.
func (o *Repository) SetUseDefaultCargoUpstream(v bool) {
	o.UseDefaultCargoUpstream = &v
}

// GetUseEntitlementsPrivilege returns the UseEntitlementsPrivilege field value if set, zero value otherwise.
func (o *Repository) GetUseEntitlementsPrivilege() string {
	if o == nil || IsNil(o.UseEntitlementsPrivilege) {
		var ret string
		return ret
	}
	return *o.UseEntitlementsPrivilege
}

// GetUseEntitlementsPrivilegeOk returns a tuple with the UseEntitlementsPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUseEntitlementsPrivilegeOk() (*string, bool) {
	if o == nil || IsNil(o.UseEntitlementsPrivilege) {
		return nil, false
	}
	return o.UseEntitlementsPrivilege, true
}

// HasUseEntitlementsPrivilege returns a boolean if a field has been set.
func (o *Repository) HasUseEntitlementsPrivilege() bool {
	if o != nil && !IsNil(o.UseEntitlementsPrivilege) {
		return true
	}

	return false
}

// SetUseEntitlementsPrivilege gets a reference to the given string and assigns it to the UseEntitlementsPrivilege field.
func (o *Repository) SetUseEntitlementsPrivilege(v string) {
	o.UseEntitlementsPrivilege = &v
}

// GetUseNoarchPackages returns the UseNoarchPackages field value if set, zero value otherwise.
func (o *Repository) GetUseNoarchPackages() bool {
	if o == nil || IsNil(o.UseNoarchPackages) {
		var ret bool
		return ret
	}
	return *o.UseNoarchPackages
}

// GetUseNoarchPackagesOk returns a tuple with the UseNoarchPackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUseNoarchPackagesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseNoarchPackages) {
		return nil, false
	}
	return o.UseNoarchPackages, true
}

// HasUseNoarchPackages returns a boolean if a field has been set.
func (o *Repository) HasUseNoarchPackages() bool {
	if o != nil && !IsNil(o.UseNoarchPackages) {
		return true
	}

	return false
}

// SetUseNoarchPackages gets a reference to the given bool and assigns it to the UseNoarchPackages field.
func (o *Repository) SetUseNoarchPackages(v bool) {
	o.UseNoarchPackages = &v
}

// GetUseSourcePackages returns the UseSourcePackages field value if set, zero value otherwise.
func (o *Repository) GetUseSourcePackages() bool {
	if o == nil || IsNil(o.UseSourcePackages) {
		var ret bool
		return ret
	}
	return *o.UseSourcePackages
}

// GetUseSourcePackagesOk returns a tuple with the UseSourcePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUseSourcePackagesOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSourcePackages) {
		return nil, false
	}
	return o.UseSourcePackages, true
}

// HasUseSourcePackages returns a boolean if a field has been set.
func (o *Repository) HasUseSourcePackages() bool {
	if o != nil && !IsNil(o.UseSourcePackages) {
		return true
	}

	return false
}

// SetUseSourcePackages gets a reference to the given bool and assigns it to the UseSourcePackages field.
func (o *Repository) SetUseSourcePackages(v bool) {
	o.UseSourcePackages = &v
}

// GetUseVulnerabilityScanning returns the UseVulnerabilityScanning field value if set, zero value otherwise.
func (o *Repository) GetUseVulnerabilityScanning() bool {
	if o == nil || IsNil(o.UseVulnerabilityScanning) {
		var ret bool
		return ret
	}
	return *o.UseVulnerabilityScanning
}

// GetUseVulnerabilityScanningOk returns a tuple with the UseVulnerabilityScanning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUseVulnerabilityScanningOk() (*bool, bool) {
	if o == nil || IsNil(o.UseVulnerabilityScanning) {
		return nil, false
	}
	return o.UseVulnerabilityScanning, true
}

// HasUseVulnerabilityScanning returns a boolean if a field has been set.
func (o *Repository) HasUseVulnerabilityScanning() bool {
	if o != nil && !IsNil(o.UseVulnerabilityScanning) {
		return true
	}

	return false
}

// SetUseVulnerabilityScanning gets a reference to the given bool and assigns it to the UseVulnerabilityScanning field.
func (o *Repository) SetUseVulnerabilityScanning(v bool) {
	o.UseVulnerabilityScanning = &v
}

// GetUserEntitlementsEnabled returns the UserEntitlementsEnabled field value if set, zero value otherwise.
func (o *Repository) GetUserEntitlementsEnabled() bool {
	if o == nil || IsNil(o.UserEntitlementsEnabled) {
		var ret bool
		return ret
	}
	return *o.UserEntitlementsEnabled
}

// GetUserEntitlementsEnabledOk returns a tuple with the UserEntitlementsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUserEntitlementsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.UserEntitlementsEnabled) {
		return nil, false
	}
	return o.UserEntitlementsEnabled, true
}

// HasUserEntitlementsEnabled returns a boolean if a field has been set.
func (o *Repository) HasUserEntitlementsEnabled() bool {
	if o != nil && !IsNil(o.UserEntitlementsEnabled) {
		return true
	}

	return false
}

// SetUserEntitlementsEnabled gets a reference to the given bool and assigns it to the UserEntitlementsEnabled field.
func (o *Repository) SetUserEntitlementsEnabled(v bool) {
	o.UserEntitlementsEnabled = &v
}

// GetViewStatistics returns the ViewStatistics field value if set, zero value otherwise.
func (o *Repository) GetViewStatistics() string {
	if o == nil || IsNil(o.ViewStatistics) {
		var ret string
		return ret
	}
	return *o.ViewStatistics
}

// GetViewStatisticsOk returns a tuple with the ViewStatistics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetViewStatisticsOk() (*string, bool) {
	if o == nil || IsNil(o.ViewStatistics) {
		return nil, false
	}
	return o.ViewStatistics, true
}

// HasViewStatistics returns a boolean if a field has been set.
func (o *Repository) HasViewStatistics() bool {
	if o != nil && !IsNil(o.ViewStatistics) {
		return true
	}

	return false
}

// SetViewStatistics gets a reference to the given string and assigns it to the ViewStatistics field.
func (o *Repository) SetViewStatistics(v string) {
	o.ViewStatistics = &v
}

func (o Repository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Repository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CdnUrl.IsSet() {
		toSerialize["cdn_url"] = o.CdnUrl.Get()
	}
	if !IsNil(o.ContentKind) {
		toSerialize["content_kind"] = o.ContentKind
	}
	if !IsNil(o.ContextualAuthRealm) {
		toSerialize["contextual_auth_realm"] = o.ContextualAuthRealm
	}
	if !IsNil(o.CopyOwn) {
		toSerialize["copy_own"] = o.CopyOwn
	}
	if !IsNil(o.CopyPackages) {
		toSerialize["copy_packages"] = o.CopyPackages
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DefaultPrivilege) {
		toSerialize["default_privilege"] = o.DefaultPrivilege
	}
	if !IsNil(o.DeleteOwn) {
		toSerialize["delete_own"] = o.DeleteOwn
	}
	if !IsNil(o.DeletePackages) {
		toSerialize["delete_packages"] = o.DeletePackages
	}
	if o.DeletedAt.IsSet() {
		toSerialize["deleted_at"] = o.DeletedAt.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Distributes) {
		toSerialize["distributes"] = o.Distributes
	}
	if !IsNil(o.DockerRefreshTokensEnabled) {
		toSerialize["docker_refresh_tokens_enabled"] = o.DockerRefreshTokensEnabled
	}
	if !IsNil(o.EcdsaKeys) {
		toSerialize["ecdsa_keys"] = o.EcdsaKeys
	}
	if !IsNil(o.EnforceEula) {
		toSerialize["enforce_eula"] = o.EnforceEula
	}
	if !IsNil(o.GpgKeys) {
		toSerialize["gpg_keys"] = o.GpgKeys
	}
	if !IsNil(o.IndexFiles) {
		toSerialize["index_files"] = o.IndexFiles
	}
	if !IsNil(o.IsOpenSource) {
		toSerialize["is_open_source"] = o.IsOpenSource
	}
	if !IsNil(o.IsPrivate) {
		toSerialize["is_private"] = o.IsPrivate
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}
	if !IsNil(o.ManageEntitlementsPrivilege) {
		toSerialize["manage_entitlements_privilege"] = o.ManageEntitlementsPrivilege
	}
	if !IsNil(o.MoveOwn) {
		toSerialize["move_own"] = o.MoveOwn
	}
	if !IsNil(o.MovePackages) {
		toSerialize["move_packages"] = o.MovePackages
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.NamespaceUrl) {
		toSerialize["namespace_url"] = o.NamespaceUrl
	}
	if !IsNil(o.NumDownloads) {
		toSerialize["num_downloads"] = o.NumDownloads
	}
	if !IsNil(o.NumPolicyViolatedPackages) {
		toSerialize["num_policy_violated_packages"] = o.NumPolicyViolatedPackages
	}
	if !IsNil(o.NumQuarantinedPackages) {
		toSerialize["num_quarantined_packages"] = o.NumQuarantinedPackages
	}
	if o.OpenSourceLicense.IsSet() {
		toSerialize["open_source_license"] = o.OpenSourceLicense.Get()
	}
	if o.OpenSourceProjectUrl.IsSet() {
		toSerialize["open_source_project_url"] = o.OpenSourceProjectUrl.Get()
	}
	if !IsNil(o.PackageCount) {
		toSerialize["package_count"] = o.PackageCount
	}
	if !IsNil(o.PackageGroupCount) {
		toSerialize["package_group_count"] = o.PackageGroupCount
	}
	if !IsNil(o.ProxyNpmjs) {
		toSerialize["proxy_npmjs"] = o.ProxyNpmjs
	}
	if !IsNil(o.ProxyPypi) {
		toSerialize["proxy_pypi"] = o.ProxyPypi
	}
	if !IsNil(o.RawPackageIndexEnabled) {
		toSerialize["raw_package_index_enabled"] = o.RawPackageIndexEnabled
	}
	if !IsNil(o.RawPackageIndexSignaturesEnabled) {
		toSerialize["raw_package_index_signatures_enabled"] = o.RawPackageIndexSignaturesEnabled
	}
	if !IsNil(o.ReplacePackages) {
		toSerialize["replace_packages"] = o.ReplacePackages
	}
	if !IsNil(o.ReplacePackagesByDefault) {
		toSerialize["replace_packages_by_default"] = o.ReplacePackagesByDefault
	}
	if !IsNil(o.RepositoryType) {
		toSerialize["repository_type"] = o.RepositoryType
	}
	if !IsNil(o.RepositoryTypeStr) {
		toSerialize["repository_type_str"] = o.RepositoryTypeStr
	}
	if !IsNil(o.ResyncOwn) {
		toSerialize["resync_own"] = o.ResyncOwn
	}
	if !IsNil(o.ResyncPackages) {
		toSerialize["resync_packages"] = o.ResyncPackages
	}
	if !IsNil(o.ScanOwn) {
		toSerialize["scan_own"] = o.ScanOwn
	}
	if !IsNil(o.ScanPackages) {
		toSerialize["scan_packages"] = o.ScanPackages
	}
	if !IsNil(o.SelfHtmlUrl) {
		toSerialize["self_html_url"] = o.SelfHtmlUrl
	}
	if !IsNil(o.SelfUrl) {
		toSerialize["self_url"] = o.SelfUrl
	}
	if !IsNil(o.ShowSetupAll) {
		toSerialize["show_setup_all"] = o.ShowSetupAll
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.SizeStr) {
		toSerialize["size_str"] = o.SizeStr
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.SlugPerm) {
		toSerialize["slug_perm"] = o.SlugPerm
	}
	if !IsNil(o.StorageRegion) {
		toSerialize["storage_region"] = o.StorageRegion
	}
	if !IsNil(o.StrictNpmValidation) {
		toSerialize["strict_npm_validation"] = o.StrictNpmValidation
	}
	if !IsNil(o.TagPreReleasesAsLatest) {
		toSerialize["tag_pre_releases_as_latest"] = o.TagPreReleasesAsLatest
	}
	if !IsNil(o.UseDebianLabels) {
		toSerialize["use_debian_labels"] = o.UseDebianLabels
	}
	if !IsNil(o.UseDefaultCargoUpstream) {
		toSerialize["use_default_cargo_upstream"] = o.UseDefaultCargoUpstream
	}
	if !IsNil(o.UseEntitlementsPrivilege) {
		toSerialize["use_entitlements_privilege"] = o.UseEntitlementsPrivilege
	}
	if !IsNil(o.UseNoarchPackages) {
		toSerialize["use_noarch_packages"] = o.UseNoarchPackages
	}
	if !IsNil(o.UseSourcePackages) {
		toSerialize["use_source_packages"] = o.UseSourcePackages
	}
	if !IsNil(o.UseVulnerabilityScanning) {
		toSerialize["use_vulnerability_scanning"] = o.UseVulnerabilityScanning
	}
	if !IsNil(o.UserEntitlementsEnabled) {
		toSerialize["user_entitlements_enabled"] = o.UserEntitlementsEnabled
	}
	if !IsNil(o.ViewStatistics) {
		toSerialize["view_statistics"] = o.ViewStatistics
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Repository) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRepository := _Repository{}

	err = json.Unmarshal(data, &varRepository)

	if err != nil {
		return err
	}

	*o = Repository(varRepository)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cdn_url")
		delete(additionalProperties, "content_kind")
		delete(additionalProperties, "contextual_auth_realm")
		delete(additionalProperties, "copy_own")
		delete(additionalProperties, "copy_packages")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "default_privilege")
		delete(additionalProperties, "delete_own")
		delete(additionalProperties, "delete_packages")
		delete(additionalProperties, "deleted_at")
		delete(additionalProperties, "description")
		delete(additionalProperties, "distributes")
		delete(additionalProperties, "docker_refresh_tokens_enabled")
		delete(additionalProperties, "ecdsa_keys")
		delete(additionalProperties, "enforce_eula")
		delete(additionalProperties, "gpg_keys")
		delete(additionalProperties, "index_files")
		delete(additionalProperties, "is_open_source")
		delete(additionalProperties, "is_private")
		delete(additionalProperties, "is_public")
		delete(additionalProperties, "manage_entitlements_privilege")
		delete(additionalProperties, "move_own")
		delete(additionalProperties, "move_packages")
		delete(additionalProperties, "name")
		delete(additionalProperties, "namespace")
		delete(additionalProperties, "namespace_url")
		delete(additionalProperties, "num_downloads")
		delete(additionalProperties, "num_policy_violated_packages")
		delete(additionalProperties, "num_quarantined_packages")
		delete(additionalProperties, "open_source_license")
		delete(additionalProperties, "open_source_project_url")
		delete(additionalProperties, "package_count")
		delete(additionalProperties, "package_group_count")
		delete(additionalProperties, "proxy_npmjs")
		delete(additionalProperties, "proxy_pypi")
		delete(additionalProperties, "raw_package_index_enabled")
		delete(additionalProperties, "raw_package_index_signatures_enabled")
		delete(additionalProperties, "replace_packages")
		delete(additionalProperties, "replace_packages_by_default")
		delete(additionalProperties, "repository_type")
		delete(additionalProperties, "repository_type_str")
		delete(additionalProperties, "resync_own")
		delete(additionalProperties, "resync_packages")
		delete(additionalProperties, "scan_own")
		delete(additionalProperties, "scan_packages")
		delete(additionalProperties, "self_html_url")
		delete(additionalProperties, "self_url")
		delete(additionalProperties, "show_setup_all")
		delete(additionalProperties, "size")
		delete(additionalProperties, "size_str")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "slug_perm")
		delete(additionalProperties, "storage_region")
		delete(additionalProperties, "strict_npm_validation")
		delete(additionalProperties, "tag_pre_releases_as_latest")
		delete(additionalProperties, "use_debian_labels")
		delete(additionalProperties, "use_default_cargo_upstream")
		delete(additionalProperties, "use_entitlements_privilege")
		delete(additionalProperties, "use_noarch_packages")
		delete(additionalProperties, "use_source_packages")
		delete(additionalProperties, "use_vulnerability_scanning")
		delete(additionalProperties, "user_entitlements_enabled")
		delete(additionalProperties, "view_statistics")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRepository struct {
	value *Repository
	isSet bool
}

func (v NullableRepository) Get() *Repository {
	return v.value
}

func (v *NullableRepository) Set(val *Repository) {
	v.value = val
	v.isSet = true
}

func (v NullableRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepository(val *Repository) *NullableRepository {
	return &NullableRepository{value: val, isSet: true}
}

func (v NullableRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
