/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.181.6
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// FormatResponse struct for FormatResponse
type FormatResponse struct {
	// Description of the package format
	Description string `json:"description"`
	// The distributions supported by this package format
	Distributions []Distribution `json:"distributions,omitempty"`
	// A non-exhaustive list of extensions supported
	Extensions []string `json:"extensions"`
	// Name for the package format
	Name string `json:"name"`
	// If true the package format is a premium-only feature
	Premium bool `json:"premium"`
	// The minimum plan id required for this package format
	PremiumPlanId NullableString `json:"premium_plan_id,omitempty"`
	// The minimum plan name required for this package format
	PremiumPlanName NullableString `json:"premium_plan_name,omitempty"`
	// Slug for the package format
	Slug     string        `json:"slug"`
	Supports FormatSupport `json:"supports"`
}

// NewFormatResponse instantiates a new FormatResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormatResponse(description string, extensions []string, name string, premium bool, slug string, supports FormatSupport) *FormatResponse {
	this := FormatResponse{}
	this.Description = description
	this.Extensions = extensions
	this.Name = name
	this.Premium = premium
	this.Slug = slug
	this.Supports = supports
	return &this
}

// NewFormatResponseWithDefaults instantiates a new FormatResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormatResponseWithDefaults() *FormatResponse {
	this := FormatResponse{}
	return &this
}

// GetDescription returns the Description field value
func (o *FormatResponse) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FormatResponse) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FormatResponse) SetDescription(v string) {
	o.Description = v
}

// GetDistributions returns the Distributions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormatResponse) GetDistributions() []Distribution {
	if o == nil {
		var ret []Distribution
		return ret
	}
	return o.Distributions
}

// GetDistributionsOk returns a tuple with the Distributions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormatResponse) GetDistributionsOk() ([]Distribution, bool) {
	if o == nil || isNil(o.Distributions) {
		return nil, false
	}
	return o.Distributions, true
}

// HasDistributions returns a boolean if a field has been set.
func (o *FormatResponse) HasDistributions() bool {
	if o != nil && isNil(o.Distributions) {
		return true
	}

	return false
}

// SetDistributions gets a reference to the given []Distribution and assigns it to the Distributions field.
func (o *FormatResponse) SetDistributions(v []Distribution) {
	o.Distributions = v
}

// GetExtensions returns the Extensions field value
func (o *FormatResponse) GetExtensions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value
// and a boolean to check if the value has been set.
func (o *FormatResponse) GetExtensionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extensions, true
}

// SetExtensions sets field value
func (o *FormatResponse) SetExtensions(v []string) {
	o.Extensions = v
}

// GetName returns the Name field value
func (o *FormatResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FormatResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FormatResponse) SetName(v string) {
	o.Name = v
}

// GetPremium returns the Premium field value
func (o *FormatResponse) GetPremium() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Premium
}

// GetPremiumOk returns a tuple with the Premium field value
// and a boolean to check if the value has been set.
func (o *FormatResponse) GetPremiumOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Premium, true
}

// SetPremium sets field value
func (o *FormatResponse) SetPremium(v bool) {
	o.Premium = v
}

// GetPremiumPlanId returns the PremiumPlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormatResponse) GetPremiumPlanId() string {
	if o == nil || isNil(o.PremiumPlanId.Get()) {
		var ret string
		return ret
	}
	return *o.PremiumPlanId.Get()
}

// GetPremiumPlanIdOk returns a tuple with the PremiumPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormatResponse) GetPremiumPlanIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PremiumPlanId.Get(), o.PremiumPlanId.IsSet()
}

// HasPremiumPlanId returns a boolean if a field has been set.
func (o *FormatResponse) HasPremiumPlanId() bool {
	if o != nil && o.PremiumPlanId.IsSet() {
		return true
	}

	return false
}

// SetPremiumPlanId gets a reference to the given NullableString and assigns it to the PremiumPlanId field.
func (o *FormatResponse) SetPremiumPlanId(v string) {
	o.PremiumPlanId.Set(&v)
}

// SetPremiumPlanIdNil sets the value for PremiumPlanId to be an explicit nil
func (o *FormatResponse) SetPremiumPlanIdNil() {
	o.PremiumPlanId.Set(nil)
}

// UnsetPremiumPlanId ensures that no value is present for PremiumPlanId, not even an explicit nil
func (o *FormatResponse) UnsetPremiumPlanId() {
	o.PremiumPlanId.Unset()
}

// GetPremiumPlanName returns the PremiumPlanName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormatResponse) GetPremiumPlanName() string {
	if o == nil || isNil(o.PremiumPlanName.Get()) {
		var ret string
		return ret
	}
	return *o.PremiumPlanName.Get()
}

// GetPremiumPlanNameOk returns a tuple with the PremiumPlanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormatResponse) GetPremiumPlanNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PremiumPlanName.Get(), o.PremiumPlanName.IsSet()
}

// HasPremiumPlanName returns a boolean if a field has been set.
func (o *FormatResponse) HasPremiumPlanName() bool {
	if o != nil && o.PremiumPlanName.IsSet() {
		return true
	}

	return false
}

// SetPremiumPlanName gets a reference to the given NullableString and assigns it to the PremiumPlanName field.
func (o *FormatResponse) SetPremiumPlanName(v string) {
	o.PremiumPlanName.Set(&v)
}

// SetPremiumPlanNameNil sets the value for PremiumPlanName to be an explicit nil
func (o *FormatResponse) SetPremiumPlanNameNil() {
	o.PremiumPlanName.Set(nil)
}

// UnsetPremiumPlanName ensures that no value is present for PremiumPlanName, not even an explicit nil
func (o *FormatResponse) UnsetPremiumPlanName() {
	o.PremiumPlanName.Unset()
}

// GetSlug returns the Slug field value
func (o *FormatResponse) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *FormatResponse) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *FormatResponse) SetSlug(v string) {
	o.Slug = v
}

// GetSupports returns the Supports field value
func (o *FormatResponse) GetSupports() FormatSupport {
	if o == nil {
		var ret FormatSupport
		return ret
	}

	return o.Supports
}

// GetSupportsOk returns a tuple with the Supports field value
// and a boolean to check if the value has been set.
func (o *FormatResponse) GetSupportsOk() (*FormatSupport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supports, true
}

// SetSupports sets field value
func (o *FormatResponse) SetSupports(v FormatSupport) {
	o.Supports = v
}

func (o FormatResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Distributions != nil {
		toSerialize["distributions"] = o.Distributions
	}
	if true {
		toSerialize["extensions"] = o.Extensions
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["premium"] = o.Premium
	}
	if o.PremiumPlanId.IsSet() {
		toSerialize["premium_plan_id"] = o.PremiumPlanId.Get()
	}
	if o.PremiumPlanName.IsSet() {
		toSerialize["premium_plan_name"] = o.PremiumPlanName.Get()
	}
	if true {
		toSerialize["slug"] = o.Slug
	}
	if true {
		toSerialize["supports"] = o.Supports
	}
	return json.Marshal(toSerialize)
}

type NullableFormatResponse struct {
	value *FormatResponse
	isSet bool
}

func (v NullableFormatResponse) Get() *FormatResponse {
	return v.value
}

func (v *NullableFormatResponse) Set(val *FormatResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFormatResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFormatResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormatResponse(val *FormatResponse) *NullableFormatResponse {
	return &NullableFormatResponse{value: val, isSet: true}
}

func (v NullableFormatResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormatResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
