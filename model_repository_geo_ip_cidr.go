/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.247.7
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
)

// RepositoryGeoIPCidr struct for RepositoryGeoIPCidr
type RepositoryGeoIPCidr struct {
	// The allowed CIDRs for this repository
	Allow []string `json:"allow"`
	// The denied CIDRs for this repository
	Deny []string `json:"deny"`
}

// NewRepositoryGeoIPCidr instantiates a new RepositoryGeoIPCidr object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryGeoIPCidr(allow []string, deny []string) *RepositoryGeoIPCidr {
	this := RepositoryGeoIPCidr{}
	this.Allow = allow
	this.Deny = deny
	return &this
}

// NewRepositoryGeoIPCidrWithDefaults instantiates a new RepositoryGeoIPCidr object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryGeoIPCidrWithDefaults() *RepositoryGeoIPCidr {
	this := RepositoryGeoIPCidr{}
	return &this
}

// GetAllow returns the Allow field value
func (o *RepositoryGeoIPCidr) GetAllow() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Allow
}

// GetAllowOk returns a tuple with the Allow field value
// and a boolean to check if the value has been set.
func (o *RepositoryGeoIPCidr) GetAllowOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Allow, true
}

// SetAllow sets field value
func (o *RepositoryGeoIPCidr) SetAllow(v []string) {
	o.Allow = v
}

// GetDeny returns the Deny field value
func (o *RepositoryGeoIPCidr) GetDeny() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Deny
}

// GetDenyOk returns a tuple with the Deny field value
// and a boolean to check if the value has been set.
func (o *RepositoryGeoIPCidr) GetDenyOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Deny, true
}

// SetDeny sets field value
func (o *RepositoryGeoIPCidr) SetDeny(v []string) {
	o.Deny = v
}

func (o RepositoryGeoIPCidr) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["allow"] = o.Allow
	}
	if true {
		toSerialize["deny"] = o.Deny
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryGeoIPCidr struct {
	value *RepositoryGeoIPCidr
	isSet bool
}

func (v NullableRepositoryGeoIPCidr) Get() *RepositoryGeoIPCidr {
	return v.value
}

func (v *NullableRepositoryGeoIPCidr) Set(val *RepositoryGeoIPCidr) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryGeoIPCidr) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryGeoIPCidr) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryGeoIPCidr(val *RepositoryGeoIPCidr) *NullableRepositoryGeoIPCidr {
	return &NullableRepositoryGeoIPCidr{value: val, isSet: true}
}

func (v NullableRepositoryGeoIPCidr) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryGeoIPCidr) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
