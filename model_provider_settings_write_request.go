/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.768.2
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
)

// checks if the ProviderSettingsWriteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderSettingsWriteRequest{}

// ProviderSettingsWriteRequest struct for ProviderSettingsWriteRequest
type ProviderSettingsWriteRequest struct {
	// The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.
	Claims map[string]interface{} `json:"claims"`
	// The dynamic mappings of `mapping_claim` values to service accounts. Cannot be provided if `service_accounts` is also set.  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.
	DynamicMappings []DynamicMapping `json:"dynamic_mappings,omitempty"`
	// Whether the provider settings should be used for incoming OIDC requests.
	Enabled bool `json:"enabled"`
	// The OIDC claim to use for mapping to service accounts in dynamic_mappings. Cannot be provided if `service_accounts` is also set.  Note: This field and the dynamic mappings feature are still in early access. Breaking changes are possible as we receive feedback on this feature.
	MappingClaim NullableString `json:"mapping_claim,omitempty"`
	// The name of the provider settings are being configured for
	Name string `json:"name"`
	// The URL from the provider that serves as the base for the OpenID configuration. For example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/
	ProviderUrl string `json:"provider_url"`
	// The service accounts associated with these provider settings. Cannot be provided if `mapping_claim` or `dynamic_mappings` are specified.
	ServiceAccounts      []string `json:"service_accounts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProviderSettingsWriteRequest ProviderSettingsWriteRequest

// NewProviderSettingsWriteRequest instantiates a new ProviderSettingsWriteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderSettingsWriteRequest(claims map[string]interface{}, enabled bool, name string, providerUrl string) *ProviderSettingsWriteRequest {
	this := ProviderSettingsWriteRequest{}
	this.Claims = claims
	this.Enabled = enabled
	this.Name = name
	this.ProviderUrl = providerUrl
	return &this
}

// NewProviderSettingsWriteRequestWithDefaults instantiates a new ProviderSettingsWriteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderSettingsWriteRequestWithDefaults() *ProviderSettingsWriteRequest {
	this := ProviderSettingsWriteRequest{}
	return &this
}

// GetClaims returns the Claims field value
func (o *ProviderSettingsWriteRequest) GetClaims() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value
// and a boolean to check if the value has been set.
func (o *ProviderSettingsWriteRequest) GetClaimsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Claims, true
}

// SetClaims sets field value
func (o *ProviderSettingsWriteRequest) SetClaims(v map[string]interface{}) {
	o.Claims = v
}

// GetDynamicMappings returns the DynamicMappings field value if set, zero value otherwise.
func (o *ProviderSettingsWriteRequest) GetDynamicMappings() []DynamicMapping {
	if o == nil || IsNil(o.DynamicMappings) {
		var ret []DynamicMapping
		return ret
	}
	return o.DynamicMappings
}

// GetDynamicMappingsOk returns a tuple with the DynamicMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderSettingsWriteRequest) GetDynamicMappingsOk() ([]DynamicMapping, bool) {
	if o == nil || IsNil(o.DynamicMappings) {
		return nil, false
	}
	return o.DynamicMappings, true
}

// HasDynamicMappings returns a boolean if a field has been set.
func (o *ProviderSettingsWriteRequest) HasDynamicMappings() bool {
	if o != nil && !IsNil(o.DynamicMappings) {
		return true
	}

	return false
}

// SetDynamicMappings gets a reference to the given []DynamicMapping and assigns it to the DynamicMappings field.
func (o *ProviderSettingsWriteRequest) SetDynamicMappings(v []DynamicMapping) {
	o.DynamicMappings = v
}

// GetEnabled returns the Enabled field value
func (o *ProviderSettingsWriteRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ProviderSettingsWriteRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ProviderSettingsWriteRequest) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMappingClaim returns the MappingClaim field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProviderSettingsWriteRequest) GetMappingClaim() string {
	if o == nil || IsNil(o.MappingClaim.Get()) {
		var ret string
		return ret
	}
	return *o.MappingClaim.Get()
}

// GetMappingClaimOk returns a tuple with the MappingClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProviderSettingsWriteRequest) GetMappingClaimOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MappingClaim.Get(), o.MappingClaim.IsSet()
}

// HasMappingClaim returns a boolean if a field has been set.
func (o *ProviderSettingsWriteRequest) HasMappingClaim() bool {
	if o != nil && o.MappingClaim.IsSet() {
		return true
	}

	return false
}

// SetMappingClaim gets a reference to the given NullableString and assigns it to the MappingClaim field.
func (o *ProviderSettingsWriteRequest) SetMappingClaim(v string) {
	o.MappingClaim.Set(&v)
}

// SetMappingClaimNil sets the value for MappingClaim to be an explicit nil
func (o *ProviderSettingsWriteRequest) SetMappingClaimNil() {
	o.MappingClaim.Set(nil)
}

// UnsetMappingClaim ensures that no value is present for MappingClaim, not even an explicit nil
func (o *ProviderSettingsWriteRequest) UnsetMappingClaim() {
	o.MappingClaim.Unset()
}

// GetName returns the Name field value
func (o *ProviderSettingsWriteRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProviderSettingsWriteRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProviderSettingsWriteRequest) SetName(v string) {
	o.Name = v
}

// GetProviderUrl returns the ProviderUrl field value
func (o *ProviderSettingsWriteRequest) GetProviderUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderUrl
}

// GetProviderUrlOk returns a tuple with the ProviderUrl field value
// and a boolean to check if the value has been set.
func (o *ProviderSettingsWriteRequest) GetProviderUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderUrl, true
}

// SetProviderUrl sets field value
func (o *ProviderSettingsWriteRequest) SetProviderUrl(v string) {
	o.ProviderUrl = v
}

// GetServiceAccounts returns the ServiceAccounts field value if set, zero value otherwise.
func (o *ProviderSettingsWriteRequest) GetServiceAccounts() []string {
	if o == nil || IsNil(o.ServiceAccounts) {
		var ret []string
		return ret
	}
	return o.ServiceAccounts
}

// GetServiceAccountsOk returns a tuple with the ServiceAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderSettingsWriteRequest) GetServiceAccountsOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceAccounts) {
		return nil, false
	}
	return o.ServiceAccounts, true
}

// HasServiceAccounts returns a boolean if a field has been set.
func (o *ProviderSettingsWriteRequest) HasServiceAccounts() bool {
	if o != nil && !IsNil(o.ServiceAccounts) {
		return true
	}

	return false
}

// SetServiceAccounts gets a reference to the given []string and assigns it to the ServiceAccounts field.
func (o *ProviderSettingsWriteRequest) SetServiceAccounts(v []string) {
	o.ServiceAccounts = v
}

func (o ProviderSettingsWriteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderSettingsWriteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["claims"] = o.Claims
	if !IsNil(o.DynamicMappings) {
		toSerialize["dynamic_mappings"] = o.DynamicMappings
	}
	toSerialize["enabled"] = o.Enabled
	if o.MappingClaim.IsSet() {
		toSerialize["mapping_claim"] = o.MappingClaim.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["provider_url"] = o.ProviderUrl
	if !IsNil(o.ServiceAccounts) {
		toSerialize["service_accounts"] = o.ServiceAccounts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProviderSettingsWriteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"claims",
		"enabled",
		"name",
		"provider_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderSettingsWriteRequest := _ProviderSettingsWriteRequest{}

	err = json.Unmarshal(data, &varProviderSettingsWriteRequest)

	if err != nil {
		return err
	}

	*o = ProviderSettingsWriteRequest(varProviderSettingsWriteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "claims")
		delete(additionalProperties, "dynamic_mappings")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "mapping_claim")
		delete(additionalProperties, "name")
		delete(additionalProperties, "provider_url")
		delete(additionalProperties, "service_accounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProviderSettingsWriteRequest struct {
	value *ProviderSettingsWriteRequest
	isSet bool
}

func (v NullableProviderSettingsWriteRequest) Get() *ProviderSettingsWriteRequest {
	return v.value
}

func (v *NullableProviderSettingsWriteRequest) Set(val *ProviderSettingsWriteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderSettingsWriteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderSettingsWriteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderSettingsWriteRequest(val *ProviderSettingsWriteRequest) *NullableProviderSettingsWriteRequest {
	return &NullableProviderSettingsWriteRequest{value: val, isSet: true}
}

func (v NullableProviderSettingsWriteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderSettingsWriteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
