/*
Cloudsmith API (v1)

The API to the Cloudsmith Service

API version: 1.703.0
Contact: support@cloudsmith.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudsmith

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PackageGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageGroup{}

// PackageGroup struct for PackageGroup
type PackageGroup struct {
	BackendKind          *int64        `json:"backend_kind,omitempty"`
	Count                NullableInt64 `json:"count"`
	LastPush             NullableTime  `json:"last_push"`
	Name                 *string       `json:"name,omitempty"`
	NumDownloads         NullableInt64 `json:"num_downloads"`
	Size                 NullableInt64 `json:"size"`
	AdditionalProperties map[string]interface{}
}

type _PackageGroup PackageGroup

// NewPackageGroup instantiates a new PackageGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageGroup(count NullableInt64, lastPush NullableTime, numDownloads NullableInt64, size NullableInt64) *PackageGroup {
	this := PackageGroup{}
	this.Count = count
	this.LastPush = lastPush
	this.NumDownloads = numDownloads
	this.Size = size
	return &this
}

// NewPackageGroupWithDefaults instantiates a new PackageGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageGroupWithDefaults() *PackageGroup {
	this := PackageGroup{}
	return &this
}

// GetBackendKind returns the BackendKind field value if set, zero value otherwise.
func (o *PackageGroup) GetBackendKind() int64 {
	if o == nil || IsNil(o.BackendKind) {
		var ret int64
		return ret
	}
	return *o.BackendKind
}

// GetBackendKindOk returns a tuple with the BackendKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageGroup) GetBackendKindOk() (*int64, bool) {
	if o == nil || IsNil(o.BackendKind) {
		return nil, false
	}
	return o.BackendKind, true
}

// HasBackendKind returns a boolean if a field has been set.
func (o *PackageGroup) HasBackendKind() bool {
	if o != nil && !IsNil(o.BackendKind) {
		return true
	}

	return false
}

// SetBackendKind gets a reference to the given int64 and assigns it to the BackendKind field.
func (o *PackageGroup) SetBackendKind(v int64) {
	o.BackendKind = &v
}

// GetCount returns the Count field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *PackageGroup) GetCount() int64 {
	if o == nil || o.Count.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageGroup) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// SetCount sets field value
func (o *PackageGroup) SetCount(v int64) {
	o.Count.Set(&v)
}

// GetLastPush returns the LastPush field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *PackageGroup) GetLastPush() time.Time {
	if o == nil || o.LastPush.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastPush.Get()
}

// GetLastPushOk returns a tuple with the LastPush field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageGroup) GetLastPushOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastPush.Get(), o.LastPush.IsSet()
}

// SetLastPush sets field value
func (o *PackageGroup) SetLastPush(v time.Time) {
	o.LastPush.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PackageGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PackageGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PackageGroup) SetName(v string) {
	o.Name = &v
}

// GetNumDownloads returns the NumDownloads field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *PackageGroup) GetNumDownloads() int64 {
	if o == nil || o.NumDownloads.Get() == nil {
		var ret int64
		return ret
	}

	return *o.NumDownloads.Get()
}

// GetNumDownloadsOk returns a tuple with the NumDownloads field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageGroup) GetNumDownloadsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumDownloads.Get(), o.NumDownloads.IsSet()
}

// SetNumDownloads sets field value
func (o *PackageGroup) SetNumDownloads(v int64) {
	o.NumDownloads.Set(&v)
}

// GetSize returns the Size field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *PackageGroup) GetSize() int64 {
	if o == nil || o.Size.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Size.Get()
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PackageGroup) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Size.Get(), o.Size.IsSet()
}

// SetSize sets field value
func (o *PackageGroup) SetSize(v int64) {
	o.Size.Set(&v)
}

func (o PackageGroup) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackendKind) {
		toSerialize["backend_kind"] = o.BackendKind
	}
	toSerialize["count"] = o.Count.Get()
	toSerialize["last_push"] = o.LastPush.Get()
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["num_downloads"] = o.NumDownloads.Get()
	toSerialize["size"] = o.Size.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PackageGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"count",
		"last_push",
		"num_downloads",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPackageGroup := _PackageGroup{}

	err = json.Unmarshal(data, &varPackageGroup)

	if err != nil {
		return err
	}

	*o = PackageGroup(varPackageGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "backend_kind")
		delete(additionalProperties, "count")
		delete(additionalProperties, "last_push")
		delete(additionalProperties, "name")
		delete(additionalProperties, "num_downloads")
		delete(additionalProperties, "size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePackageGroup struct {
	value *PackageGroup
	isSet bool
}

func (v NullablePackageGroup) Get() *PackageGroup {
	return v.value
}

func (v *NullablePackageGroup) Set(val *PackageGroup) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageGroup) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageGroup(val *PackageGroup) *NullablePackageGroup {
	return &NullablePackageGroup{value: val, isSet: true}
}

func (v NullablePackageGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
